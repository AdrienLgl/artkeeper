
STM32_uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800363c  0800363c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800363c  0800363c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800363c  0800363c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000068  080036ac  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080036ac  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c5f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191f  00000000  00000000  00025cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00027610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  00027e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101e8  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c3a  00000000  00000000  000387a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000526e7  00000000  00000000  0003f3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f0  00000000  00000000  00091b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800346c 	.word	0x0800346c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800346c 	.word	0x0800346c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	2201      	movs	r2, #1
 8000242:	4013      	ands	r3, r2
 8000244:	3b01      	subs	r3, #1
 8000246:	425a      	negs	r2, r3
 8000248:	4153      	adcs	r3, r2
 800024a:	b2db      	uxtb	r3, r3
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800025e:	230f      	movs	r3, #15
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0018      	movs	r0, r3
 800026a:	f7ff ffe3 	bl	8000234 <LL_ADC_IsEnabled>
 800026e:	1e03      	subs	r3, r0, #0
 8000270:	d118      	bne.n	80002a4 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a11      	ldr	r2, [pc, #68]	; (80002bc <LL_ADC_Init+0x68>)
 8000278:	401a      	ands	r2, r3
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	6859      	ldr	r1, [r3, #4]
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4319      	orrs	r1, r3
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	430b      	orrs	r3, r1
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	089a      	lsrs	r2, r3, #2
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	e003      	b.n	80002ac <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002a4:	230f      	movs	r3, #15
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80002ac:	230f      	movs	r3, #15
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	781b      	ldrb	r3, [r3, #0]
}
 80002b2:	0018      	movs	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b004      	add	sp, #16
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	ffff3fc7 	.word	0xffff3fc7

080002c0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ca:	230f      	movs	r3, #15
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ffad 	bl	8000234 <LL_ADC_IsEnabled>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d115      	bne.n	800030a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <LL_ADC_REG_Init+0x60>)
 80002e4:	401a      	ands	r2, r3
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	6819      	ldr	r1, [r3, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4319      	orrs	r1, r3
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4319      	orrs	r1, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4319      	orrs	r1, r3
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	430b      	orrs	r3, r1
 8000302:	431a      	orrs	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	e003      	b.n	8000312 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800030a:	230f      	movs	r3, #15
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000312:	230f      	movs	r3, #15
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}
 8000320:	fffec23c 	.word	0xfffec23c

08000324 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <LL_EXTI_EnableIT_0_31+0x1c>)
 800032e:	6819      	ldr	r1, [r3, #0]
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	430a      	orrs	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010400 	.word	0x40010400

08000344 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <LL_EXTI_DisableIT_0_31+0x20>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	43d9      	mvns	r1, r3
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <LL_EXTI_DisableIT_0_31+0x20>)
 8000356:	400a      	ands	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	40010400 	.word	0x40010400

08000368 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000372:	6859      	ldr	r1, [r3, #4]
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	605a      	str	r2, [r3, #4]

}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010400 	.word	0x40010400

08000388 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000392:	685a      	ldr	r2, [r3, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	43d9      	mvns	r1, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <LL_EXTI_DisableEvent_0_31+0x20>)
 800039a:	400a      	ands	r2, r1
 800039c:	605a      	str	r2, [r3, #4]
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	40010400 	.word	0x40010400

080003ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80003b6:	6899      	ldr	r1, [r3, #8]
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	609a      	str	r2, [r3, #8]

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40010400 	.word	0x40010400

080003cc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	43d9      	mvns	r1, r3
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80003de:	400a      	ands	r2, r1
 80003e0:	609a      	str	r2, [r3, #8]

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40010400 	.word	0x40010400

080003f0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80003fa:	68d9      	ldr	r1, [r3, #12]
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	430a      	orrs	r2, r1
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010400 	.word	0x40010400

08000410 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	43d9      	mvns	r1, r3
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000422:	400a      	ands	r2, r1
 8000424:	60da      	str	r2, [r3, #12]
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40010400 	.word	0x40010400

08000434 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800043c:	230f      	movs	r3, #15
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d100      	bne.n	800044e <LL_EXTI_Init+0x1a>
 800044c:	e068      	b.n	8000520 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d100      	bne.n	8000458 <LL_EXTI_Init+0x24>
 8000456:	e06e      	b.n	8000536 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b02      	cmp	r3, #2
 800045e:	d01b      	beq.n	8000498 <LL_EXTI_Init+0x64>
 8000460:	dc25      	bgt.n	80004ae <LL_EXTI_Init+0x7a>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <LL_EXTI_Init+0x38>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d00b      	beq.n	8000482 <LL_EXTI_Init+0x4e>
 800046a:	e020      	b.n	80004ae <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ff89 	bl	8000388 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	0018      	movs	r0, r3
 800047c:	f7ff ff52 	bl	8000324 <LL_EXTI_EnableIT_0_31>
          break;
 8000480:	e01a      	b.n	80004b8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff ff5c 	bl	8000344 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ff69 	bl	8000368 <LL_EXTI_EnableEvent_0_31>
          break;
 8000496:	e00f      	b.n	80004b8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ff41 	bl	8000324 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff ff5e 	bl	8000368 <LL_EXTI_EnableEvent_0_31>
          break;
 80004ac:	e004      	b.n	80004b8 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 80004ae:	230f      	movs	r3, #15
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
          break;
 80004b6:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	799b      	ldrb	r3, [r3, #6]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d03a      	beq.n	8000536 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d01b      	beq.n	8000500 <LL_EXTI_Init+0xcc>
 80004c8:	dc25      	bgt.n	8000516 <LL_EXTI_Init+0xe2>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d002      	beq.n	80004d4 <LL_EXTI_Init+0xa0>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d00b      	beq.n	80004ea <LL_EXTI_Init+0xb6>
 80004d2:	e020      	b.n	8000516 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ff99 	bl	8000410 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff62 	bl	80003ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80004e8:	e026      	b.n	8000538 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ff6c 	bl	80003cc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff ff79 	bl	80003f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004fe:	e01b      	b.n	8000538 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff51 	bl	80003ac <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff6e 	bl	80003f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000514:	e010      	b.n	8000538 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8000516:	230f      	movs	r3, #15
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
            break;
 800051e:	e00b      	b.n	8000538 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff ff0d 	bl	8000344 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff2a 	bl	8000388 <LL_EXTI_DisableEvent_0_31>
 8000534:	e000      	b.n	8000538 <LL_EXTI_Init+0x104>
      }
 8000536:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8000538:	230f      	movs	r3, #15
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	781b      	ldrb	r3, [r3, #0]
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}

08000546 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b084      	sub	sp, #16
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	435b      	muls	r3, r3
 800055a:	001a      	movs	r2, r3
 800055c:	0013      	movs	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	189b      	adds	r3, r3, r2
 8000562:	43db      	mvns	r3, r3
 8000564:	400b      	ands	r3, r1
 8000566:	001a      	movs	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	435b      	muls	r3, r3
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	434b      	muls	r3, r1
 8000570:	431a      	orrs	r2, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bd80      	pop	{r7, pc}

0800057e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	43d2      	mvns	r2, r2
 8000592:	401a      	ands	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	434b      	muls	r3, r1
 800059a:	431a      	orrs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b004      	add	sp, #16
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6899      	ldr	r1, [r3, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	435b      	muls	r3, r3
 80005bc:	001a      	movs	r2, r3
 80005be:	0013      	movs	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	189b      	adds	r3, r3, r2
 80005c4:	43db      	mvns	r3, r3
 80005c6:	400b      	ands	r3, r1
 80005c8:	001a      	movs	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	435b      	muls	r3, r3
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	434b      	muls	r3, r1
 80005d2:	431a      	orrs	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b004      	add	sp, #16
 80005de:	bd80      	pop	{r7, pc}

080005e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68d9      	ldr	r1, [r3, #12]
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	435b      	muls	r3, r3
 80005f4:	001a      	movs	r2, r3
 80005f6:	0013      	movs	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	43db      	mvns	r3, r3
 80005fe:	400b      	ands	r3, r1
 8000600:	001a      	movs	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	435b      	muls	r3, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	434b      	muls	r3, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	60da      	str	r2, [r3, #12]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}

08000618 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a19      	ldr	r1, [r3, #32]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	435b      	muls	r3, r3
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	4353      	muls	r3, r2
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	435a      	muls	r2, r3
 8000634:	0013      	movs	r3, r2
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	43db      	mvns	r3, r3
 800063c:	400b      	ands	r3, r1
 800063e:	001a      	movs	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	435b      	muls	r3, r3
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	434b      	muls	r3, r1
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	434b      	muls	r3, r1
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	434b      	muls	r3, r1
 8000650:	431a      	orrs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}

0800065e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	0a12      	lsrs	r2, r2, #8
 8000676:	4353      	muls	r3, r2
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	0a12      	lsrs	r2, r2, #8
 800067c:	4353      	muls	r3, r2
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	0a12      	lsrs	r2, r2, #8
 8000682:	435a      	muls	r2, r3
 8000684:	0013      	movs	r3, r2
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	43db      	mvns	r3, r3
 800068c:	400b      	ands	r3, r1
 800068e:	001a      	movs	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	0a09      	lsrs	r1, r1, #8
 8000698:	434b      	muls	r3, r1
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	0a09      	lsrs	r1, r1, #8
 800069e:	434b      	muls	r3, r1
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	0a09      	lsrs	r1, r1, #8
 80006a4:	434b      	muls	r3, r1
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	434b      	muls	r3, r1
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80006ca:	e048      	b.n	800075e <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2101      	movs	r1, #1
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d03a      	beq.n	8000758 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d003      	beq.n	80006f2 <LL_GPIO_Init+0x3a>
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d10e      	bne.n	8000710 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff54 	bl	80005a8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ff37 	bl	800057e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	691a      	ldr	r2, [r3, #16]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff61 	bl	80005e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d111      	bne.n	800074a <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d807      	bhi.n	800073c <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff6f 	bl	8000618 <LL_GPIO_SetAFPin_0_7>
 800073a:	e006      	b.n	800074a <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff8a 	bl	800065e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	68b9      	ldr	r1, [r7, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fef7 	bl	8000546 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	40da      	lsrs	r2, r3
 8000766:	1e13      	subs	r3, r2, #0
 8000768:	d1b0      	bne.n	80006cc <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800076a:	2300      	movs	r3, #0
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}

08000774 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_RCC_HSI_IsReady+0x1c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2204      	movs	r2, #4
 800077e:	4013      	ands	r3, r2
 8000780:	2b04      	cmp	r3, #4
 8000782:	d101      	bne.n	8000788 <LL_RCC_HSI_IsReady+0x14>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <LL_RCC_HSI_IsReady+0x16>
 8000788:	2300      	movs	r3, #0
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <LL_RCC_LSE_IsReady+0x24>)
 800079a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	401a      	ands	r2, r3
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d101      	bne.n	80007ae <LL_RCC_LSE_IsReady+0x1a>
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <LL_RCC_LSE_IsReady+0x1c>
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <LL_RCC_MSI_GetRange+0x14>)
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	23e0      	movs	r3, #224	; 0xe0
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	4013      	ands	r3, r2
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <LL_RCC_GetSysClkSource+0x14>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	220c      	movs	r2, #12
 80007de:	4013      	ands	r3, r2
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <LL_RCC_GetAHBPrescaler+0x14>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	22f0      	movs	r2, #240	; 0xf0
 80007f6:	4013      	ands	r3, r2
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <LL_RCC_GetAPB1Prescaler+0x14>)
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	23e0      	movs	r3, #224	; 0xe0
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4013      	ands	r3, r2
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000

0800081c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	23e0      	movs	r3, #224	; 0xe0
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	4013      	ands	r3, r2
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_RCC_GetUSARTClockSource+0x20>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	401a      	ands	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	041b      	lsls	r3, r3, #16
 8000848:	4313      	orrs	r3, r2
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <LL_RCC_PLL_GetMainSource+0x14>)
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	4013      	ands	r3, r2
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	23f0      	movs	r3, #240	; 0xf0
 800087a:	039b      	lsls	r3, r3, #14
 800087c:	4013      	ands	r3, r2
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <LL_RCC_PLL_GetDivider+0x14>)
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	4013      	ands	r3, r2
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2210      	movs	r2, #16
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d101      	bne.n	80008b4 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000

080008c0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d139      	bne.n	8000946 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffad 	bl	8000834 <LL_RCC_GetUSARTClockSource>
 80008da:	0003      	movs	r3, r0
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <LL_RCC_GetUSARTClockFreq+0x120>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d01c      	beq.n	800091c <LL_RCC_GetUSARTClockFreq+0x5c>
 80008e2:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <LL_RCC_GetUSARTClockFreq+0x120>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d821      	bhi.n	800092c <LL_RCC_GetUSARTClockFreq+0x6c>
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <LL_RCC_GetUSARTClockFreq+0x124>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d003      	beq.n	80008f6 <LL_RCC_GetUSARTClockFreq+0x36>
 80008ee:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <LL_RCC_GetUSARTClockFreq+0x128>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d005      	beq.n	8000900 <LL_RCC_GetUSARTClockFreq+0x40>
 80008f4:	e01a      	b.n	800092c <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80008f6:	f000 f883 	bl	8000a00 <RCC_GetSystemClockFreq>
 80008fa:	0003      	movs	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]
        break;
 80008fe:	e027      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000900:	f7ff ff38 	bl	8000774 <LL_RCC_HSI_IsReady>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d020      	beq.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000908:	f7ff ffca 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d002      	beq.n	8000916 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000912:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000914:	e019      	b.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <LL_RCC_GetUSARTClockFreq+0x130>)
 8000918:	60fb      	str	r3, [r7, #12]
        break;
 800091a:	e016      	b.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800091c:	f7ff ff3a 	bl	8000794 <LL_RCC_LSE_IsReady>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d014      	beq.n	800094e <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
        }
        break;
 800092a:	e010      	b.n	800094e <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800092c:	f000 f868 	bl	8000a00 <RCC_GetSystemClockFreq>
 8000930:	0003      	movs	r3, r0
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f8a8 	bl	8000a88 <RCC_GetHCLKClockFreq>
 8000938:	0003      	movs	r3, r0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8ce 	bl	8000adc <RCC_GetPCLK2ClockFreq>
 8000940:	0003      	movs	r3, r0
 8000942:	60fb      	str	r3, [r7, #12]
        break;
 8000944:	e004      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e002      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	e000      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800094e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b0c      	cmp	r3, #12
 8000954:	d139      	bne.n	80009ca <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff6b 	bl	8000834 <LL_RCC_GetUSARTClockSource>
 800095e:	0003      	movs	r3, r0
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01c      	beq.n	80009a0 <LL_RCC_GetUSARTClockFreq+0xe0>
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d821      	bhi.n	80009b0 <LL_RCC_GetUSARTClockFreq+0xf0>
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <LL_RCC_GetUSARTClockFreq+0x138>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d003      	beq.n	800097a <LL_RCC_GetUSARTClockFreq+0xba>
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <LL_RCC_GetUSARTClockFreq+0x13c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d005      	beq.n	8000984 <LL_RCC_GetUSARTClockFreq+0xc4>
 8000978:	e01a      	b.n	80009b0 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800097a:	f000 f841 	bl	8000a00 <RCC_GetSystemClockFreq>
 800097e:	0003      	movs	r3, r0
 8000980:	60fb      	str	r3, [r7, #12]
        break;
 8000982:	e027      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000984:	f7ff fef6 	bl	8000774 <LL_RCC_HSI_IsReady>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d020      	beq.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800098c:	f7ff ff88 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d002      	beq.n	800099a <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000996:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000998:	e019      	b.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <LL_RCC_GetUSARTClockFreq+0x130>)
 800099c:	60fb      	str	r3, [r7, #12]
        break;
 800099e:	e016      	b.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80009a0:	f7ff fef8 	bl	8000794 <LL_RCC_LSE_IsReady>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d014      	beq.n	80009d2 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009ae:	e010      	b.n	80009d2 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80009b0:	f000 f826 	bl	8000a00 <RCC_GetSystemClockFreq>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f866 	bl	8000a88 <RCC_GetHCLKClockFreq>
 80009bc:	0003      	movs	r3, r0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f878 	bl	8000ab4 <RCC_GetPCLK1ClockFreq>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60fb      	str	r3, [r7, #12]
        break;
 80009c8:	e004      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	e002      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	e000      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80009d2:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80009d4:	68fb      	ldr	r3, [r7, #12]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	00030003 	.word	0x00030003
 80009e4:	00030001 	.word	0x00030001
 80009e8:	00030002 	.word	0x00030002
 80009ec:	003d0900 	.word	0x003d0900
 80009f0:	00f42400 	.word	0x00f42400
 80009f4:	000c000c 	.word	0x000c000c
 80009f8:	000c0004 	.word	0x000c0004
 80009fc:	000c0008 	.word	0x000c0008

08000a00 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000a06:	f7ff fee5 	bl	80007d4 <LL_RCC_GetSysClkSource>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	2b0c      	cmp	r3, #12
 8000a0e:	d020      	beq.n	8000a52 <RCC_GetSystemClockFreq+0x52>
 8000a10:	d824      	bhi.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
 8000a12:	2b08      	cmp	r3, #8
 8000a14:	d01a      	beq.n	8000a4c <RCC_GetSystemClockFreq+0x4c>
 8000a16:	d821      	bhi.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <RCC_GetSystemClockFreq+0x22>
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d00b      	beq.n	8000a38 <RCC_GetSystemClockFreq+0x38>
 8000a20:	e01c      	b.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000a22:	f7ff fecb 	bl	80007bc <LL_RCC_MSI_GetRange>
 8000a26:	0003      	movs	r3, r0
 8000a28:	0b5b      	lsrs	r3, r3, #13
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0212      	lsls	r2, r2, #8
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	607b      	str	r3, [r7, #4]
      break;
 8000a36:	e01c      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000a38:	f7ff ff32 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d002      	beq.n	8000a46 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <RCC_GetSystemClockFreq+0x7c>)
 8000a42:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000a44:	e015      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <RCC_GetSystemClockFreq+0x80>)
 8000a48:	607b      	str	r3, [r7, #4]
      break;
 8000a4a:	e012      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <RCC_GetSystemClockFreq+0x84>)
 8000a4e:	607b      	str	r3, [r7, #4]
      break;
 8000a50:	e00f      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000a52:	f000 f857 	bl	8000b04 <RCC_PLL_GetFreqDomain_SYS>
 8000a56:	0003      	movs	r3, r0
 8000a58:	607b      	str	r3, [r7, #4]
      break;
 8000a5a:	e00a      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000a5c:	f7ff feae 	bl	80007bc <LL_RCC_MSI_GetRange>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0b5b      	lsrs	r3, r3, #13
 8000a64:	3301      	adds	r3, #1
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0212      	lsls	r2, r2, #8
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
      break;
 8000a70:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000a72:	687b      	ldr	r3, [r7, #4]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	003d0900 	.word	0x003d0900
 8000a80:	00f42400 	.word	0x00f42400
 8000a84:	007a1200 	.word	0x007a1200

08000a88 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000a90:	f7ff feac 	bl	80007ec <LL_RCC_GetAHBPrescaler>
 8000a94:	0003      	movs	r3, r0
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	220f      	movs	r2, #15
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <RCC_GetHCLKClockFreq+0x28>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	40d3      	lsrs	r3, r2
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	08003580 	.word	0x08003580

08000ab4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000abc:	f7ff fea2 	bl	8000804 <LL_RCC_GetAPB1Prescaler>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <RCC_GetPCLK1ClockFreq+0x24>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	40d3      	lsrs	r3, r2
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	08003590 	.word	0x08003590

08000adc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000ae4:	f7ff fe9a 	bl	800081c <LL_RCC_GetAPB2Prescaler>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0adb      	lsrs	r3, r3, #11
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <RCC_GetPCLK2ClockFreq+0x24>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	001a      	movs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	40d3      	lsrs	r3, r2
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	08003590 	.word	0x08003590

08000b04 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000b0a:	f7ff fea5 	bl	8000858 <LL_RCC_PLL_GetMainSource>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000b18:	f7ff fec2 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d002      	beq.n	8000b26 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000b22:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000b24:	e005      	b.n	8000b32 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000b28:	607b      	str	r3, [r7, #4]
      break;
 8000b2a:	e002      	b.n	8000b32 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000b2e:	607b      	str	r3, [r7, #4]
      break;
 8000b30:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000b32:	f7ff fe9d 	bl	8000870 <LL_RCC_PLL_GetMultiplicator>
 8000b36:	0003      	movs	r3, r0
 8000b38:	0c9b      	lsrs	r3, r3, #18
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	001a      	movs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4353      	muls	r3, r2
 8000b44:	001c      	movs	r4, r3
 8000b46:	f7ff fe9f 	bl	8000888 <LL_RCC_PLL_GetDivider>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	0d9b      	lsrs	r3, r3, #22
 8000b4e:	3301      	adds	r3, #1
 8000b50:	0019      	movs	r1, r3
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff fae2 	bl	800011c <__udivsi3>
 8000b58:	0003      	movs	r3, r0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b003      	add	sp, #12
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	003d0900 	.word	0x003d0900
 8000b68:	00f42400 	.word	0x00f42400
 8000b6c:	007a1200 	.word	0x007a1200
 8000b70:	08003598 	.word	0x08003598

08000b74 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d101      	bne.n	8000b8c <LL_USART_IsEnabled+0x18>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <LL_USART_IsEnabled+0x1a>
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <LL_USART_SetStopBitsLength+0x24>)
 8000ba8:	401a      	ands	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	ffffcfff 	.word	0xffffcfff

08000bc0 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <LL_USART_SetHWFlowCtrl+0x24>)
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	fffffcff 	.word	0xfffffcff

08000be8 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d11c      	bne.n	8000c3a <LL_USART_SetBaudRate+0x52>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	005a      	lsls	r2, r3, #1
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fa85 	bl	800011c <__udivsi3>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <LL_USART_SetBaudRate+0x74>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	001a      	movs	r2, r3
 8000c28:	2307      	movs	r3, #7
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000c38:	e00c      	b.n	8000c54 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	085a      	lsrs	r2, r3, #1
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fa69 	bl	800011c <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0000fff0 	.word	0x0000fff0

08000c60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff7b 	bl	8000b74 <LL_USART_IsEnabled>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d145      	bne.n	8000d0e <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <LL_USART_Init+0xbc>)
 8000c88:	401a      	ands	r2, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	6859      	ldr	r1, [r3, #4]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	4319      	orrs	r1, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff72 	bl	8000b98 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff7f 	bl	8000bc0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <LL_USART_Init+0xc0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f7ff fdf8 	bl	80008c0 <LL_RCC_GetUSARTClockFreq>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e008      	b.n	8000ce8 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <LL_USART_Init+0xc4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d104      	bne.n	8000ce8 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000cde:	200c      	movs	r0, #12
 8000ce0:	f7ff fdee 	bl	80008c0 <LL_RCC_GetUSARTClockFreq>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00f      	beq.n	8000d0e <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00b      	beq.n	8000d0e <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff6d 	bl	8000be8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	efff69f3 	.word	0xefff69f3
 8000d20:	40013800 	.word	0x40013800
 8000d24:	40004400 	.word	0x40004400

08000d28 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff f9f1 	bl	800011c <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_InitTick+0x30>)
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <LL_InitTick+0x30>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <LL_InitTick+0x30>)
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d64:	23fa      	movs	r3, #250	; 0xfa
 8000d66:	009a      	lsls	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffdb 	bl	8000d28 <LL_InitTick>
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <LL_mDelay+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d8a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	d00c      	beq.n	8000dac <LL_mDelay+0x30>
  {
    Delay++;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3301      	adds	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d98:	e008      	b.n	8000dac <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <LL_mDelay+0x40>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	4013      	ands	r3, r2
 8000da4:	d002      	beq.n	8000dac <LL_mDelay+0x30>
    {
      Delay--;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f3      	bne.n	8000d9a <LL_mDelay+0x1e>
    }
  }
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b004      	add	sp, #16
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <LL_SetSystemCoreClock+0x18>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000000 	.word	0x20000000

08000ddc <LL_ADC_SetCommonClock>:
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <LL_ADC_SetCommonClock+0x24>)
 8000dec:	401a      	ands	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	ffc3ffff 	.word	0xffc3ffff

08000e04 <LL_ADC_SetCommonFrequencyMode>:
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000e14:	401a      	ands	r2, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	fdffffff 	.word	0xfdffffff

08000e2c <LL_ADC_SetCommonPathInternalCh>:
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	fe3fffff 	.word	0xfe3fffff

08000e54 <LL_ADC_SetClock>:
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	089a      	lsrs	r2, r3, #2
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	611a      	str	r2, [r3, #16]
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	2207      	movs	r2, #7
 8000e86:	4393      	bics	r3, r2
 8000e88:	001a      	movs	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	615a      	str	r2, [r3, #20]
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LL_ADC_REG_SetSequencerScanDirection>:
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4393      	bics	r3, r2
 8000eac:	001a      	movs	r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LL_ADC_REG_SetSequencerChAdd>:
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	035b      	lsls	r3, r3, #13
 8000ed0:	0b5b      	lsrs	r3, r3, #13
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <LL_ADC_SetOverSamplingScope>:
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4393      	bics	r3, r2
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <LL_ADC_EnableInternalRegulator>:
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0552      	lsls	r2, r2, #21
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	6fffffe8 	.word	0x6fffffe8

08000f2c <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4393      	bics	r3, r2
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	605a      	str	r2, [r3, #4]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2208      	movs	r2, #8
 8000f58:	4393      	bics	r3, r2
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	605a      	str	r2, [r3, #4]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_IOP_GRP1_EnableClock+0x28>)
 8000f9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_IOP_GRP1_EnableClock+0x28>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_IOP_GRP1_EnableClock+0x28>)
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b090      	sub	sp, #64	; 0x40
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000fc6:	2428      	movs	r4, #40	; 0x28
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2314      	movs	r3, #20
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f001 f9ef 	bl	80023b4 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000fd6:	2518      	movs	r5, #24
 8000fd8:	197b      	adds	r3, r7, r5
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2310      	movs	r3, #16
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f001 f9e7 	bl	80023b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	0018      	movs	r0, r3
 8000fea:	2318      	movs	r3, #24
 8000fec:	001a      	movs	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f001 f9e0 	bl	80023b4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ffb5 	bl	8000f68 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f7ff ffc8 	bl	8000f94 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PC1   ------> ADC_IN11
  PC3   ------> ADC_IN13
  PC5   ------> ADC_IN15
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001004:	003b      	movs	r3, r7
 8001006:	2202      	movs	r2, #2
 8001008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800100a:	003b      	movs	r3, r7
 800100c:	2203      	movs	r2, #3
 800100e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001010:	003b      	movs	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	003b      	movs	r3, r7
 8001018:	4a5f      	ldr	r2, [pc, #380]	; (8001198 <MX_ADC_Init+0x1d8>)
 800101a:	0019      	movs	r1, r3
 800101c:	0010      	movs	r0, r2
 800101e:	f7ff fb4b 	bl	80006b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001022:	003b      	movs	r3, r7
 8001024:	2208      	movs	r2, #8
 8001026:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001028:	003b      	movs	r3, r7
 800102a:	2203      	movs	r2, #3
 800102c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	003b      	movs	r3, r7
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <MX_ADC_Init+0x1d8>)
 8001038:	0019      	movs	r1, r3
 800103a:	0010      	movs	r0, r2
 800103c:	f7ff fb3c 	bl	80006b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001040:	003b      	movs	r3, r7
 8001042:	2220      	movs	r2, #32
 8001044:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001046:	003b      	movs	r3, r7
 8001048:	2203      	movs	r2, #3
 800104a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104c:	003b      	movs	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	003b      	movs	r3, r7
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <MX_ADC_Init+0x1d8>)
 8001056:	0019      	movs	r1, r3
 8001058:	0010      	movs	r0, r2
 800105a:	f7ff fb2d 	bl	80006b8 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_11);
 800105e:	4a4f      	ldr	r2, [pc, #316]	; (800119c <MX_ADC_Init+0x1dc>)
 8001060:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff2a 	bl	8000ebe <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_13);
 800106a:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <MX_ADC_Init+0x1e4>)
 800106c:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <MX_ADC_Init+0x1e0>)
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff ff24 	bl	8000ebe <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_15);
 8001076:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <MX_ADC_Init+0x1e8>)
 8001078:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <MX_ADC_Init+0x1e0>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff1e 	bl	8000ebe <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_TEMPSENSOR);
 8001082:	4a4a      	ldr	r2, [pc, #296]	; (80011ac <MX_ADC_Init+0x1ec>)
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff18 	bl	8000ebe <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <MX_ADC_Init+0x1f0>)
 8001094:	0019      	movs	r1, r3
 8001096:	0010      	movs	r0, r2
 8001098:	f7ff fec8 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 800109c:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <MX_ADC_Init+0x1f4>)
 800109e:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <MX_ADC_Init+0x1e0>)
 80010a0:	0011      	movs	r1, r2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff ff0b 	bl	8000ebe <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	03db      	lsls	r3, r3, #15
 80010ac:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <MX_ADC_Init+0x1f0>)
 80010ae:	0019      	movs	r1, r3
 80010b0:	0010      	movs	r0, r2
 80010b2:	f7ff febb 	bl	8000e2c <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80010b6:	0021      	movs	r1, r4
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <MX_ADC_Init+0x1e0>)
 80010da:	0019      	movs	r1, r3
 80010dc:	0010      	movs	r0, r2
 80010de:	f7ff f8ef 	bl	80002c0 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_ADC_Init+0x1e0>)
 80010e4:	2105      	movs	r1, #5
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fec5 	bl	8000e76 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_ADC_Init+0x1e0>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fef5 	bl	8000ee0 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_ADC_Init+0x1e0>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff fecd 	bl	8000e9a <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	049b      	lsls	r3, r3, #18
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <MX_ADC_Init+0x1f0>)
 8001106:	0019      	movs	r1, r3
 8001108:	0010      	movs	r0, r2
 800110a:	f7ff fe7b 	bl	8000e04 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff0b 	bl	8000f2c <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ff16 	bl	8000f4a <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800111e:	197b      	adds	r3, r7, r5
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001124:	197b      	adds	r3, r7, r5
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800112a:	197b      	adds	r3, r7, r5
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001130:	197b      	adds	r3, r7, r5
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001134:	0019      	movs	r1, r3
 8001136:	0010      	movs	r0, r2
 8001138:	f7ff f88c 	bl	8000254 <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_ADC_Init+0x1e0>)
 800113e:	2100      	movs	r1, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fe87 	bl	8000e54 <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 8001146:	23e0      	movs	r3, #224	; 0xe0
 8001148:	035b      	lsls	r3, r3, #13
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_ADC_Init+0x1f0>)
 800114c:	0019      	movs	r1, r3
 800114e:	0010      	movs	r0, r2
 8001150:	f7ff fe44 	bl	8000ddc <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_ADC_Init+0x1e0>)
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff fed4 	bl	8000f04 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_ADC_Init+0x1f8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4916      	ldr	r1, [pc, #88]	; (80011bc <MX_ADC_Init+0x1fc>)
 8001162:	0018      	movs	r0, r3
 8001164:	f7fe ffda 	bl	800011c <__udivsi3>
 8001168:	0003      	movs	r3, r0
 800116a:	001a      	movs	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	189b      	adds	r3, r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	210a      	movs	r1, #10
 8001176:	0018      	movs	r0, r3
 8001178:	f7fe ffd0 	bl	800011c <__udivsi3>
 800117c:	0003      	movs	r3, r0
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001180:	e002      	b.n	8001188 <MX_ADC_Init+0x1c8>
  {
    wait_loop_index--;
 8001182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001184:	3b01      	subs	r3, #1
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <MX_ADC_Init+0x1c2>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b010      	add	sp, #64	; 0x40
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	50000800 	.word	0x50000800
 800119c:	2c000800 	.word	0x2c000800
 80011a0:	40012400 	.word	0x40012400
 80011a4:	34002000 	.word	0x34002000
 80011a8:	3c008000 	.word	0x3c008000
 80011ac:	c8040000 	.word	0xc8040000
 80011b0:	40012708 	.word	0x40012708
 80011b4:	c4020000 	.word	0xc4020000
 80011b8:	20000000 	.word	0x20000000
 80011bc:	00030d40 	.word	0x00030d40

080011c0 <LL_IOP_GRP1_EnableClock>:
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80011ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <LL_SYSCFG_SetEXTISource+0x48>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	21ff      	movs	r1, #255	; 0xff
 80011fc:	400b      	ands	r3, r1
 80011fe:	3302      	adds	r3, #2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	589b      	ldr	r3, [r3, r2]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	0c12      	lsrs	r2, r2, #16
 8001208:	210f      	movs	r1, #15
 800120a:	4091      	lsls	r1, r2
 800120c:	000a      	movs	r2, r1
 800120e:	43d2      	mvns	r2, r2
 8001210:	401a      	ands	r2, r3
 8001212:	0011      	movs	r1, r2
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	0c1b      	lsrs	r3, r3, #16
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	409a      	lsls	r2, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <LL_SYSCFG_SetEXTISource+0x48>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	24ff      	movs	r4, #255	; 0xff
 8001222:	4023      	ands	r3, r4
 8001224:	430a      	orrs	r2, r1
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	501a      	str	r2, [r3, r0]
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b003      	add	sp, #12
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	40010000 	.word	0x40010000

08001238 <LL_GPIO_SetPinMode>:
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	435b      	muls	r3, r3
 800124c:	001a      	movs	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	189b      	adds	r3, r3, r2
 8001254:	43db      	mvns	r3, r3
 8001256:	400b      	ands	r3, r1
 8001258:	001a      	movs	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	435b      	muls	r3, r3
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	434b      	muls	r3, r1
 8001262:	431a      	orrs	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <LL_GPIO_SetPinPull>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68d9      	ldr	r1, [r3, #12]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	435b      	muls	r3, r3
 8001284:	001a      	movs	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	189b      	adds	r3, r3, r2
 800128c:	43db      	mvns	r3, r3
 800128e:	400b      	ands	r3, r1
 8001290:	001a      	movs	r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	435b      	muls	r3, r3
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	434b      	muls	r3, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	60da      	str	r2, [r3, #12]
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b004      	add	sp, #16
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80012c6:	2418      	movs	r4, #24
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	0018      	movs	r0, r3
 80012cc:	2308      	movs	r3, #8
 80012ce:	001a      	movs	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f001 f86f 	bl	80023b4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	003b      	movs	r3, r7
 80012d8:	0018      	movs	r0, r3
 80012da:	2318      	movs	r3, #24
 80012dc:	001a      	movs	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	f001 f868 	bl	80023b4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff ff6b 	bl	80011c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 80012ea:	2080      	movs	r0, #128	; 0x80
 80012ec:	f7ff ff68 	bl	80011c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ff65 	bl	80011c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <MX_GPIO_Init+0x164>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ffd4 	bl	80012a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <MX_GPIO_Init+0x164>)
 8001302:	2104      	movs	r1, #4
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ffcf 	bl	80012a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	2120      	movs	r1, #32
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ffc9 	bl	80012a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4a42      	ldr	r2, [pc, #264]	; (8001424 <MX_GPIO_Init+0x164>)
 800131c:	0019      	movs	r1, r3
 800131e:	0010      	movs	r0, r2
 8001320:	f7ff ffc2 	bl	80012a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <MX_GPIO_Init+0x168>)
 8001326:	0019      	movs	r1, r3
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff ff5f 	bl	80011ec <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	483c      	ldr	r0, [pc, #240]	; (8001424 <MX_GPIO_Init+0x164>)
 8001334:	2200      	movs	r2, #0
 8001336:	0019      	movs	r1, r3
 8001338:	f7ff ff9a 	bl	8001270 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	019b      	lsls	r3, r3, #6
 8001340:	4838      	ldr	r0, [pc, #224]	; (8001424 <MX_GPIO_Init+0x164>)
 8001342:	2200      	movs	r2, #0
 8001344:	0019      	movs	r1, r3
 8001346:	f7ff ff77 	bl	8001238 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800134a:	0021      	movs	r1, r4
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	0192      	lsls	r2, r2, #6
 8001352:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2201      	movs	r2, #1
 8001358:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2202      	movs	r2, #2
 8001364:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001366:	187b      	adds	r3, r7, r1
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff f863 	bl	8000434 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800136e:	003b      	movs	r3, r7
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001374:	003b      	movs	r3, r7
 8001376:	2201      	movs	r2, #1
 8001378:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800137a:	003b      	movs	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001380:	003b      	movs	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001386:	003b      	movs	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	003b      	movs	r3, r7
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <MX_GPIO_Init+0x164>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f7ff f990 	bl	80006b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001398:	003b      	movs	r3, r7
 800139a:	2204      	movs	r2, #4
 800139c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800139e:	003b      	movs	r3, r7
 80013a0:	2201      	movs	r2, #1
 80013a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013a4:	003b      	movs	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013aa:	003b      	movs	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b0:	003b      	movs	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	003b      	movs	r3, r7
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <MX_GPIO_Init+0x164>)
 80013ba:	0019      	movs	r1, r3
 80013bc:	0010      	movs	r0, r2
 80013be:	f7ff f97b 	bl	80006b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c2:	003b      	movs	r3, r7
 80013c4:	2220      	movs	r2, #32
 80013c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013c8:	003b      	movs	r3, r7
 80013ca:	2201      	movs	r2, #1
 80013cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013ce:	003b      	movs	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013d4:	003b      	movs	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013da:	003b      	movs	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e0:	003a      	movs	r2, r7
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff f965 	bl	80006b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80013ee:	003b      	movs	r3, r7
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013f6:	003b      	movs	r3, r7
 80013f8:	2201      	movs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013fc:	003b      	movs	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001402:	003b      	movs	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	003b      	movs	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	003b      	movs	r3, r7
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <MX_GPIO_Init+0x164>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7ff f94f 	bl	80006b8 <LL_GPIO_Init>

}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b009      	add	sp, #36	; 0x24
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	50000800 	.word	0x50000800
 8001428:	00040003 	.word	0x00040003

0800142c <LL_ADC_SetCommonPathInternalCh>:
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800143c:	401a      	ands	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	fe3fffff 	.word	0xfe3fffff

08001454 <LL_ADC_REG_SetSequencerChannels>:
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	035b      	lsls	r3, r3, #13
 8001462:	0b5a      	lsrs	r2, r3, #13
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}

08001470 <LL_ADC_Enable>:
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <LL_ADC_Enable+0x20>)
 800147e:	4013      	ands	r3, r2
 8001480:	2201      	movs	r2, #1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}
 8001490:	7fffffe8 	.word	0x7fffffe8

08001494 <LL_ADC_REG_StartConversion>:
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <LL_ADC_REG_StartConversion+0x20>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	2204      	movs	r2, #4
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	7fffffe8 	.word	0x7fffffe8

080014b8 <LL_ADC_REG_ReadConversionData12>:
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	b29b      	uxth	r3, r3
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}

080014ce <LL_ADC_IsActiveFlag_EOC>:
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	3b04      	subs	r3, #4
 80014e0:	425a      	negs	r2, r3
 80014e2:	4153      	adcs	r3, r2
 80014e4:	b2db      	uxtb	r3, r3
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <LL_RCC_HSI_Enable>:
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <LL_RCC_HSI_Enable+0x18>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <LL_RCC_HSI_Enable+0x18>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000

0800150c <LL_RCC_HSI_IsReady>:
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LL_RCC_HSI_IsReady+0x1c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
 8001518:	2b04      	cmp	r3, #4
 800151a:	d101      	bne.n	8001520 <LL_RCC_HSI_IsReady+0x14>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_RCC_HSI_IsReady+0x16>
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <LL_RCC_HSI_SetCalibTrimming>:
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800153a:	4013      	ands	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	021a      	lsls	r2, r3, #8
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	ffffe0ff 	.word	0xffffe0ff

08001558 <LL_RCC_SetSysClkSource>:
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <LL_RCC_SetSysClkSource+0x24>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2203      	movs	r2, #3
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <LL_RCC_SetSysClkSource+0x24>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40021000 	.word	0x40021000

08001580 <LL_RCC_GetSysClkSource>:
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <LL_RCC_GetSysClkSource+0x14>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000

08001598 <LL_RCC_SetAHBPrescaler>:
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <LL_RCC_SetAHBPrescaler+0x24>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	22f0      	movs	r2, #240	; 0xf0
 80015a6:	4393      	bics	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_RCC_SetAHBPrescaler+0x24>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	60da      	str	r2, [r3, #12]
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_RCC_SetAPB1Prescaler>:
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40021000 	.word	0x40021000
 80015e8:	fffff8ff 	.word	0xfffff8ff

080015ec <LL_RCC_SetAPB2Prescaler>:
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <LL_RCC_SetAPB2Prescaler+0x28>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	430a      	orrs	r2, r1
 8001604:	60da      	str	r2, [r3, #12]
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	ffffc7ff 	.word	0xffffc7ff

08001618 <LL_RCC_SetUSARTClockSource>:
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	0c12      	lsrs	r2, r2, #16
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	0c1a      	lsrs	r2, r3, #16
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001636:	430a      	orrs	r2, r1
 8001638:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000

08001648 <LL_APB1_GRP1_EnableClock>:
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <LL_APB1_GRP1_EnableClock+0x28>)
 8001652:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <LL_APB1_GRP1_EnableClock+0x28>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	430a      	orrs	r2, r1
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <LL_APB1_GRP1_EnableClock+0x28>)
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <LL_APB2_GRP1_EnableClock>:
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <LL_APB2_GRP1_EnableClock+0x28>)
 800167e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <LL_APB2_GRP1_EnableClock+0x28>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <LL_APB2_GRP1_EnableClock+0x28>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <LL_FLASH_SetLatency+0x24>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <LL_FLASH_SetLatency+0x24>)
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40022000 	.word	0x40022000

080016c8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <LL_FLASH_GetLatency+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40022000 	.word	0x40022000

080016e0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <LL_SYSTICK_EnableIT+0x18>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <LL_SYSTICK_EnableIT+0x18>)
 80016ea:	2102      	movs	r1, #2
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	e000e010 	.word	0xe000e010

080016fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800170a:	4013      	ands	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	40007000 	.word	0x40007000
 8001724:	ffffe7ff 	.word	0xffffe7ff

08001728 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	4013      	ands	r3, r2
 8001738:	2b80      	cmp	r3, #128	; 0x80
 800173a:	d101      	bne.n	8001740 <LL_USART_IsActiveFlag_TXE+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001752:	f3ef 8310 	mrs	r3, PRIMASK
 8001756:	60bb      	str	r3, [r7, #8]
  return(result);
 8001758:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	2301      	movs	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f383 8810 	msr	PRIMASK, r3
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2220      	movs	r2, #32
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f383 8810 	msr	PRIMASK, r3
}
 800177e:	46c0      	nop			; (mov r8, r8)
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b006      	add	sp, #24
 8001786:	bd80      	pop	{r7, pc}

08001788 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	000a      	movs	r2, r1
 8001792:	1cfb      	adds	r3, r7, #3
 8001794:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001796:	1cfb      	adds	r3, r7, #3
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <LL_GPIO_IsInputPinSet>:
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	425a      	negs	r2, r3
 80017be:	4153      	adcs	r3, r2
 80017c0:	b2db      	uxtb	r3, r3
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}

080017ca <LL_GPIO_SetOutputPin>:
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LL_GPIO_ResetOutputPin>:
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <system_is_disabled>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint8_t system_is_disabled() {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) {
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <system_is_disabled+0x44>)
 8001802:	2104      	movs	r1, #4
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ffce 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d10a      	bne.n	8001824 <system_is_disabled+0x28>
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <system_is_disabled+0x44>)
 8001814:	0019      	movs	r1, r3
 8001816:	0010      	movs	r0, r2
 8001818:	f7ff ffc5 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d101      	bne.n	8001824 <system_is_disabled+0x28>
		return 1;
 8001820:	2301      	movs	r3, #1
 8001822:	e009      	b.n	8001838 <system_is_disabled+0x3c>
	} else if (LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2)) {
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <system_is_disabled+0x44>)
 8001826:	2104      	movs	r1, #4
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff ffbc 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <system_is_disabled+0x3a>
		return 1;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <system_is_disabled+0x3c>
	} else {
		return 0;
 8001836:	2300      	movs	r3, #0
	}
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	50000800 	.word	0x50000800

08001844 <reset_measure>:

void reset_measure() { // reset measure
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	first_brightness_mesure = 0;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <reset_measure+0x1c>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
	first_humidity_mesure = 0;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <reset_measure+0x20>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	first_pressure_mesure = 0;
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <reset_measure+0x24>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000086 	.word	0x20000086
 8001864:	2000008e 	.word	0x2000008e
 8001868:	2000008a 	.word	0x2000008a

0800186c <enable_system>:

void enable_system() { // enable system
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	reset_measure();
 8001872:	f7ff ffe7 	bl	8001844 <reset_measure>
	// check if led are active or not
	if ((!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) || LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2)) {
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <enable_system+0xa0>)
 8001878:	2104      	movs	r1, #4
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff ff93 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d108      	bne.n	8001896 <enable_system+0x2a>
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <enable_system+0xa0>)
 800188a:	0019      	movs	r1, r3
 800188c:	0010      	movs	r0, r2
 800188e:	f7ff ff8a 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d006      	beq.n	80018a4 <enable_system+0x38>
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <enable_system+0xa0>)
 8001898:	2104      	movs	r1, #4
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff83 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d029      	beq.n	80018f8 <enable_system+0x8c>
		printf("Système armé\r\n"); //print system enabling
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <enable_system+0xa4>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fe18 	bl	80024dc <puts>
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <enable_system+0xa0>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff ff96 	bl	80017e2 <LL_GPIO_ResetOutputPin>
			LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_8);
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <enable_system+0xa0>)
 80018bc:	0019      	movs	r1, r3
 80018be:	0010      	movs	r0, r2
 80018c0:	f7ff ff83 	bl	80017ca <LL_GPIO_SetOutputPin>
			// enable alarm (3 bip)
			for (int i=0; i<3; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	e012      	b.n	80018f0 <enable_system+0x84>
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <enable_system+0xa0>)
 80018cc:	2101      	movs	r1, #1
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff ff7b 	bl	80017ca <LL_GPIO_SetOutputPin>
				LL_mDelay(200); // 500ms delay
 80018d4:	20c8      	movs	r0, #200	; 0xc8
 80018d6:	f7ff fa51 	bl	8000d7c <LL_mDelay>
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <enable_system+0xa0>)
 80018dc:	2101      	movs	r1, #1
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff ff7f 	bl	80017e2 <LL_GPIO_ResetOutputPin>
				LL_mDelay(200); // 500ms delay
 80018e4:	20c8      	movs	r0, #200	; 0xc8
 80018e6:	f7ff fa49 	bl	8000d7c <LL_mDelay>
			for (int i=0; i<3; i++) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3301      	adds	r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	dde9      	ble.n	80018ca <enable_system+0x5e>
 80018f6:	e004      	b.n	8001902 <enable_system+0x96>
			}
	} else {
		printf("Votre système est déjà armé\r\n");
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <enable_system+0xa8>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fdee 	bl	80024dc <puts>
	}

}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	50000800 	.word	0x50000800
 8001910:	08003490 	.word	0x08003490
 8001914:	080034a0 	.word	0x080034a0

08001918 <disable_system>:

void disable_system() { // disable system
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	if ((!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) || LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) {
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <disable_system+0xa0>)
 8001920:	2104      	movs	r1, #4
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff ff3f 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d108      	bne.n	800193e <disable_system+0x26>
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <disable_system+0xa0>)
 8001932:	0019      	movs	r1, r3
 8001934:	0010      	movs	r0, r2
 8001936:	f7ff ff36 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d008      	beq.n	8001950 <disable_system+0x38>
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <disable_system+0xa0>)
 8001944:	0019      	movs	r1, r3
 8001946:	0010      	movs	r0, r2
 8001948:	f7ff ff2d 	bl	80017a6 <LL_GPIO_IsInputPinSet>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d029      	beq.n	80019a4 <disable_system+0x8c>
		printf("Désactivation du système\r\n"); //print system disabling
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <disable_system+0xa4>)
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fdc2 	bl	80024dc <puts>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <disable_system+0xa0>)
 800195a:	2104      	movs	r1, #4
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff ff34 	bl	80017ca <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <disable_system+0xa0>)
 8001968:	0019      	movs	r1, r3
 800196a:	0010      	movs	r0, r2
 800196c:	f7ff ff39 	bl	80017e2 <LL_GPIO_ResetOutputPin>
		// disable alarm (2 bip)
		for (int i=0; i<2; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	e012      	b.n	800199c <disable_system+0x84>
			LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <disable_system+0xa0>)
 8001978:	2101      	movs	r1, #1
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff ff25 	bl	80017ca <LL_GPIO_SetOutputPin>
			LL_mDelay(200); // 500ms delay
 8001980:	20c8      	movs	r0, #200	; 0xc8
 8001982:	f7ff f9fb 	bl	8000d7c <LL_mDelay>
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <disable_system+0xa0>)
 8001988:	2101      	movs	r1, #1
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff ff29 	bl	80017e2 <LL_GPIO_ResetOutputPin>
			LL_mDelay(200); // 500ms delay
 8001990:	20c8      	movs	r0, #200	; 0xc8
 8001992:	f7ff f9f3 	bl	8000d7c <LL_mDelay>
		for (int i=0; i<2; i++) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	dde9      	ble.n	8001976 <disable_system+0x5e>
 80019a2:	e004      	b.n	80019ae <disable_system+0x96>
		}
	} else {
		printf("Votre système est déjà désarmé\r\n");
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <disable_system+0xa8>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fd98 	bl	80024dc <puts>
	}
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	50000800 	.word	0x50000800
 80019bc:	080034c4 	.word	0x080034c4
 80019c0:	080034e0 	.word	0x080034e0

080019c4 <launch_alert>:

void launch_alert() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	// start alarm
	while (1) {
		printf("ALERTE!! Système compromis\r\n");
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <launch_alert+0x54>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 fd86 	bl	80024dc <puts>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <launch_alert+0x58>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff fef8 	bl	80017ca <LL_GPIO_SetOutputPin>
		LL_mDelay(200); // 500ms delay
 80019da:	20c8      	movs	r0, #200	; 0xc8
 80019dc:	f7ff f9ce 	bl	8000d7c <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <launch_alert+0x58>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fefc 	bl	80017e2 <LL_GPIO_ResetOutputPin>
		LL_mDelay(200); // 500ms delay
 80019ea:	20c8      	movs	r0, #200	; 0xc8
 80019ec:	f7ff f9c6 	bl	8000d7c <LL_mDelay>
		if (kbhit()) {
 80019f0:	f000 fa72 	bl	8001ed8 <kbhit>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d0e7      	beq.n	80019c8 <launch_alert+0x4>
			// stop alarm
			if (getch() == 's') {
 80019f8:	f000 fa4e 	bl	8001e98 <getch>
 80019fc:	0003      	movs	r3, r0
 80019fe:	2b73      	cmp	r3, #115	; 0x73
 8001a00:	d1e2      	bne.n	80019c8 <launch_alert+0x4>
				printf("Alerte désactivée\r\n");
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <launch_alert+0x5c>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fd69 	bl	80024dc <puts>
				disable_system();
 8001a0a:	f7ff ff85 	bl	8001918 <disable_system>
				break;
 8001a0e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	08003508 	.word	0x08003508
 8001a1c:	50000800 	.word	0x50000800
 8001a20:	08003528 	.word	0x08003528

08001a24 <check_values>:

void check_values(uint16_t ref, uint16_t current_value, uint16_t threshold) {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	0004      	movs	r4, r0
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	0011      	movs	r1, r2
 8001a30:	1dbb      	adds	r3, r7, #6
 8001a32:	1c22      	adds	r2, r4, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	1c02      	adds	r2, r0, #0
 8001a3a:	801a      	strh	r2, [r3, #0]
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	1c0a      	adds	r2, r1, #0
 8001a40:	801a      	strh	r2, [r3, #0]
	// compare values with references
	uint16_t check = ref - current_value;
 8001a42:	200e      	movs	r0, #14
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	1db9      	adds	r1, r7, #6
 8001a48:	1d3a      	adds	r2, r7, #4
 8001a4a:	8809      	ldrh	r1, [r1, #0]
 8001a4c:	8812      	ldrh	r2, [r2, #0]
 8001a4e:	1a8a      	subs	r2, r1, r2
 8001a50:	801a      	strh	r2, [r3, #0]
	if (check == threshold) {
 8001a52:	183a      	adds	r2, r7, r0
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d101      	bne.n	8001a62 <check_values+0x3e>
	  launch_alert();
 8001a5e:	f7ff ffb1 	bl	80019c4 <launch_alert>
	}
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}
	...

08001a6c <check_brightness>:

void check_brightness(uint16_t threshold) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	0002      	movs	r2, r0
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	801a      	strh	r2, [r3, #0]
	// check brightness level
	if (system_is_disabled() == 0) {
 8001a78:	f7ff fec0 	bl	80017fc <system_is_disabled>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d130      	bne.n	8001ae2 <check_brightness+0x76>
		// launch conversion
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_11);
 8001a80:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <check_brightness+0x80>)
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <check_brightness+0x84>)
 8001a84:	0011      	movs	r1, r2
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fce4 	bl	8001454 <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <check_brightness+0x84>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fd00 	bl	8001494 <LL_ADC_REG_StartConversion>
		// wait
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <check_brightness+0x84>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fd18 	bl	80014ce <LL_ADC_IsActiveFlag_EOC>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d0f9      	beq.n	8001a96 <check_brightness+0x2a>
		int t = LL_ADC_REG_ReadConversionData12(ADC1);
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <check_brightness+0x84>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff fd07 	bl	80014b8 <LL_ADC_REG_ReadConversionData12>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	60fb      	str	r3, [r7, #12]
		if (first_brightness_mesure == 0) {
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <check_brightness+0x88>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <check_brightness+0x58>
		  brightness_ref = t;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <check_brightness+0x8c>)
 8001abc:	801a      	strh	r2, [r3, #0]
		  first_brightness_mesure = 1;
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <check_brightness+0x88>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
		}
		// compare values
		check_values(brightness_ref, t, threshold);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <check_brightness+0x8c>)
 8001ac6:	8818      	ldrh	r0, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	b299      	uxth	r1, r3
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	f7ff ffa7 	bl	8001a24 <check_values>
		printf("Brightness:%i\r\n\n", t);
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <check_brightness+0x90>)
 8001ada:	0011      	movs	r1, r2
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 fc71 	bl	80023c4 <iprintf>
	}
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	2c000800 	.word	0x2c000800
 8001af0:	40012400 	.word	0x40012400
 8001af4:	20000086 	.word	0x20000086
 8001af8:	20000084 	.word	0x20000084
 8001afc:	08003540 	.word	0x08003540

08001b00 <check_pressure>:

void check_pressure(uint16_t threshold) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	801a      	strh	r2, [r3, #0]
	// check pressure level
	if (system_is_disabled() == 0) {
 8001b0c:	f7ff fe76 	bl	80017fc <system_is_disabled>
 8001b10:	1e03      	subs	r3, r0, #0
 8001b12:	d130      	bne.n	8001b76 <check_pressure+0x76>
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_13);
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <check_pressure+0x80>)
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <check_pressure+0x84>)
 8001b18:	0011      	movs	r1, r2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff fc9a 	bl	8001454 <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <check_pressure+0x84>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff fcb6 	bl	8001494 <LL_ADC_REG_StartConversion>
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <check_pressure+0x84>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fcce 	bl	80014ce <LL_ADC_IsActiveFlag_EOC>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d0f9      	beq.n	8001b2a <check_pressure+0x2a>
		int p = LL_ADC_REG_ReadConversionData12(ADC1);
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <check_pressure+0x84>)
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fcbd 	bl	80014b8 <LL_ADC_REG_ReadConversionData12>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]
		if (first_pressure_mesure == 0) {
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <check_pressure+0x88>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <check_pressure+0x58>
		  pressure_ref = p;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <check_pressure+0x8c>)
 8001b50:	801a      	strh	r2, [r3, #0]
		  first_pressure_mesure = 1;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <check_pressure+0x88>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
		}
		check_values(pressure_ref, p, threshold);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <check_pressure+0x8c>)
 8001b5a:	8818      	ldrh	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <check_values>
		printf("Pressure:%i\r\n\n", p);
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <check_pressure+0x90>)
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fc27 	bl	80023c4 <iprintf>
	}
}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	34002000 	.word	0x34002000
 8001b84:	40012400 	.word	0x40012400
 8001b88:	2000008a 	.word	0x2000008a
 8001b8c:	20000088 	.word	0x20000088
 8001b90:	08003554 	.word	0x08003554

08001b94 <check_humidity>:

void check_humidity(uint16_t threshold) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	1dbb      	adds	r3, r7, #6
 8001b9e:	801a      	strh	r2, [r3, #0]
	// check humidity level
	if (system_is_disabled() == 0) {
 8001ba0:	f7ff fe2c 	bl	80017fc <system_is_disabled>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d130      	bne.n	8001c0a <check_humidity+0x76>
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_15);
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <check_humidity+0x80>)
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <check_humidity+0x84>)
 8001bac:	0011      	movs	r1, r2
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7ff fc50 	bl	8001454 <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <check_humidity+0x84>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fc6c 	bl	8001494 <LL_ADC_REG_StartConversion>
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <check_humidity+0x84>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fc84 	bl	80014ce <LL_ADC_IsActiveFlag_EOC>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d0f9      	beq.n	8001bbe <check_humidity+0x2a>
		int h = LL_ADC_REG_ReadConversionData12(ADC1);
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <check_humidity+0x84>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff fc73 	bl	80014b8 <LL_ADC_REG_ReadConversionData12>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	60fb      	str	r3, [r7, #12]
		if (first_humidity_mesure == 0) {
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <check_humidity+0x88>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <check_humidity+0x58>
		  humidity_ref = h;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <check_humidity+0x8c>)
 8001be4:	801a      	strh	r2, [r3, #0]
		  first_humidity_mesure = 1;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <check_humidity+0x88>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
		}
		check_values(humidity_ref, h, threshold);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <check_humidity+0x8c>)
 8001bee:	8818      	ldrh	r0, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	f7ff ff13 	bl	8001a24 <check_values>
		printf("Humidity:%i\r\n\n", h);
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <check_humidity+0x90>)
 8001c02:	0011      	movs	r1, r2
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 fbdd 	bl	80023c4 <iprintf>
	}
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	3c008000 	.word	0x3c008000
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	2000008e 	.word	0x2000008e
 8001c20:	2000008c 	.word	0x2000008c
 8001c24:	08003564 	.word	0x08003564

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff fd21 	bl	8001674 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	055b      	lsls	r3, r3, #21
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff fd06 	bl	8001648 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f85a 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f7ff fb3e 	bl	80012c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c44:	f000 fae4 	bl	8002210 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001c48:	f7ff f9ba 	bl	8000fc0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  getchInit();
 8001c4c:	f000 f91a 	bl	8001e84 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <main+0xb4>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff fd79 	bl	800174a <LL_USART_EnableIT_RXNE>
  printf("Ready !!!!\r\n"); //print it
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <main+0xb8>)
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 fc3e 	bl	80024dc <puts>

  LL_ADC_Enable(ADC1);
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <main+0xbc>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff fc04 	bl	8001470 <LL_ADC_Enable>
  LL_SYSTICK_EnableIT();
 8001c68:	f7ff fd3a 	bl	80016e0 <LL_SYSTICK_EnableIT>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <main+0xc0>)
 8001c72:	0019      	movs	r1, r3
 8001c74:	0010      	movs	r0, r2
 8001c76:	f7ff fbd9 	bl	800142c <LL_ADC_SetCommonPathInternalCh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (tick_1000ms_elapsed == 1) {
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <main+0xc4>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2a01      	cmp	r2, #1
 8001c82:	d112      	bne.n	8001caa <main+0x82>
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d110      	bne.n	8001caa <main+0x82>
		// each seconds
		check_humidity(5000);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <main+0xc8>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff ff82 	bl	8001b94 <check_humidity>
		check_brightness(5000);
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <main+0xc8>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff feea 	bl	8001a6c <check_brightness>
		check_pressure(5000);
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <main+0xc8>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff30 	bl	8001b00 <check_pressure>
		// reset tick
		tick_1000ms_elapsed = 0;
 8001ca0:	4912      	ldr	r1, [pc, #72]	; (8001cec <main+0xc4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	600a      	str	r2, [r1, #0]
 8001ca8:	604b      	str	r3, [r1, #4]
	}
	if (kbhit()) //if one char received on USART2
 8001caa:	f000 f915 	bl	8001ed8 <kbhit>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d012      	beq.n	8001cd8 <main+0xb0>
	{
	  switch(getch()) {
 8001cb2:	f000 f8f1 	bl	8001e98 <getch>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	2b61      	cmp	r3, #97	; 0x61
 8001cba:	d00a      	beq.n	8001cd2 <main+0xaa>
 8001cbc:	dcdd      	bgt.n	8001c7a <main+0x52>
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d004      	beq.n	8001ccc <main+0xa4>
 8001cc2:	2b31      	cmp	r3, #49	; 0x31
 8001cc4:	d1d9      	bne.n	8001c7a <main+0x52>
	  case '1': // enable
		  enable_system();
 8001cc6:	f7ff fdd1 	bl	800186c <enable_system>
		  break;
 8001cca:	e006      	b.n	8001cda <main+0xb2>
	  case '0': // disable
		  disable_system();
 8001ccc:	f7ff fe24 	bl	8001918 <disable_system>
		  break;
 8001cd0:	e003      	b.n	8001cda <main+0xb2>
	  case 'a': // launch alert
		  launch_alert();
 8001cd2:	f7ff fe77 	bl	80019c4 <launch_alert>
		  break;
 8001cd6:	e000      	b.n	8001cda <main+0xb2>
	  }
	}
 8001cd8:	46c0      	nop			; (mov r8, r8)
	if (tick_1000ms_elapsed == 1) {
 8001cda:	e7ce      	b.n	8001c7a <main+0x52>
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	08003574 	.word	0x08003574
 8001ce4:	40012400 	.word	0x40012400
 8001ce8:	40012708 	.word	0x40012708
 8001cec:	20000090 	.word	0x20000090
 8001cf0:	00001388 	.word	0x00001388

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fcd1 	bl	80016a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	f7ff fce2 	bl	80016c8 <LL_FLASH_GetLatency>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d1fb      	bne.n	8001d00 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff fcf5 	bl	80016fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001d12:	f7ff fbed 	bl	80014f0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	f7ff fbf8 	bl	800150c <LL_RCC_HSI_IsReady>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d1fa      	bne.n	8001d18 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001d22:	2010      	movs	r0, #16
 8001d24:	f7ff fc02 	bl	800152c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fc35 	bl	8001598 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fc46 	bl	80015c0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fc59 	bl	80015ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fc0c 	bl	8001558 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	f7ff fc1d 	bl	8001580 <LL_RCC_GetSysClkSource>
 8001d46:	0003      	movs	r3, r0
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d1fa      	bne.n	8001d42 <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <SystemClock_Config+0x78>)
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff f804 	bl	8000d5c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SystemClock_Config+0x78>)
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7ff f832 	bl	8000dc0 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	031b      	lsls	r3, r3, #12
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fc59 	bl	8001618 <LL_RCC_SetUSARTClockSource>
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	00f42400 	.word	0x00f42400

08001d70 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char * ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len;i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e013      	b.n	8001daa <_write+0x3a>
  {
    while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <_write+0x4c>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fcce 	bl	8001728 <LL_USART_IsActiveFlag_TXE>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d0f9      	beq.n	8001d84 <_write+0x14>
    LL_USART_TransmitData8(USART2,*ptr);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <_write+0x4c>)
 8001d96:	0019      	movs	r1, r3
 8001d98:	0010      	movs	r0, r2
 8001d9a:	f7ff fcf5 	bl	8001788 <LL_USART_TransmitData8>
    ptr++;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
  for (int i=0; i<len;i++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbe7      	blt.n	8001d82 <_write+0x12>
  }
return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b006      	add	sp, #24
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <LL_USART_IsActiveFlag_RXNE>:
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d101      	bne.n	8001dd8 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LL_USART_ReceiveData8>:
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	// each ms
	ms_ticks++;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <SysTick_Handler+0x30>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <SysTick_Handler+0x30>)
 8001e28:	601a      	str	r2, [r3, #0]

	// each second
	if (ms_ticks % 1000 == 0) {
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <SysTick_Handler+0x30>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	22fa      	movs	r2, #250	; 0xfa
 8001e30:	0091      	lsls	r1, r2, #2
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe f9f8 	bl	8000228 <__aeabi_uidivmod>
 8001e38:	1e0b      	subs	r3, r1, #0
 8001e3a:	d104      	bne.n	8001e46 <SysTick_Handler+0x2a>
		tick_1000ms_elapsed = 1;
 8001e3c:	4904      	ldr	r1, [pc, #16]	; (8001e50 <SysTick_Handler+0x34>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2300      	movs	r3, #0
 8001e42:	600a      	str	r2, [r1, #0]
 8001e44:	604b      	str	r3, [r1, #4]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000009c 	.word	0x2000009c
 8001e50:	20000090 	.word	0x20000090

08001e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <USART2_IRQHandler+0x28>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7ff ffb0 	bl	8001dc0 <LL_USART_IsActiveFlag_RXNE>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d007      	beq.n	8001e74 <USART2_IRQHandler+0x20>
  {
    g_rxCarUSART2=LL_USART_ReceiveData8(USART2);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <USART2_IRQHandler+0x28>)
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff ffbb 	bl	8001de2 <LL_USART_ReceiveData8>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <USART2_IRQHandler+0x2c>)
 8001e72:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	20000098 	.word	0x20000098

08001e84 <getchInit>:

/* USER CODE BEGIN 1 */
void getchInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	g_rxCarUSART2=255; //no char received
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <getchInit+0x10>)
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	701a      	strb	r2, [r3, #0]
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000098 	.word	0x20000098

08001e98 <getch>:

//Return  a char received on UART2
// Wait if none received yet
uint8_t getch(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  volatile uint8_t l_car=1;
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
  do
  {
	if (g_rxCarUSART2==255)
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <getch+0x3c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d100      	bne.n	8001eae <getch+0x16>
	{
	  __WFI(); //wait for interrupt (for a key ==> data RX)
 8001eac:	bf30      	wfi
	}
  }
  while(g_rxCarUSART2==255); //while no char received
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <getch+0x3c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d0f6      	beq.n	8001ea4 <getch+0xc>

  l_car=g_rxCarUSART2; //save received data
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <getch+0x3c>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
  g_rxCarUSART2=255; //clear char received
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <getch+0x3c>)
 8001ec0:	22ff      	movs	r2, #255	; 0xff
 8001ec2:	701a      	strb	r2, [r3, #0]
  return l_car; //return received data
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000098 	.word	0x20000098

08001ed8 <kbhit>:
//Return 1 if a char received on UART2
// else 0
int kbhit(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
 if(g_rxCarUSART2==255)
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <kbhit+0x18>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2bff      	cmp	r3, #255	; 0xff
 8001ee2:	d101      	bne.n	8001ee8 <kbhit+0x10>
   return 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <kbhit+0x12>
 else
   return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000098 	.word	0x20000098

08001ef4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f06:	e000      	b.n	8001f0a <_read+0x16>
 8001f08:	bf00      	nop
 8001f0a:	0001      	movs	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
	}

return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b006      	add	sp, #24
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return -1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	425b      	negs	r3, r3
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	0192      	lsls	r2, r2, #6
 8001f52:	605a      	str	r2, [r3, #4]
	return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x50>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x16>
		heap_end = &end;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <_sbrk+0x50>)
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <_sbrk+0x54>)
 8001f9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <_sbrk+0x50>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <_sbrk+0x50>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	18d2      	adds	r2, r2, r3
 8001fac:	466b      	mov	r3, sp
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d907      	bls.n	8001fc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fb2:	f000 f9d5 	bl	8002360 <__errno>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	220c      	movs	r2, #12
 8001fba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	e006      	b.n	8001fd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <_sbrk+0x50>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	18d2      	adds	r2, r2, r3
 8001fca:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <_sbrk+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200000a0 	.word	0x200000a0
 8001fdc:	200000b8 	.word	0x200000b8

08001fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <SystemInit+0x64>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <SystemInit+0x64>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	0049      	lsls	r1, r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <SystemInit+0x64>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <SystemInit+0x64>)
 8001ff8:	4913      	ldr	r1, [pc, #76]	; (8002048 <SystemInit+0x68>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <SystemInit+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <SystemInit+0x64>)
 8002004:	4911      	ldr	r1, [pc, #68]	; (800204c <SystemInit+0x6c>)
 8002006:	400a      	ands	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <SystemInit+0x64>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <SystemInit+0x64>)
 8002010:	2101      	movs	r1, #1
 8002012:	438a      	bics	r2, r1
 8002014:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <SystemInit+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <SystemInit+0x64>)
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <SystemInit+0x70>)
 800201e:	400a      	ands	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <SystemInit+0x64>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <SystemInit+0x64>)
 8002028:	490a      	ldr	r1, [pc, #40]	; (8002054 <SystemInit+0x74>)
 800202a:	400a      	ands	r2, r1
 800202c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SystemInit+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <SystemInit+0x78>)
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	0512      	lsls	r2, r2, #20
 800203a:	609a      	str	r2, [r3, #8]
#endif
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	88ff400c 	.word	0x88ff400c
 800204c:	fef6fff6 	.word	0xfef6fff6
 8002050:	fffbffff 	.word	0xfffbffff
 8002054:	ff02ffff 	.word	0xff02ffff
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b7f      	cmp	r3, #127	; 0x7f
 800206e:	d809      	bhi.n	8002084 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	001a      	movs	r2, r3
 8002076:	231f      	movs	r3, #31
 8002078:	401a      	ands	r2, r3
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_EnableIRQ+0x30>)
 800207c:	2101      	movs	r1, #1
 800207e:	4091      	lsls	r1, r2
 8002080:	000a      	movs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
  }
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	0002      	movs	r2, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b7f      	cmp	r3, #127	; 0x7f
 80020a4:	d828      	bhi.n	80020f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <__NVIC_SetPriority+0xd4>)
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	33c0      	adds	r3, #192	; 0xc0
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	589b      	ldr	r3, [r3, r2]
 80020b6:	1dfa      	adds	r2, r7, #7
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	0011      	movs	r1, r2
 80020bc:	2203      	movs	r2, #3
 80020be:	400a      	ands	r2, r1
 80020c0:	00d2      	lsls	r2, r2, #3
 80020c2:	21ff      	movs	r1, #255	; 0xff
 80020c4:	4091      	lsls	r1, r2
 80020c6:	000a      	movs	r2, r1
 80020c8:	43d2      	mvns	r2, r2
 80020ca:	401a      	ands	r2, r3
 80020cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	019b      	lsls	r3, r3, #6
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	401a      	ands	r2, r3
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0018      	movs	r0, r3
 80020dc:	2303      	movs	r3, #3
 80020de:	4003      	ands	r3, r0
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e4:	481f      	ldr	r0, [pc, #124]	; (8002164 <__NVIC_SetPriority+0xd4>)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b25b      	sxtb	r3, r3
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	430a      	orrs	r2, r1
 80020f0:	33c0      	adds	r3, #192	; 0xc0
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020f6:	e031      	b.n	800215c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f8:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <__NVIC_SetPriority+0xd8>)
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	0019      	movs	r1, r3
 8002100:	230f      	movs	r3, #15
 8002102:	400b      	ands	r3, r1
 8002104:	3b08      	subs	r3, #8
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3306      	adds	r3, #6
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	3304      	adds	r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1dfa      	adds	r2, r7, #7
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	0011      	movs	r1, r2
 8002118:	2203      	movs	r2, #3
 800211a:	400a      	ands	r2, r1
 800211c:	00d2      	lsls	r2, r2, #3
 800211e:	21ff      	movs	r1, #255	; 0xff
 8002120:	4091      	lsls	r1, r2
 8002122:	000a      	movs	r2, r1
 8002124:	43d2      	mvns	r2, r2
 8002126:	401a      	ands	r2, r3
 8002128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	401a      	ands	r2, r3
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	2303      	movs	r3, #3
 800213a:	4003      	ands	r3, r0
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <__NVIC_SetPriority+0xd8>)
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	001c      	movs	r4, r3
 8002148:	230f      	movs	r3, #15
 800214a:	4023      	ands	r3, r4
 800214c:	3b08      	subs	r3, #8
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	430a      	orrs	r2, r1
 8002152:	3306      	adds	r3, #6
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	18c3      	adds	r3, r0, r3
 8002158:	3304      	adds	r3, #4
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b003      	add	sp, #12
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <LL_APB1_GRP1_EnableClock>:
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <LL_APB1_GRP1_EnableClock+0x28>)
 8002176:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <LL_APB1_GRP1_EnableClock+0x28>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	430a      	orrs	r2, r1
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <LL_APB1_GRP1_EnableClock+0x28>)
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <LL_IOP_GRP1_EnableClock>:
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80021a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000

080021c4 <LL_USART_Enable>:
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <LL_USART_ConfigAsyncMode>:
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <LL_USART_ConfigAsyncMode+0x2c>)
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	222a      	movs	r2, #42	; 0x2a
 80021fa:	4393      	bics	r3, r2
 80021fc:	001a      	movs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	609a      	str	r2, [r3, #8]
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	ffffb7ff 	.word	0xffffb7ff

08002210 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08f      	sub	sp, #60	; 0x3c
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002216:	241c      	movs	r4, #28
 8002218:	193b      	adds	r3, r7, r4
 800221a:	0018      	movs	r0, r3
 800221c:	231c      	movs	r3, #28
 800221e:	001a      	movs	r2, r3
 8002220:	2100      	movs	r1, #0
 8002222:	f000 f8c7 	bl	80023b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	0018      	movs	r0, r3
 800222a:	2318      	movs	r3, #24
 800222c:	001a      	movs	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	f000 f8c0 	bl	80023b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff97 	bl	800216c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff ffaa 	bl	8002198 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2204      	movs	r2, #4
 8002248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2202      	movs	r2, #2
 800224e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2203      	movs	r2, #3
 8002254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2204      	movs	r2, #4
 8002266:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002268:	1d3a      	adds	r2, r7, #4
 800226a:	23a0      	movs	r3, #160	; 0xa0
 800226c:	05db      	lsls	r3, r3, #23
 800226e:	0011      	movs	r1, r2
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe fa21 	bl	80006b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2208      	movs	r2, #8
 800227a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2202      	movs	r2, #2
 8002280:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2203      	movs	r2, #3
 8002286:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2204      	movs	r2, #4
 8002298:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800229a:	1d3a      	adds	r2, r7, #4
 800229c:	23a0      	movs	r3, #160	; 0xa0
 800229e:	05db      	lsls	r3, r3, #23
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fa08 	bl	80006b8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80022a8:	2100      	movs	r1, #0
 80022aa:	201c      	movs	r0, #28
 80022ac:	f7ff fef0 	bl	8002090 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80022b0:	201c      	movs	r0, #28
 80022b2:	f7ff fed3 	bl	800205c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	22e1      	movs	r2, #225	; 0xe1
 80022ba:	0252      	lsls	r2, r2, #9
 80022bc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80022be:	0021      	movs	r1, r4
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	220c      	movs	r2, #12
 80022d6:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <MX_USART2_UART_Init+0xf8>)
 80022e8:	0019      	movs	r1, r3
 80022ea:	0010      	movs	r0, r2
 80022ec:	f7fe fcb8 	bl	8000c60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <MX_USART2_UART_Init+0xf8>)
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff ff74 	bl	80021e0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <MX_USART2_UART_Init+0xf8>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff ff62 	bl	80021c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b00f      	add	sp, #60	; 0x3c
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	40004400 	.word	0x40004400

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopForever+0x6>)
  ldr r1, =_edata
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <LoopForever+0xe>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002328:	4c0b      	ldr	r4, [pc, #44]	; (8002358 <LoopForever+0x16>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002336:	f7ff fe53 	bl	8001fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f000 f817 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff fc73 	bl	8001c28 <main>

08002342 <LoopForever>:

LoopForever:
    b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   r0, =_estack
 8002344:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002350:	08003644 	.word	0x08003644
  ldr r2, =_sbss
 8002354:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002358:	200000b4 	.word	0x200000b4

0800235c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC1_COMP_IRQHandler>
	...

08002360 <__errno>:
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <__errno+0x8>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	20000004 	.word	0x20000004

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	2600      	movs	r6, #0
 8002370:	4d0c      	ldr	r5, [pc, #48]	; (80023a4 <__libc_init_array+0x38>)
 8002372:	4c0d      	ldr	r4, [pc, #52]	; (80023a8 <__libc_init_array+0x3c>)
 8002374:	1b64      	subs	r4, r4, r5
 8002376:	10a4      	asrs	r4, r4, #2
 8002378:	42a6      	cmp	r6, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	2600      	movs	r6, #0
 800237e:	f001 f875 	bl	800346c <_init>
 8002382:	4d0a      	ldr	r5, [pc, #40]	; (80023ac <__libc_init_array+0x40>)
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <__libc_init_array+0x44>)
 8002386:	1b64      	subs	r4, r4, r5
 8002388:	10a4      	asrs	r4, r4, #2
 800238a:	42a6      	cmp	r6, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	00b3      	lsls	r3, r6, #2
 8002392:	58eb      	ldr	r3, [r5, r3]
 8002394:	4798      	blx	r3
 8002396:	3601      	adds	r6, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	00b3      	lsls	r3, r6, #2
 800239c:	58eb      	ldr	r3, [r5, r3]
 800239e:	4798      	blx	r3
 80023a0:	3601      	adds	r6, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	0800363c 	.word	0x0800363c
 80023a8:	0800363c 	.word	0x0800363c
 80023ac:	0800363c 	.word	0x0800363c
 80023b0:	08003640 	.word	0x08003640

080023b4 <memset>:
 80023b4:	0003      	movs	r3, r0
 80023b6:	1882      	adds	r2, r0, r2
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d100      	bne.n	80023be <memset+0xa>
 80023bc:	4770      	bx	lr
 80023be:	7019      	strb	r1, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	e7f9      	b.n	80023b8 <memset+0x4>

080023c4 <iprintf>:
 80023c4:	b40f      	push	{r0, r1, r2, r3}
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <iprintf+0x30>)
 80023c8:	b513      	push	{r0, r1, r4, lr}
 80023ca:	681c      	ldr	r4, [r3, #0]
 80023cc:	2c00      	cmp	r4, #0
 80023ce:	d005      	beq.n	80023dc <iprintf+0x18>
 80023d0:	69a3      	ldr	r3, [r4, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <iprintf+0x18>
 80023d6:	0020      	movs	r0, r4
 80023d8:	f000 fa86 	bl	80028e8 <__sinit>
 80023dc:	ab05      	add	r3, sp, #20
 80023de:	0020      	movs	r0, r4
 80023e0:	9a04      	ldr	r2, [sp, #16]
 80023e2:	68a1      	ldr	r1, [r4, #8]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f000 fc99 	bl	8002d1c <_vfiprintf_r>
 80023ea:	bc16      	pop	{r1, r2, r4}
 80023ec:	bc08      	pop	{r3}
 80023ee:	b004      	add	sp, #16
 80023f0:	4718      	bx	r3
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000004 	.word	0x20000004

080023f8 <_puts_r>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	0005      	movs	r5, r0
 80023fc:	000e      	movs	r6, r1
 80023fe:	2800      	cmp	r0, #0
 8002400:	d004      	beq.n	800240c <_puts_r+0x14>
 8002402:	6983      	ldr	r3, [r0, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <_puts_r+0x14>
 8002408:	f000 fa6e 	bl	80028e8 <__sinit>
 800240c:	69ab      	ldr	r3, [r5, #24]
 800240e:	68ac      	ldr	r4, [r5, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_puts_r+0x22>
 8002414:	0028      	movs	r0, r5
 8002416:	f000 fa67 	bl	80028e8 <__sinit>
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <_puts_r+0xd8>)
 800241c:	429c      	cmp	r4, r3
 800241e:	d122      	bne.n	8002466 <_puts_r+0x6e>
 8002420:	686c      	ldr	r4, [r5, #4]
 8002422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002424:	07db      	lsls	r3, r3, #31
 8002426:	d405      	bmi.n	8002434 <_puts_r+0x3c>
 8002428:	89a3      	ldrh	r3, [r4, #12]
 800242a:	059b      	lsls	r3, r3, #22
 800242c:	d402      	bmi.n	8002434 <_puts_r+0x3c>
 800242e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002430:	f000 fafb 	bl	8002a2a <__retarget_lock_acquire_recursive>
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	071b      	lsls	r3, r3, #28
 8002438:	d502      	bpl.n	8002440 <_puts_r+0x48>
 800243a:	6923      	ldr	r3, [r4, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d129      	bne.n	8002494 <_puts_r+0x9c>
 8002440:	0021      	movs	r1, r4
 8002442:	0028      	movs	r0, r5
 8002444:	f000 f8aa 	bl	800259c <__swsetup_r>
 8002448:	2800      	cmp	r0, #0
 800244a:	d023      	beq.n	8002494 <_puts_r+0x9c>
 800244c:	2501      	movs	r5, #1
 800244e:	426d      	negs	r5, r5
 8002450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002452:	07db      	lsls	r3, r3, #31
 8002454:	d405      	bmi.n	8002462 <_puts_r+0x6a>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	059b      	lsls	r3, r3, #22
 800245a:	d402      	bmi.n	8002462 <_puts_r+0x6a>
 800245c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800245e:	f000 fae5 	bl	8002a2c <__retarget_lock_release_recursive>
 8002462:	0028      	movs	r0, r5
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <_puts_r+0xdc>)
 8002468:	429c      	cmp	r4, r3
 800246a:	d101      	bne.n	8002470 <_puts_r+0x78>
 800246c:	68ac      	ldr	r4, [r5, #8]
 800246e:	e7d8      	b.n	8002422 <_puts_r+0x2a>
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <_puts_r+0xe0>)
 8002472:	429c      	cmp	r4, r3
 8002474:	d1d5      	bne.n	8002422 <_puts_r+0x2a>
 8002476:	68ec      	ldr	r4, [r5, #12]
 8002478:	e7d3      	b.n	8002422 <_puts_r+0x2a>
 800247a:	3601      	adds	r6, #1
 800247c:	60a3      	str	r3, [r4, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	da04      	bge.n	800248c <_puts_r+0x94>
 8002482:	69a2      	ldr	r2, [r4, #24]
 8002484:	429a      	cmp	r2, r3
 8002486:	dc16      	bgt.n	80024b6 <_puts_r+0xbe>
 8002488:	290a      	cmp	r1, #10
 800248a:	d014      	beq.n	80024b6 <_puts_r+0xbe>
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	6022      	str	r2, [r4, #0]
 8002492:	7019      	strb	r1, [r3, #0]
 8002494:	68a3      	ldr	r3, [r4, #8]
 8002496:	7831      	ldrb	r1, [r6, #0]
 8002498:	3b01      	subs	r3, #1
 800249a:	2900      	cmp	r1, #0
 800249c:	d1ed      	bne.n	800247a <_puts_r+0x82>
 800249e:	60a3      	str	r3, [r4, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0f      	bge.n	80024c4 <_puts_r+0xcc>
 80024a4:	0028      	movs	r0, r5
 80024a6:	0022      	movs	r2, r4
 80024a8:	310a      	adds	r1, #10
 80024aa:	f000 f821 	bl	80024f0 <__swbuf_r>
 80024ae:	250a      	movs	r5, #10
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d1cd      	bne.n	8002450 <_puts_r+0x58>
 80024b4:	e7ca      	b.n	800244c <_puts_r+0x54>
 80024b6:	0022      	movs	r2, r4
 80024b8:	0028      	movs	r0, r5
 80024ba:	f000 f819 	bl	80024f0 <__swbuf_r>
 80024be:	1c43      	adds	r3, r0, #1
 80024c0:	d1e8      	bne.n	8002494 <_puts_r+0x9c>
 80024c2:	e7c3      	b.n	800244c <_puts_r+0x54>
 80024c4:	250a      	movs	r5, #10
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	6022      	str	r2, [r4, #0]
 80024cc:	701d      	strb	r5, [r3, #0]
 80024ce:	e7bf      	b.n	8002450 <_puts_r+0x58>
 80024d0:	080035c8 	.word	0x080035c8
 80024d4:	080035e8 	.word	0x080035e8
 80024d8:	080035a8 	.word	0x080035a8

080024dc <puts>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <puts+0x10>)
 80024e0:	0001      	movs	r1, r0
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f7ff ff88 	bl	80023f8 <_puts_r>
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	20000004 	.word	0x20000004

080024f0 <__swbuf_r>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	0005      	movs	r5, r0
 80024f4:	000e      	movs	r6, r1
 80024f6:	0014      	movs	r4, r2
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d004      	beq.n	8002506 <__swbuf_r+0x16>
 80024fc:	6983      	ldr	r3, [r0, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <__swbuf_r+0x16>
 8002502:	f000 f9f1 	bl	80028e8 <__sinit>
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <__swbuf_r+0xa0>)
 8002508:	429c      	cmp	r4, r3
 800250a:	d12e      	bne.n	800256a <__swbuf_r+0x7a>
 800250c:	686c      	ldr	r4, [r5, #4]
 800250e:	69a3      	ldr	r3, [r4, #24]
 8002510:	60a3      	str	r3, [r4, #8]
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	d532      	bpl.n	800257e <__swbuf_r+0x8e>
 8002518:	6923      	ldr	r3, [r4, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02f      	beq.n	800257e <__swbuf_r+0x8e>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	6922      	ldr	r2, [r4, #16]
 8002522:	b2f7      	uxtb	r7, r6
 8002524:	1a98      	subs	r0, r3, r2
 8002526:	6963      	ldr	r3, [r4, #20]
 8002528:	b2f6      	uxtb	r6, r6
 800252a:	4283      	cmp	r3, r0
 800252c:	dc05      	bgt.n	800253a <__swbuf_r+0x4a>
 800252e:	0021      	movs	r1, r4
 8002530:	0028      	movs	r0, r5
 8002532:	f000 f937 	bl	80027a4 <_fflush_r>
 8002536:	2800      	cmp	r0, #0
 8002538:	d127      	bne.n	800258a <__swbuf_r+0x9a>
 800253a:	68a3      	ldr	r3, [r4, #8]
 800253c:	3001      	adds	r0, #1
 800253e:	3b01      	subs	r3, #1
 8002540:	60a3      	str	r3, [r4, #8]
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	6022      	str	r2, [r4, #0]
 8002548:	701f      	strb	r7, [r3, #0]
 800254a:	6963      	ldr	r3, [r4, #20]
 800254c:	4283      	cmp	r3, r0
 800254e:	d004      	beq.n	800255a <__swbuf_r+0x6a>
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	07db      	lsls	r3, r3, #31
 8002554:	d507      	bpl.n	8002566 <__swbuf_r+0x76>
 8002556:	2e0a      	cmp	r6, #10
 8002558:	d105      	bne.n	8002566 <__swbuf_r+0x76>
 800255a:	0021      	movs	r1, r4
 800255c:	0028      	movs	r0, r5
 800255e:	f000 f921 	bl	80027a4 <_fflush_r>
 8002562:	2800      	cmp	r0, #0
 8002564:	d111      	bne.n	800258a <__swbuf_r+0x9a>
 8002566:	0030      	movs	r0, r6
 8002568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <__swbuf_r+0xa4>)
 800256c:	429c      	cmp	r4, r3
 800256e:	d101      	bne.n	8002574 <__swbuf_r+0x84>
 8002570:	68ac      	ldr	r4, [r5, #8]
 8002572:	e7cc      	b.n	800250e <__swbuf_r+0x1e>
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <__swbuf_r+0xa8>)
 8002576:	429c      	cmp	r4, r3
 8002578:	d1c9      	bne.n	800250e <__swbuf_r+0x1e>
 800257a:	68ec      	ldr	r4, [r5, #12]
 800257c:	e7c7      	b.n	800250e <__swbuf_r+0x1e>
 800257e:	0021      	movs	r1, r4
 8002580:	0028      	movs	r0, r5
 8002582:	f000 f80b 	bl	800259c <__swsetup_r>
 8002586:	2800      	cmp	r0, #0
 8002588:	d0c9      	beq.n	800251e <__swbuf_r+0x2e>
 800258a:	2601      	movs	r6, #1
 800258c:	4276      	negs	r6, r6
 800258e:	e7ea      	b.n	8002566 <__swbuf_r+0x76>
 8002590:	080035c8 	.word	0x080035c8
 8002594:	080035e8 	.word	0x080035e8
 8002598:	080035a8 	.word	0x080035a8

0800259c <__swsetup_r>:
 800259c:	4b37      	ldr	r3, [pc, #220]	; (800267c <__swsetup_r+0xe0>)
 800259e:	b570      	push	{r4, r5, r6, lr}
 80025a0:	681d      	ldr	r5, [r3, #0]
 80025a2:	0006      	movs	r6, r0
 80025a4:	000c      	movs	r4, r1
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d005      	beq.n	80025b6 <__swsetup_r+0x1a>
 80025aa:	69ab      	ldr	r3, [r5, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <__swsetup_r+0x1a>
 80025b0:	0028      	movs	r0, r5
 80025b2:	f000 f999 	bl	80028e8 <__sinit>
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <__swsetup_r+0xe4>)
 80025b8:	429c      	cmp	r4, r3
 80025ba:	d10f      	bne.n	80025dc <__swsetup_r+0x40>
 80025bc:	686c      	ldr	r4, [r5, #4]
 80025be:	230c      	movs	r3, #12
 80025c0:	5ee2      	ldrsh	r2, [r4, r3]
 80025c2:	b293      	uxth	r3, r2
 80025c4:	0711      	lsls	r1, r2, #28
 80025c6:	d42d      	bmi.n	8002624 <__swsetup_r+0x88>
 80025c8:	06d9      	lsls	r1, r3, #27
 80025ca:	d411      	bmi.n	80025f0 <__swsetup_r+0x54>
 80025cc:	2309      	movs	r3, #9
 80025ce:	2001      	movs	r0, #1
 80025d0:	6033      	str	r3, [r6, #0]
 80025d2:	3337      	adds	r3, #55	; 0x37
 80025d4:	4313      	orrs	r3, r2
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	4240      	negs	r0, r0
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <__swsetup_r+0xe8>)
 80025de:	429c      	cmp	r4, r3
 80025e0:	d101      	bne.n	80025e6 <__swsetup_r+0x4a>
 80025e2:	68ac      	ldr	r4, [r5, #8]
 80025e4:	e7eb      	b.n	80025be <__swsetup_r+0x22>
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <__swsetup_r+0xec>)
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d1e8      	bne.n	80025be <__swsetup_r+0x22>
 80025ec:	68ec      	ldr	r4, [r5, #12]
 80025ee:	e7e6      	b.n	80025be <__swsetup_r+0x22>
 80025f0:	075b      	lsls	r3, r3, #29
 80025f2:	d513      	bpl.n	800261c <__swsetup_r+0x80>
 80025f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025f6:	2900      	cmp	r1, #0
 80025f8:	d008      	beq.n	800260c <__swsetup_r+0x70>
 80025fa:	0023      	movs	r3, r4
 80025fc:	3344      	adds	r3, #68	; 0x44
 80025fe:	4299      	cmp	r1, r3
 8002600:	d002      	beq.n	8002608 <__swsetup_r+0x6c>
 8002602:	0030      	movs	r0, r6
 8002604:	f000 fa80 	bl	8002b08 <_free_r>
 8002608:	2300      	movs	r3, #0
 800260a:	6363      	str	r3, [r4, #52]	; 0x34
 800260c:	2224      	movs	r2, #36	; 0x24
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	4393      	bics	r3, r2
 8002612:	81a3      	strh	r3, [r4, #12]
 8002614:	2300      	movs	r3, #0
 8002616:	6063      	str	r3, [r4, #4]
 8002618:	6923      	ldr	r3, [r4, #16]
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	2308      	movs	r3, #8
 800261e:	89a2      	ldrh	r2, [r4, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	81a3      	strh	r3, [r4, #12]
 8002624:	6923      	ldr	r3, [r4, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <__swsetup_r+0xa6>
 800262a:	21a0      	movs	r1, #160	; 0xa0
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	0089      	lsls	r1, r1, #2
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	400b      	ands	r3, r1
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <__swsetup_r+0xa6>
 800263a:	0021      	movs	r1, r4
 800263c:	0030      	movs	r0, r6
 800263e:	f000 fa1f 	bl	8002a80 <__smakebuf_r>
 8002642:	220c      	movs	r2, #12
 8002644:	5ea3      	ldrsh	r3, [r4, r2]
 8002646:	2001      	movs	r0, #1
 8002648:	001a      	movs	r2, r3
 800264a:	b299      	uxth	r1, r3
 800264c:	4002      	ands	r2, r0
 800264e:	4203      	tst	r3, r0
 8002650:	d00f      	beq.n	8002672 <__swsetup_r+0xd6>
 8002652:	2200      	movs	r2, #0
 8002654:	60a2      	str	r2, [r4, #8]
 8002656:	6962      	ldr	r2, [r4, #20]
 8002658:	4252      	negs	r2, r2
 800265a:	61a2      	str	r2, [r4, #24]
 800265c:	2000      	movs	r0, #0
 800265e:	6922      	ldr	r2, [r4, #16]
 8002660:	4282      	cmp	r2, r0
 8002662:	d1ba      	bne.n	80025da <__swsetup_r+0x3e>
 8002664:	060a      	lsls	r2, r1, #24
 8002666:	d5b8      	bpl.n	80025da <__swsetup_r+0x3e>
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	4313      	orrs	r3, r2
 800266c:	81a3      	strh	r3, [r4, #12]
 800266e:	3801      	subs	r0, #1
 8002670:	e7b3      	b.n	80025da <__swsetup_r+0x3e>
 8002672:	0788      	lsls	r0, r1, #30
 8002674:	d400      	bmi.n	8002678 <__swsetup_r+0xdc>
 8002676:	6962      	ldr	r2, [r4, #20]
 8002678:	60a2      	str	r2, [r4, #8]
 800267a:	e7ef      	b.n	800265c <__swsetup_r+0xc0>
 800267c:	20000004 	.word	0x20000004
 8002680:	080035c8 	.word	0x080035c8
 8002684:	080035e8 	.word	0x080035e8
 8002688:	080035a8 	.word	0x080035a8

0800268c <__sflush_r>:
 800268c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800268e:	898b      	ldrh	r3, [r1, #12]
 8002690:	0005      	movs	r5, r0
 8002692:	000c      	movs	r4, r1
 8002694:	071a      	lsls	r2, r3, #28
 8002696:	d45f      	bmi.n	8002758 <__sflush_r+0xcc>
 8002698:	684a      	ldr	r2, [r1, #4]
 800269a:	2a00      	cmp	r2, #0
 800269c:	dc04      	bgt.n	80026a8 <__sflush_r+0x1c>
 800269e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	dc01      	bgt.n	80026a8 <__sflush_r+0x1c>
 80026a4:	2000      	movs	r0, #0
 80026a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	d0fa      	beq.n	80026a4 <__sflush_r+0x18>
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	682e      	ldr	r6, [r5, #0]
 80026b4:	602a      	str	r2, [r5, #0]
 80026b6:	001a      	movs	r2, r3
 80026b8:	0149      	lsls	r1, r1, #5
 80026ba:	400a      	ands	r2, r1
 80026bc:	420b      	tst	r3, r1
 80026be:	d034      	beq.n	800272a <__sflush_r+0x9e>
 80026c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	075b      	lsls	r3, r3, #29
 80026c6:	d506      	bpl.n	80026d6 <__sflush_r+0x4a>
 80026c8:	6863      	ldr	r3, [r4, #4]
 80026ca:	1ac0      	subs	r0, r0, r3
 80026cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <__sflush_r+0x4a>
 80026d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026d4:	1ac0      	subs	r0, r0, r3
 80026d6:	0002      	movs	r2, r0
 80026d8:	6a21      	ldr	r1, [r4, #32]
 80026da:	2300      	movs	r3, #0
 80026dc:	0028      	movs	r0, r5
 80026de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026e0:	47b8      	blx	r7
 80026e2:	89a1      	ldrh	r1, [r4, #12]
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d106      	bne.n	80026f6 <__sflush_r+0x6a>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	2b1d      	cmp	r3, #29
 80026ec:	d831      	bhi.n	8002752 <__sflush_r+0xc6>
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <__sflush_r+0x114>)
 80026f0:	40da      	lsrs	r2, r3
 80026f2:	07d3      	lsls	r3, r2, #31
 80026f4:	d52d      	bpl.n	8002752 <__sflush_r+0xc6>
 80026f6:	2300      	movs	r3, #0
 80026f8:	6063      	str	r3, [r4, #4]
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	04cb      	lsls	r3, r1, #19
 8002700:	d505      	bpl.n	800270e <__sflush_r+0x82>
 8002702:	1c43      	adds	r3, r0, #1
 8002704:	d102      	bne.n	800270c <__sflush_r+0x80>
 8002706:	682b      	ldr	r3, [r5, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <__sflush_r+0x82>
 800270c:	6560      	str	r0, [r4, #84]	; 0x54
 800270e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002710:	602e      	str	r6, [r5, #0]
 8002712:	2900      	cmp	r1, #0
 8002714:	d0c6      	beq.n	80026a4 <__sflush_r+0x18>
 8002716:	0023      	movs	r3, r4
 8002718:	3344      	adds	r3, #68	; 0x44
 800271a:	4299      	cmp	r1, r3
 800271c:	d002      	beq.n	8002724 <__sflush_r+0x98>
 800271e:	0028      	movs	r0, r5
 8002720:	f000 f9f2 	bl	8002b08 <_free_r>
 8002724:	2000      	movs	r0, #0
 8002726:	6360      	str	r0, [r4, #52]	; 0x34
 8002728:	e7bd      	b.n	80026a6 <__sflush_r+0x1a>
 800272a:	2301      	movs	r3, #1
 800272c:	0028      	movs	r0, r5
 800272e:	6a21      	ldr	r1, [r4, #32]
 8002730:	47b8      	blx	r7
 8002732:	1c43      	adds	r3, r0, #1
 8002734:	d1c5      	bne.n	80026c2 <__sflush_r+0x36>
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0c2      	beq.n	80026c2 <__sflush_r+0x36>
 800273c:	2b1d      	cmp	r3, #29
 800273e:	d001      	beq.n	8002744 <__sflush_r+0xb8>
 8002740:	2b16      	cmp	r3, #22
 8002742:	d101      	bne.n	8002748 <__sflush_r+0xbc>
 8002744:	602e      	str	r6, [r5, #0]
 8002746:	e7ad      	b.n	80026a4 <__sflush_r+0x18>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	89a2      	ldrh	r2, [r4, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	81a3      	strh	r3, [r4, #12]
 8002750:	e7a9      	b.n	80026a6 <__sflush_r+0x1a>
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	430b      	orrs	r3, r1
 8002756:	e7fa      	b.n	800274e <__sflush_r+0xc2>
 8002758:	690f      	ldr	r7, [r1, #16]
 800275a:	2f00      	cmp	r7, #0
 800275c:	d0a2      	beq.n	80026a4 <__sflush_r+0x18>
 800275e:	680a      	ldr	r2, [r1, #0]
 8002760:	600f      	str	r7, [r1, #0]
 8002762:	1bd2      	subs	r2, r2, r7
 8002764:	9201      	str	r2, [sp, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	079b      	lsls	r3, r3, #30
 800276a:	d100      	bne.n	800276e <__sflush_r+0xe2>
 800276c:	694a      	ldr	r2, [r1, #20]
 800276e:	60a2      	str	r2, [r4, #8]
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	dc00      	bgt.n	8002778 <__sflush_r+0xec>
 8002776:	e795      	b.n	80026a4 <__sflush_r+0x18>
 8002778:	003a      	movs	r2, r7
 800277a:	0028      	movs	r0, r5
 800277c:	9b01      	ldr	r3, [sp, #4]
 800277e:	6a21      	ldr	r1, [r4, #32]
 8002780:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002782:	47b0      	blx	r6
 8002784:	2800      	cmp	r0, #0
 8002786:	dc06      	bgt.n	8002796 <__sflush_r+0x10a>
 8002788:	2340      	movs	r3, #64	; 0x40
 800278a:	2001      	movs	r0, #1
 800278c:	89a2      	ldrh	r2, [r4, #12]
 800278e:	4240      	negs	r0, r0
 8002790:	4313      	orrs	r3, r2
 8002792:	81a3      	strh	r3, [r4, #12]
 8002794:	e787      	b.n	80026a6 <__sflush_r+0x1a>
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	183f      	adds	r7, r7, r0
 800279a:	1a1b      	subs	r3, r3, r0
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	e7e7      	b.n	8002770 <__sflush_r+0xe4>
 80027a0:	20400001 	.word	0x20400001

080027a4 <_fflush_r>:
 80027a4:	690b      	ldr	r3, [r1, #16]
 80027a6:	b570      	push	{r4, r5, r6, lr}
 80027a8:	0005      	movs	r5, r0
 80027aa:	000c      	movs	r4, r1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_fflush_r+0x12>
 80027b0:	2500      	movs	r5, #0
 80027b2:	0028      	movs	r0, r5
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d004      	beq.n	80027c4 <_fflush_r+0x20>
 80027ba:	6983      	ldr	r3, [r0, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <_fflush_r+0x20>
 80027c0:	f000 f892 	bl	80028e8 <__sinit>
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <_fflush_r+0x74>)
 80027c6:	429c      	cmp	r4, r3
 80027c8:	d11b      	bne.n	8002802 <_fflush_r+0x5e>
 80027ca:	686c      	ldr	r4, [r5, #4]
 80027cc:	220c      	movs	r2, #12
 80027ce:	5ea3      	ldrsh	r3, [r4, r2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ed      	beq.n	80027b0 <_fflush_r+0xc>
 80027d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027d6:	07d2      	lsls	r2, r2, #31
 80027d8:	d404      	bmi.n	80027e4 <_fflush_r+0x40>
 80027da:	059b      	lsls	r3, r3, #22
 80027dc:	d402      	bmi.n	80027e4 <_fflush_r+0x40>
 80027de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027e0:	f000 f923 	bl	8002a2a <__retarget_lock_acquire_recursive>
 80027e4:	0028      	movs	r0, r5
 80027e6:	0021      	movs	r1, r4
 80027e8:	f7ff ff50 	bl	800268c <__sflush_r>
 80027ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027ee:	0005      	movs	r5, r0
 80027f0:	07db      	lsls	r3, r3, #31
 80027f2:	d4de      	bmi.n	80027b2 <_fflush_r+0xe>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	059b      	lsls	r3, r3, #22
 80027f8:	d4db      	bmi.n	80027b2 <_fflush_r+0xe>
 80027fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027fc:	f000 f916 	bl	8002a2c <__retarget_lock_release_recursive>
 8002800:	e7d7      	b.n	80027b2 <_fflush_r+0xe>
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <_fflush_r+0x78>)
 8002804:	429c      	cmp	r4, r3
 8002806:	d101      	bne.n	800280c <_fflush_r+0x68>
 8002808:	68ac      	ldr	r4, [r5, #8]
 800280a:	e7df      	b.n	80027cc <_fflush_r+0x28>
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <_fflush_r+0x7c>)
 800280e:	429c      	cmp	r4, r3
 8002810:	d1dc      	bne.n	80027cc <_fflush_r+0x28>
 8002812:	68ec      	ldr	r4, [r5, #12]
 8002814:	e7da      	b.n	80027cc <_fflush_r+0x28>
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	080035c8 	.word	0x080035c8
 800281c:	080035e8 	.word	0x080035e8
 8002820:	080035a8 	.word	0x080035a8

08002824 <std>:
 8002824:	2300      	movs	r3, #0
 8002826:	b510      	push	{r4, lr}
 8002828:	0004      	movs	r4, r0
 800282a:	6003      	str	r3, [r0, #0]
 800282c:	6043      	str	r3, [r0, #4]
 800282e:	6083      	str	r3, [r0, #8]
 8002830:	8181      	strh	r1, [r0, #12]
 8002832:	6643      	str	r3, [r0, #100]	; 0x64
 8002834:	0019      	movs	r1, r3
 8002836:	81c2      	strh	r2, [r0, #14]
 8002838:	6103      	str	r3, [r0, #16]
 800283a:	6143      	str	r3, [r0, #20]
 800283c:	6183      	str	r3, [r0, #24]
 800283e:	2208      	movs	r2, #8
 8002840:	305c      	adds	r0, #92	; 0x5c
 8002842:	f7ff fdb7 	bl	80023b4 <memset>
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <std+0x38>)
 8002848:	6224      	str	r4, [r4, #32]
 800284a:	6263      	str	r3, [r4, #36]	; 0x24
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <std+0x3c>)
 800284e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <std+0x40>)
 8002852:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <std+0x44>)
 8002856:	6323      	str	r3, [r4, #48]	; 0x30
 8002858:	bd10      	pop	{r4, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	080032b9 	.word	0x080032b9
 8002860:	080032e1 	.word	0x080032e1
 8002864:	08003319 	.word	0x08003319
 8002868:	08003345 	.word	0x08003345

0800286c <_cleanup_r>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4902      	ldr	r1, [pc, #8]	; (8002878 <_cleanup_r+0xc>)
 8002870:	f000 f8ba 	bl	80029e8 <_fwalk_reent>
 8002874:	bd10      	pop	{r4, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	080027a5 	.word	0x080027a5

0800287c <__sfmoreglue>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	2568      	movs	r5, #104	; 0x68
 8002880:	1e4a      	subs	r2, r1, #1
 8002882:	4355      	muls	r5, r2
 8002884:	000e      	movs	r6, r1
 8002886:	0029      	movs	r1, r5
 8002888:	3174      	adds	r1, #116	; 0x74
 800288a:	f000 f9a9 	bl	8002be0 <_malloc_r>
 800288e:	1e04      	subs	r4, r0, #0
 8002890:	d008      	beq.n	80028a4 <__sfmoreglue+0x28>
 8002892:	2100      	movs	r1, #0
 8002894:	002a      	movs	r2, r5
 8002896:	6001      	str	r1, [r0, #0]
 8002898:	6046      	str	r6, [r0, #4]
 800289a:	300c      	adds	r0, #12
 800289c:	60a0      	str	r0, [r4, #8]
 800289e:	3268      	adds	r2, #104	; 0x68
 80028a0:	f7ff fd88 	bl	80023b4 <memset>
 80028a4:	0020      	movs	r0, r4
 80028a6:	bd70      	pop	{r4, r5, r6, pc}

080028a8 <__sfp_lock_acquire>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4802      	ldr	r0, [pc, #8]	; (80028b4 <__sfp_lock_acquire+0xc>)
 80028ac:	f000 f8bd 	bl	8002a2a <__retarget_lock_acquire_recursive>
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	200000a5 	.word	0x200000a5

080028b8 <__sfp_lock_release>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <__sfp_lock_release+0xc>)
 80028bc:	f000 f8b6 	bl	8002a2c <__retarget_lock_release_recursive>
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	200000a5 	.word	0x200000a5

080028c8 <__sinit_lock_acquire>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4802      	ldr	r0, [pc, #8]	; (80028d4 <__sinit_lock_acquire+0xc>)
 80028cc:	f000 f8ad 	bl	8002a2a <__retarget_lock_acquire_recursive>
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	200000a6 	.word	0x200000a6

080028d8 <__sinit_lock_release>:
 80028d8:	b510      	push	{r4, lr}
 80028da:	4802      	ldr	r0, [pc, #8]	; (80028e4 <__sinit_lock_release+0xc>)
 80028dc:	f000 f8a6 	bl	8002a2c <__retarget_lock_release_recursive>
 80028e0:	bd10      	pop	{r4, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	200000a6 	.word	0x200000a6

080028e8 <__sinit>:
 80028e8:	b513      	push	{r0, r1, r4, lr}
 80028ea:	0004      	movs	r4, r0
 80028ec:	f7ff ffec 	bl	80028c8 <__sinit_lock_acquire>
 80028f0:	69a3      	ldr	r3, [r4, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <__sinit+0x14>
 80028f6:	f7ff ffef 	bl	80028d8 <__sinit_lock_release>
 80028fa:	bd13      	pop	{r0, r1, r4, pc}
 80028fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80028fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002900:	6523      	str	r3, [r4, #80]	; 0x50
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <__sinit+0x68>)
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <__sinit+0x6c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62a2      	str	r2, [r4, #40]	; 0x28
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	42a3      	cmp	r3, r4
 800290e:	d101      	bne.n	8002914 <__sinit+0x2c>
 8002910:	2301      	movs	r3, #1
 8002912:	61a3      	str	r3, [r4, #24]
 8002914:	0020      	movs	r0, r4
 8002916:	f000 f81f 	bl	8002958 <__sfp>
 800291a:	6060      	str	r0, [r4, #4]
 800291c:	0020      	movs	r0, r4
 800291e:	f000 f81b 	bl	8002958 <__sfp>
 8002922:	60a0      	str	r0, [r4, #8]
 8002924:	0020      	movs	r0, r4
 8002926:	f000 f817 	bl	8002958 <__sfp>
 800292a:	2200      	movs	r2, #0
 800292c:	2104      	movs	r1, #4
 800292e:	60e0      	str	r0, [r4, #12]
 8002930:	6860      	ldr	r0, [r4, #4]
 8002932:	f7ff ff77 	bl	8002824 <std>
 8002936:	2201      	movs	r2, #1
 8002938:	2109      	movs	r1, #9
 800293a:	68a0      	ldr	r0, [r4, #8]
 800293c:	f7ff ff72 	bl	8002824 <std>
 8002940:	2202      	movs	r2, #2
 8002942:	2112      	movs	r1, #18
 8002944:	68e0      	ldr	r0, [r4, #12]
 8002946:	f7ff ff6d 	bl	8002824 <std>
 800294a:	2301      	movs	r3, #1
 800294c:	61a3      	str	r3, [r4, #24]
 800294e:	e7d2      	b.n	80028f6 <__sinit+0xe>
 8002950:	080035a4 	.word	0x080035a4
 8002954:	0800286d 	.word	0x0800286d

08002958 <__sfp>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	0007      	movs	r7, r0
 800295c:	f7ff ffa4 	bl	80028a8 <__sfp_lock_acquire>
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <__sfp+0x88>)
 8002962:	681e      	ldr	r6, [r3, #0]
 8002964:	69b3      	ldr	r3, [r6, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <__sfp+0x18>
 800296a:	0030      	movs	r0, r6
 800296c:	f7ff ffbc 	bl	80028e8 <__sinit>
 8002970:	3648      	adds	r6, #72	; 0x48
 8002972:	68b4      	ldr	r4, [r6, #8]
 8002974:	6873      	ldr	r3, [r6, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	d504      	bpl.n	8002984 <__sfp+0x2c>
 800297a:	6833      	ldr	r3, [r6, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <__sfp+0x6e>
 8002980:	6836      	ldr	r6, [r6, #0]
 8002982:	e7f6      	b.n	8002972 <__sfp+0x1a>
 8002984:	220c      	movs	r2, #12
 8002986:	5ea5      	ldrsh	r5, [r4, r2]
 8002988:	2d00      	cmp	r5, #0
 800298a:	d11a      	bne.n	80029c2 <__sfp+0x6a>
 800298c:	0020      	movs	r0, r4
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <__sfp+0x8c>)
 8002990:	3058      	adds	r0, #88	; 0x58
 8002992:	60e3      	str	r3, [r4, #12]
 8002994:	6665      	str	r5, [r4, #100]	; 0x64
 8002996:	f000 f847 	bl	8002a28 <__retarget_lock_init_recursive>
 800299a:	f7ff ff8d 	bl	80028b8 <__sfp_lock_release>
 800299e:	0020      	movs	r0, r4
 80029a0:	2208      	movs	r2, #8
 80029a2:	0029      	movs	r1, r5
 80029a4:	6025      	str	r5, [r4, #0]
 80029a6:	60a5      	str	r5, [r4, #8]
 80029a8:	6065      	str	r5, [r4, #4]
 80029aa:	6125      	str	r5, [r4, #16]
 80029ac:	6165      	str	r5, [r4, #20]
 80029ae:	61a5      	str	r5, [r4, #24]
 80029b0:	305c      	adds	r0, #92	; 0x5c
 80029b2:	f7ff fcff 	bl	80023b4 <memset>
 80029b6:	6365      	str	r5, [r4, #52]	; 0x34
 80029b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80029ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80029bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80029be:	0020      	movs	r0, r4
 80029c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c2:	3468      	adds	r4, #104	; 0x68
 80029c4:	e7d7      	b.n	8002976 <__sfp+0x1e>
 80029c6:	2104      	movs	r1, #4
 80029c8:	0038      	movs	r0, r7
 80029ca:	f7ff ff57 	bl	800287c <__sfmoreglue>
 80029ce:	1e04      	subs	r4, r0, #0
 80029d0:	6030      	str	r0, [r6, #0]
 80029d2:	d1d5      	bne.n	8002980 <__sfp+0x28>
 80029d4:	f7ff ff70 	bl	80028b8 <__sfp_lock_release>
 80029d8:	230c      	movs	r3, #12
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	e7ef      	b.n	80029be <__sfp+0x66>
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	080035a4 	.word	0x080035a4
 80029e4:	ffff0001 	.word	0xffff0001

080029e8 <_fwalk_reent>:
 80029e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ea:	0004      	movs	r4, r0
 80029ec:	0006      	movs	r6, r0
 80029ee:	2700      	movs	r7, #0
 80029f0:	9101      	str	r1, [sp, #4]
 80029f2:	3448      	adds	r4, #72	; 0x48
 80029f4:	6863      	ldr	r3, [r4, #4]
 80029f6:	68a5      	ldr	r5, [r4, #8]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	9b00      	ldr	r3, [sp, #0]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	d504      	bpl.n	8002a0c <_fwalk_reent+0x24>
 8002a02:	6824      	ldr	r4, [r4, #0]
 8002a04:	2c00      	cmp	r4, #0
 8002a06:	d1f5      	bne.n	80029f4 <_fwalk_reent+0xc>
 8002a08:	0038      	movs	r0, r7
 8002a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a0c:	89ab      	ldrh	r3, [r5, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d908      	bls.n	8002a24 <_fwalk_reent+0x3c>
 8002a12:	220e      	movs	r2, #14
 8002a14:	5eab      	ldrsh	r3, [r5, r2]
 8002a16:	3301      	adds	r3, #1
 8002a18:	d004      	beq.n	8002a24 <_fwalk_reent+0x3c>
 8002a1a:	0029      	movs	r1, r5
 8002a1c:	0030      	movs	r0, r6
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	4798      	blx	r3
 8002a22:	4307      	orrs	r7, r0
 8002a24:	3568      	adds	r5, #104	; 0x68
 8002a26:	e7e8      	b.n	80029fa <_fwalk_reent+0x12>

08002a28 <__retarget_lock_init_recursive>:
 8002a28:	4770      	bx	lr

08002a2a <__retarget_lock_acquire_recursive>:
 8002a2a:	4770      	bx	lr

08002a2c <__retarget_lock_release_recursive>:
 8002a2c:	4770      	bx	lr
	...

08002a30 <__swhatbuf_r>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	000e      	movs	r6, r1
 8002a34:	001d      	movs	r5, r3
 8002a36:	230e      	movs	r3, #14
 8002a38:	5ec9      	ldrsh	r1, [r1, r3]
 8002a3a:	0014      	movs	r4, r2
 8002a3c:	b096      	sub	sp, #88	; 0x58
 8002a3e:	2900      	cmp	r1, #0
 8002a40:	da08      	bge.n	8002a54 <__swhatbuf_r+0x24>
 8002a42:	220c      	movs	r2, #12
 8002a44:	5eb3      	ldrsh	r3, [r6, r2]
 8002a46:	2200      	movs	r2, #0
 8002a48:	602a      	str	r2, [r5, #0]
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	d411      	bmi.n	8002a72 <__swhatbuf_r+0x42>
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	e00f      	b.n	8002a74 <__swhatbuf_r+0x44>
 8002a54:	466a      	mov	r2, sp
 8002a56:	f000 fca1 	bl	800339c <_fstat_r>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	dbf1      	blt.n	8002a42 <__swhatbuf_r+0x12>
 8002a5e:	23f0      	movs	r3, #240	; 0xf0
 8002a60:	9901      	ldr	r1, [sp, #4]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	4019      	ands	r1, r3
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <__swhatbuf_r+0x4c>)
 8002a68:	18c9      	adds	r1, r1, r3
 8002a6a:	424b      	negs	r3, r1
 8002a6c:	4159      	adcs	r1, r3
 8002a6e:	6029      	str	r1, [r5, #0]
 8002a70:	e7ed      	b.n	8002a4e <__swhatbuf_r+0x1e>
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	2000      	movs	r0, #0
 8002a76:	6023      	str	r3, [r4, #0]
 8002a78:	b016      	add	sp, #88	; 0x58
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	ffffe000 	.word	0xffffe000

08002a80 <__smakebuf_r>:
 8002a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a82:	2602      	movs	r6, #2
 8002a84:	898b      	ldrh	r3, [r1, #12]
 8002a86:	0005      	movs	r5, r0
 8002a88:	000c      	movs	r4, r1
 8002a8a:	4233      	tst	r3, r6
 8002a8c:	d006      	beq.n	8002a9c <__smakebuf_r+0x1c>
 8002a8e:	0023      	movs	r3, r4
 8002a90:	3347      	adds	r3, #71	; 0x47
 8002a92:	6023      	str	r3, [r4, #0]
 8002a94:	6123      	str	r3, [r4, #16]
 8002a96:	2301      	movs	r3, #1
 8002a98:	6163      	str	r3, [r4, #20]
 8002a9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002a9c:	466a      	mov	r2, sp
 8002a9e:	ab01      	add	r3, sp, #4
 8002aa0:	f7ff ffc6 	bl	8002a30 <__swhatbuf_r>
 8002aa4:	9900      	ldr	r1, [sp, #0]
 8002aa6:	0007      	movs	r7, r0
 8002aa8:	0028      	movs	r0, r5
 8002aaa:	f000 f899 	bl	8002be0 <_malloc_r>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d108      	bne.n	8002ac4 <__smakebuf_r+0x44>
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	5ea3      	ldrsh	r3, [r4, r2]
 8002ab6:	059a      	lsls	r2, r3, #22
 8002ab8:	d4ef      	bmi.n	8002a9a <__smakebuf_r+0x1a>
 8002aba:	2203      	movs	r2, #3
 8002abc:	4393      	bics	r3, r2
 8002abe:	431e      	orrs	r6, r3
 8002ac0:	81a6      	strh	r6, [r4, #12]
 8002ac2:	e7e4      	b.n	8002a8e <__smakebuf_r+0xe>
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <__smakebuf_r+0x84>)
 8002ac6:	62ab      	str	r3, [r5, #40]	; 0x28
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	89a2      	ldrh	r2, [r4, #12]
 8002acc:	6020      	str	r0, [r4, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	9b00      	ldr	r3, [sp, #0]
 8002ad4:	6120      	str	r0, [r4, #16]
 8002ad6:	6163      	str	r3, [r4, #20]
 8002ad8:	9b01      	ldr	r3, [sp, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <__smakebuf_r+0x7a>
 8002ade:	0028      	movs	r0, r5
 8002ae0:	230e      	movs	r3, #14
 8002ae2:	5ee1      	ldrsh	r1, [r4, r3]
 8002ae4:	f000 fc6c 	bl	80033c0 <_isatty_r>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d006      	beq.n	8002afa <__smakebuf_r+0x7a>
 8002aec:	2203      	movs	r2, #3
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	4393      	bics	r3, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	2301      	movs	r3, #1
 8002af6:	4313      	orrs	r3, r2
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	89a0      	ldrh	r0, [r4, #12]
 8002afc:	4307      	orrs	r7, r0
 8002afe:	81a7      	strh	r7, [r4, #12]
 8002b00:	e7cb      	b.n	8002a9a <__smakebuf_r+0x1a>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	0800286d 	.word	0x0800286d

08002b08 <_free_r>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	0005      	movs	r5, r0
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d010      	beq.n	8002b32 <_free_r+0x2a>
 8002b10:	1f0c      	subs	r4, r1, #4
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da00      	bge.n	8002b1a <_free_r+0x12>
 8002b18:	18e4      	adds	r4, r4, r3
 8002b1a:	0028      	movs	r0, r5
 8002b1c:	f000 fc82 	bl	8003424 <__malloc_lock>
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <_free_r+0x90>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <_free_r+0x2c>
 8002b28:	6063      	str	r3, [r4, #4]
 8002b2a:	6014      	str	r4, [r2, #0]
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	f000 fc81 	bl	8003434 <__malloc_unlock>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	d908      	bls.n	8002b4a <_free_r+0x42>
 8002b38:	6821      	ldr	r1, [r4, #0]
 8002b3a:	1860      	adds	r0, r4, r1
 8002b3c:	4283      	cmp	r3, r0
 8002b3e:	d1f3      	bne.n	8002b28 <_free_r+0x20>
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	1841      	adds	r1, r0, r1
 8002b46:	6021      	str	r1, [r4, #0]
 8002b48:	e7ee      	b.n	8002b28 <_free_r+0x20>
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <_free_r+0x4e>
 8002b52:	42a3      	cmp	r3, r4
 8002b54:	d9f9      	bls.n	8002b4a <_free_r+0x42>
 8002b56:	6811      	ldr	r1, [r2, #0]
 8002b58:	1850      	adds	r0, r2, r1
 8002b5a:	42a0      	cmp	r0, r4
 8002b5c:	d10b      	bne.n	8002b76 <_free_r+0x6e>
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	1809      	adds	r1, r1, r0
 8002b62:	1850      	adds	r0, r2, r1
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	4283      	cmp	r3, r0
 8002b68:	d1e0      	bne.n	8002b2c <_free_r+0x24>
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	1841      	adds	r1, r0, r1
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	6053      	str	r3, [r2, #4]
 8002b74:	e7da      	b.n	8002b2c <_free_r+0x24>
 8002b76:	42a0      	cmp	r0, r4
 8002b78:	d902      	bls.n	8002b80 <_free_r+0x78>
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	602b      	str	r3, [r5, #0]
 8002b7e:	e7d5      	b.n	8002b2c <_free_r+0x24>
 8002b80:	6821      	ldr	r1, [r4, #0]
 8002b82:	1860      	adds	r0, r4, r1
 8002b84:	4283      	cmp	r3, r0
 8002b86:	d103      	bne.n	8002b90 <_free_r+0x88>
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	1841      	adds	r1, r0, r1
 8002b8e:	6021      	str	r1, [r4, #0]
 8002b90:	6063      	str	r3, [r4, #4]
 8002b92:	6054      	str	r4, [r2, #4]
 8002b94:	e7ca      	b.n	8002b2c <_free_r+0x24>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200000a8 	.word	0x200000a8

08002b9c <sbrk_aligned>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	4e0f      	ldr	r6, [pc, #60]	; (8002bdc <sbrk_aligned+0x40>)
 8002ba0:	000d      	movs	r5, r1
 8002ba2:	6831      	ldr	r1, [r6, #0]
 8002ba4:	0004      	movs	r4, r0
 8002ba6:	2900      	cmp	r1, #0
 8002ba8:	d102      	bne.n	8002bb0 <sbrk_aligned+0x14>
 8002baa:	f000 fb73 	bl	8003294 <_sbrk_r>
 8002bae:	6030      	str	r0, [r6, #0]
 8002bb0:	0029      	movs	r1, r5
 8002bb2:	0020      	movs	r0, r4
 8002bb4:	f000 fb6e 	bl	8003294 <_sbrk_r>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d00a      	beq.n	8002bd2 <sbrk_aligned+0x36>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	1cc5      	adds	r5, r0, #3
 8002bc0:	439d      	bics	r5, r3
 8002bc2:	42a8      	cmp	r0, r5
 8002bc4:	d007      	beq.n	8002bd6 <sbrk_aligned+0x3a>
 8002bc6:	1a29      	subs	r1, r5, r0
 8002bc8:	0020      	movs	r0, r4
 8002bca:	f000 fb63 	bl	8003294 <_sbrk_r>
 8002bce:	1c43      	adds	r3, r0, #1
 8002bd0:	d101      	bne.n	8002bd6 <sbrk_aligned+0x3a>
 8002bd2:	2501      	movs	r5, #1
 8002bd4:	426d      	negs	r5, r5
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	200000ac 	.word	0x200000ac

08002be0 <_malloc_r>:
 8002be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002be2:	2203      	movs	r2, #3
 8002be4:	1ccb      	adds	r3, r1, #3
 8002be6:	4393      	bics	r3, r2
 8002be8:	3308      	adds	r3, #8
 8002bea:	0006      	movs	r6, r0
 8002bec:	001f      	movs	r7, r3
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d232      	bcs.n	8002c58 <_malloc_r+0x78>
 8002bf2:	270c      	movs	r7, #12
 8002bf4:	42b9      	cmp	r1, r7
 8002bf6:	d831      	bhi.n	8002c5c <_malloc_r+0x7c>
 8002bf8:	0030      	movs	r0, r6
 8002bfa:	f000 fc13 	bl	8003424 <__malloc_lock>
 8002bfe:	4d32      	ldr	r5, [pc, #200]	; (8002cc8 <_malloc_r+0xe8>)
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	001c      	movs	r4, r3
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d12e      	bne.n	8002c66 <_malloc_r+0x86>
 8002c08:	0039      	movs	r1, r7
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f7ff ffc6 	bl	8002b9c <sbrk_aligned>
 8002c10:	0004      	movs	r4, r0
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d11e      	bne.n	8002c54 <_malloc_r+0x74>
 8002c16:	682c      	ldr	r4, [r5, #0]
 8002c18:	0025      	movs	r5, r4
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	d14a      	bne.n	8002cb4 <_malloc_r+0xd4>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	0029      	movs	r1, r5
 8002c22:	18e3      	adds	r3, r4, r3
 8002c24:	0030      	movs	r0, r6
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	f000 fb34 	bl	8003294 <_sbrk_r>
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	4283      	cmp	r3, r0
 8002c30:	d143      	bne.n	8002cba <_malloc_r+0xda>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	3703      	adds	r7, #3
 8002c36:	1aff      	subs	r7, r7, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	439f      	bics	r7, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	2f0c      	cmp	r7, #12
 8002c40:	d200      	bcs.n	8002c44 <_malloc_r+0x64>
 8002c42:	270c      	movs	r7, #12
 8002c44:	0039      	movs	r1, r7
 8002c46:	0030      	movs	r0, r6
 8002c48:	f7ff ffa8 	bl	8002b9c <sbrk_aligned>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d034      	beq.n	8002cba <_malloc_r+0xda>
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	19df      	adds	r7, r3, r7
 8002c54:	6027      	str	r7, [r4, #0]
 8002c56:	e013      	b.n	8002c80 <_malloc_r+0xa0>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dacb      	bge.n	8002bf4 <_malloc_r+0x14>
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	2500      	movs	r5, #0
 8002c60:	6033      	str	r3, [r6, #0]
 8002c62:	0028      	movs	r0, r5
 8002c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	1bd1      	subs	r1, r2, r7
 8002c6a:	d420      	bmi.n	8002cae <_malloc_r+0xce>
 8002c6c:	290b      	cmp	r1, #11
 8002c6e:	d917      	bls.n	8002ca0 <_malloc_r+0xc0>
 8002c70:	19e2      	adds	r2, r4, r7
 8002c72:	6027      	str	r7, [r4, #0]
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	d111      	bne.n	8002c9c <_malloc_r+0xbc>
 8002c78:	602a      	str	r2, [r5, #0]
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	6053      	str	r3, [r2, #4]
 8002c80:	0030      	movs	r0, r6
 8002c82:	0025      	movs	r5, r4
 8002c84:	f000 fbd6 	bl	8003434 <__malloc_unlock>
 8002c88:	2207      	movs	r2, #7
 8002c8a:	350b      	adds	r5, #11
 8002c8c:	1d23      	adds	r3, r4, #4
 8002c8e:	4395      	bics	r5, r2
 8002c90:	1aea      	subs	r2, r5, r3
 8002c92:	429d      	cmp	r5, r3
 8002c94:	d0e5      	beq.n	8002c62 <_malloc_r+0x82>
 8002c96:	1b5b      	subs	r3, r3, r5
 8002c98:	50a3      	str	r3, [r4, r2]
 8002c9a:	e7e2      	b.n	8002c62 <_malloc_r+0x82>
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	e7ec      	b.n	8002c7a <_malloc_r+0x9a>
 8002ca0:	6862      	ldr	r2, [r4, #4]
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	d101      	bne.n	8002caa <_malloc_r+0xca>
 8002ca6:	602a      	str	r2, [r5, #0]
 8002ca8:	e7ea      	b.n	8002c80 <_malloc_r+0xa0>
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	e7e8      	b.n	8002c80 <_malloc_r+0xa0>
 8002cae:	0023      	movs	r3, r4
 8002cb0:	6864      	ldr	r4, [r4, #4]
 8002cb2:	e7a7      	b.n	8002c04 <_malloc_r+0x24>
 8002cb4:	002c      	movs	r4, r5
 8002cb6:	686d      	ldr	r5, [r5, #4]
 8002cb8:	e7af      	b.n	8002c1a <_malloc_r+0x3a>
 8002cba:	230c      	movs	r3, #12
 8002cbc:	0030      	movs	r0, r6
 8002cbe:	6033      	str	r3, [r6, #0]
 8002cc0:	f000 fbb8 	bl	8003434 <__malloc_unlock>
 8002cc4:	e7cd      	b.n	8002c62 <_malloc_r+0x82>
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	200000a8 	.word	0x200000a8

08002ccc <__sfputc_r>:
 8002ccc:	6893      	ldr	r3, [r2, #8]
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da04      	bge.n	8002ce2 <__sfputc_r+0x16>
 8002cd8:	6994      	ldr	r4, [r2, #24]
 8002cda:	42a3      	cmp	r3, r4
 8002cdc:	db07      	blt.n	8002cee <__sfputc_r+0x22>
 8002cde:	290a      	cmp	r1, #10
 8002ce0:	d005      	beq.n	8002cee <__sfputc_r+0x22>
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	1c58      	adds	r0, r3, #1
 8002ce6:	6010      	str	r0, [r2, #0]
 8002ce8:	7019      	strb	r1, [r3, #0]
 8002cea:	0008      	movs	r0, r1
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	f7ff fbff 	bl	80024f0 <__swbuf_r>
 8002cf2:	0001      	movs	r1, r0
 8002cf4:	e7f9      	b.n	8002cea <__sfputc_r+0x1e>

08002cf6 <__sfputs_r>:
 8002cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf8:	0006      	movs	r6, r0
 8002cfa:	000f      	movs	r7, r1
 8002cfc:	0014      	movs	r4, r2
 8002cfe:	18d5      	adds	r5, r2, r3
 8002d00:	42ac      	cmp	r4, r5
 8002d02:	d101      	bne.n	8002d08 <__sfputs_r+0x12>
 8002d04:	2000      	movs	r0, #0
 8002d06:	e007      	b.n	8002d18 <__sfputs_r+0x22>
 8002d08:	7821      	ldrb	r1, [r4, #0]
 8002d0a:	003a      	movs	r2, r7
 8002d0c:	0030      	movs	r0, r6
 8002d0e:	f7ff ffdd 	bl	8002ccc <__sfputc_r>
 8002d12:	3401      	adds	r4, #1
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d1f3      	bne.n	8002d00 <__sfputs_r+0xa>
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d1c <_vfiprintf_r>:
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b0a1      	sub	sp, #132	; 0x84
 8002d20:	0006      	movs	r6, r0
 8002d22:	000c      	movs	r4, r1
 8002d24:	001f      	movs	r7, r3
 8002d26:	9203      	str	r2, [sp, #12]
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d004      	beq.n	8002d36 <_vfiprintf_r+0x1a>
 8002d2c:	6983      	ldr	r3, [r0, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <_vfiprintf_r+0x1a>
 8002d32:	f7ff fdd9 	bl	80028e8 <__sinit>
 8002d36:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <_vfiprintf_r+0x254>)
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	d11c      	bne.n	8002d76 <_vfiprintf_r+0x5a>
 8002d3c:	6874      	ldr	r4, [r6, #4]
 8002d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d40:	07db      	lsls	r3, r3, #31
 8002d42:	d405      	bmi.n	8002d50 <_vfiprintf_r+0x34>
 8002d44:	89a3      	ldrh	r3, [r4, #12]
 8002d46:	059b      	lsls	r3, r3, #22
 8002d48:	d402      	bmi.n	8002d50 <_vfiprintf_r+0x34>
 8002d4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d4c:	f7ff fe6d 	bl	8002a2a <__retarget_lock_acquire_recursive>
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	071b      	lsls	r3, r3, #28
 8002d54:	d502      	bpl.n	8002d5c <_vfiprintf_r+0x40>
 8002d56:	6923      	ldr	r3, [r4, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <_vfiprintf_r+0x7c>
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	0030      	movs	r0, r6
 8002d60:	f7ff fc1c 	bl	800259c <__swsetup_r>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d017      	beq.n	8002d98 <_vfiprintf_r+0x7c>
 8002d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d6a:	07db      	lsls	r3, r3, #31
 8002d6c:	d50d      	bpl.n	8002d8a <_vfiprintf_r+0x6e>
 8002d6e:	2001      	movs	r0, #1
 8002d70:	4240      	negs	r0, r0
 8002d72:	b021      	add	sp, #132	; 0x84
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <_vfiprintf_r+0x258>)
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	d101      	bne.n	8002d80 <_vfiprintf_r+0x64>
 8002d7c:	68b4      	ldr	r4, [r6, #8]
 8002d7e:	e7de      	b.n	8002d3e <_vfiprintf_r+0x22>
 8002d80:	4b7d      	ldr	r3, [pc, #500]	; (8002f78 <_vfiprintf_r+0x25c>)
 8002d82:	429c      	cmp	r4, r3
 8002d84:	d1db      	bne.n	8002d3e <_vfiprintf_r+0x22>
 8002d86:	68f4      	ldr	r4, [r6, #12]
 8002d88:	e7d9      	b.n	8002d3e <_vfiprintf_r+0x22>
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	059b      	lsls	r3, r3, #22
 8002d8e:	d4ee      	bmi.n	8002d6e <_vfiprintf_r+0x52>
 8002d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d92:	f7ff fe4b 	bl	8002a2c <__retarget_lock_release_recursive>
 8002d96:	e7ea      	b.n	8002d6e <_vfiprintf_r+0x52>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	ad08      	add	r5, sp, #32
 8002d9c:	616b      	str	r3, [r5, #20]
 8002d9e:	3320      	adds	r3, #32
 8002da0:	766b      	strb	r3, [r5, #25]
 8002da2:	3310      	adds	r3, #16
 8002da4:	76ab      	strb	r3, [r5, #26]
 8002da6:	9707      	str	r7, [sp, #28]
 8002da8:	9f03      	ldr	r7, [sp, #12]
 8002daa:	783b      	ldrb	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <_vfiprintf_r+0x98>
 8002db0:	2b25      	cmp	r3, #37	; 0x25
 8002db2:	d14e      	bne.n	8002e52 <_vfiprintf_r+0x136>
 8002db4:	9b03      	ldr	r3, [sp, #12]
 8002db6:	1afb      	subs	r3, r7, r3
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	9b03      	ldr	r3, [sp, #12]
 8002dbc:	429f      	cmp	r7, r3
 8002dbe:	d00d      	beq.n	8002ddc <_vfiprintf_r+0xc0>
 8002dc0:	9b05      	ldr	r3, [sp, #20]
 8002dc2:	0021      	movs	r1, r4
 8002dc4:	0030      	movs	r0, r6
 8002dc6:	9a03      	ldr	r2, [sp, #12]
 8002dc8:	f7ff ff95 	bl	8002cf6 <__sfputs_r>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d100      	bne.n	8002dd2 <_vfiprintf_r+0xb6>
 8002dd0:	e0b5      	b.n	8002f3e <_vfiprintf_r+0x222>
 8002dd2:	696a      	ldr	r2, [r5, #20]
 8002dd4:	9b05      	ldr	r3, [sp, #20]
 8002dd6:	4694      	mov	ip, r2
 8002dd8:	4463      	add	r3, ip
 8002dda:	616b      	str	r3, [r5, #20]
 8002ddc:	783b      	ldrb	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d100      	bne.n	8002de4 <_vfiprintf_r+0xc8>
 8002de2:	e0ac      	b.n	8002f3e <_vfiprintf_r+0x222>
 8002de4:	2201      	movs	r2, #1
 8002de6:	1c7b      	adds	r3, r7, #1
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	4252      	negs	r2, r2
 8002dee:	606a      	str	r2, [r5, #4]
 8002df0:	a904      	add	r1, sp, #16
 8002df2:	3254      	adds	r2, #84	; 0x54
 8002df4:	1852      	adds	r2, r2, r1
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	60eb      	str	r3, [r5, #12]
 8002dfa:	60ab      	str	r3, [r5, #8]
 8002dfc:	7013      	strb	r3, [r2, #0]
 8002dfe:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e00:	9b03      	ldr	r3, [sp, #12]
 8002e02:	2205      	movs	r2, #5
 8002e04:	7819      	ldrb	r1, [r3, #0]
 8002e06:	485d      	ldr	r0, [pc, #372]	; (8002f7c <_vfiprintf_r+0x260>)
 8002e08:	f000 fb00 	bl	800340c <memchr>
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	1c5f      	adds	r7, r3, #1
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d120      	bne.n	8002e56 <_vfiprintf_r+0x13a>
 8002e14:	682a      	ldr	r2, [r5, #0]
 8002e16:	06d3      	lsls	r3, r2, #27
 8002e18:	d504      	bpl.n	8002e24 <_vfiprintf_r+0x108>
 8002e1a:	2353      	movs	r3, #83	; 0x53
 8002e1c:	a904      	add	r1, sp, #16
 8002e1e:	185b      	adds	r3, r3, r1
 8002e20:	2120      	movs	r1, #32
 8002e22:	7019      	strb	r1, [r3, #0]
 8002e24:	0713      	lsls	r3, r2, #28
 8002e26:	d504      	bpl.n	8002e32 <_vfiprintf_r+0x116>
 8002e28:	2353      	movs	r3, #83	; 0x53
 8002e2a:	a904      	add	r1, sp, #16
 8002e2c:	185b      	adds	r3, r3, r1
 8002e2e:	212b      	movs	r1, #43	; 0x2b
 8002e30:	7019      	strb	r1, [r3, #0]
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b2a      	cmp	r3, #42	; 0x2a
 8002e38:	d016      	beq.n	8002e68 <_vfiprintf_r+0x14c>
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	68eb      	ldr	r3, [r5, #12]
 8002e3e:	9f03      	ldr	r7, [sp, #12]
 8002e40:	783a      	ldrb	r2, [r7, #0]
 8002e42:	1c78      	adds	r0, r7, #1
 8002e44:	3a30      	subs	r2, #48	; 0x30
 8002e46:	4684      	mov	ip, r0
 8002e48:	2a09      	cmp	r2, #9
 8002e4a:	d94f      	bls.n	8002eec <_vfiprintf_r+0x1d0>
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d111      	bne.n	8002e74 <_vfiprintf_r+0x158>
 8002e50:	e017      	b.n	8002e82 <_vfiprintf_r+0x166>
 8002e52:	3701      	adds	r7, #1
 8002e54:	e7a9      	b.n	8002daa <_vfiprintf_r+0x8e>
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <_vfiprintf_r+0x260>)
 8002e58:	682a      	ldr	r2, [r5, #0]
 8002e5a:	1ac0      	subs	r0, r0, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4083      	lsls	r3, r0
 8002e60:	4313      	orrs	r3, r2
 8002e62:	602b      	str	r3, [r5, #0]
 8002e64:	9703      	str	r7, [sp, #12]
 8002e66:	e7cb      	b.n	8002e00 <_vfiprintf_r+0xe4>
 8002e68:	9b07      	ldr	r3, [sp, #28]
 8002e6a:	1d19      	adds	r1, r3, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	9107      	str	r1, [sp, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db01      	blt.n	8002e78 <_vfiprintf_r+0x15c>
 8002e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e76:	e004      	b.n	8002e82 <_vfiprintf_r+0x166>
 8002e78:	425b      	negs	r3, r3
 8002e7a:	60eb      	str	r3, [r5, #12]
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	783b      	ldrb	r3, [r7, #0]
 8002e84:	2b2e      	cmp	r3, #46	; 0x2e
 8002e86:	d10a      	bne.n	8002e9e <_vfiprintf_r+0x182>
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e8c:	d137      	bne.n	8002efe <_vfiprintf_r+0x1e2>
 8002e8e:	9b07      	ldr	r3, [sp, #28]
 8002e90:	3702      	adds	r7, #2
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	9207      	str	r2, [sp, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db2d      	blt.n	8002ef8 <_vfiprintf_r+0x1dc>
 8002e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	7839      	ldrb	r1, [r7, #0]
 8002ea2:	4837      	ldr	r0, [pc, #220]	; (8002f80 <_vfiprintf_r+0x264>)
 8002ea4:	f000 fab2 	bl	800340c <memchr>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d007      	beq.n	8002ebc <_vfiprintf_r+0x1a0>
 8002eac:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <_vfiprintf_r+0x264>)
 8002eae:	682a      	ldr	r2, [r5, #0]
 8002eb0:	1ac0      	subs	r0, r0, r3
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	4083      	lsls	r3, r0
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	3701      	adds	r7, #1
 8002eba:	602b      	str	r3, [r5, #0]
 8002ebc:	7839      	ldrb	r1, [r7, #0]
 8002ebe:	1c7b      	adds	r3, r7, #1
 8002ec0:	2206      	movs	r2, #6
 8002ec2:	4830      	ldr	r0, [pc, #192]	; (8002f84 <_vfiprintf_r+0x268>)
 8002ec4:	9303      	str	r3, [sp, #12]
 8002ec6:	7629      	strb	r1, [r5, #24]
 8002ec8:	f000 faa0 	bl	800340c <memchr>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d045      	beq.n	8002f5c <_vfiprintf_r+0x240>
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <_vfiprintf_r+0x26c>)
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d127      	bne.n	8002f26 <_vfiprintf_r+0x20a>
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	9b07      	ldr	r3, [sp, #28]
 8002eda:	3307      	adds	r3, #7
 8002edc:	4393      	bics	r3, r2
 8002ede:	3308      	adds	r3, #8
 8002ee0:	9307      	str	r3, [sp, #28]
 8002ee2:	696b      	ldr	r3, [r5, #20]
 8002ee4:	9a04      	ldr	r2, [sp, #16]
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	616b      	str	r3, [r5, #20]
 8002eea:	e75d      	b.n	8002da8 <_vfiprintf_r+0x8c>
 8002eec:	210a      	movs	r1, #10
 8002eee:	434b      	muls	r3, r1
 8002ef0:	4667      	mov	r7, ip
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	3909      	subs	r1, #9
 8002ef6:	e7a3      	b.n	8002e40 <_vfiprintf_r+0x124>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	425b      	negs	r3, r3
 8002efc:	e7ce      	b.n	8002e9c <_vfiprintf_r+0x180>
 8002efe:	2300      	movs	r3, #0
 8002f00:	001a      	movs	r2, r3
 8002f02:	3701      	adds	r7, #1
 8002f04:	606b      	str	r3, [r5, #4]
 8002f06:	7839      	ldrb	r1, [r7, #0]
 8002f08:	1c78      	adds	r0, r7, #1
 8002f0a:	3930      	subs	r1, #48	; 0x30
 8002f0c:	4684      	mov	ip, r0
 8002f0e:	2909      	cmp	r1, #9
 8002f10:	d903      	bls.n	8002f1a <_vfiprintf_r+0x1fe>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0c3      	beq.n	8002e9e <_vfiprintf_r+0x182>
 8002f16:	9209      	str	r2, [sp, #36]	; 0x24
 8002f18:	e7c1      	b.n	8002e9e <_vfiprintf_r+0x182>
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	435a      	muls	r2, r3
 8002f1e:	4667      	mov	r7, ip
 8002f20:	1852      	adds	r2, r2, r1
 8002f22:	3b09      	subs	r3, #9
 8002f24:	e7ef      	b.n	8002f06 <_vfiprintf_r+0x1ea>
 8002f26:	ab07      	add	r3, sp, #28
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	0022      	movs	r2, r4
 8002f2c:	0029      	movs	r1, r5
 8002f2e:	0030      	movs	r0, r6
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <_vfiprintf_r+0x270>)
 8002f32:	e000      	b.n	8002f36 <_vfiprintf_r+0x21a>
 8002f34:	bf00      	nop
 8002f36:	9004      	str	r0, [sp, #16]
 8002f38:	9b04      	ldr	r3, [sp, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	d1d1      	bne.n	8002ee2 <_vfiprintf_r+0x1c6>
 8002f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f40:	07db      	lsls	r3, r3, #31
 8002f42:	d405      	bmi.n	8002f50 <_vfiprintf_r+0x234>
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	059b      	lsls	r3, r3, #22
 8002f48:	d402      	bmi.n	8002f50 <_vfiprintf_r+0x234>
 8002f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f4c:	f7ff fd6e 	bl	8002a2c <__retarget_lock_release_recursive>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	065b      	lsls	r3, r3, #25
 8002f54:	d500      	bpl.n	8002f58 <_vfiprintf_r+0x23c>
 8002f56:	e70a      	b.n	8002d6e <_vfiprintf_r+0x52>
 8002f58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f5a:	e70a      	b.n	8002d72 <_vfiprintf_r+0x56>
 8002f5c:	ab07      	add	r3, sp, #28
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	0022      	movs	r2, r4
 8002f62:	0029      	movs	r1, r5
 8002f64:	0030      	movs	r0, r6
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <_vfiprintf_r+0x270>)
 8002f68:	f000 f882 	bl	8003070 <_printf_i>
 8002f6c:	e7e3      	b.n	8002f36 <_vfiprintf_r+0x21a>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	080035c8 	.word	0x080035c8
 8002f74:	080035e8 	.word	0x080035e8
 8002f78:	080035a8 	.word	0x080035a8
 8002f7c:	08003608 	.word	0x08003608
 8002f80:	0800360e 	.word	0x0800360e
 8002f84:	08003612 	.word	0x08003612
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	08002cf7 	.word	0x08002cf7

08002f90 <_printf_common>:
 8002f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f92:	0015      	movs	r5, r2
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	688a      	ldr	r2, [r1, #8]
 8002f98:	690b      	ldr	r3, [r1, #16]
 8002f9a:	000c      	movs	r4, r1
 8002f9c:	9000      	str	r0, [sp, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	da00      	bge.n	8002fa4 <_printf_common+0x14>
 8002fa2:	0013      	movs	r3, r2
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	602b      	str	r3, [r5, #0]
 8002fa8:	3243      	adds	r2, #67	; 0x43
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d001      	beq.n	8002fb4 <_printf_common+0x24>
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	069b      	lsls	r3, r3, #26
 8002fb8:	d502      	bpl.n	8002fc0 <_printf_common+0x30>
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	602b      	str	r3, [r5, #0]
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	0017      	movs	r7, r2
 8002fc6:	401f      	ands	r7, r3
 8002fc8:	421a      	tst	r2, r3
 8002fca:	d027      	beq.n	800301c <_printf_common+0x8c>
 8002fcc:	0023      	movs	r3, r4
 8002fce:	3343      	adds	r3, #67	; 0x43
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	0692      	lsls	r2, r2, #26
 8002fda:	d430      	bmi.n	800303e <_printf_common+0xae>
 8002fdc:	0022      	movs	r2, r4
 8002fde:	9901      	ldr	r1, [sp, #4]
 8002fe0:	9800      	ldr	r0, [sp, #0]
 8002fe2:	9e08      	ldr	r6, [sp, #32]
 8002fe4:	3243      	adds	r2, #67	; 0x43
 8002fe6:	47b0      	blx	r6
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d025      	beq.n	8003038 <_printf_common+0xa8>
 8002fec:	2306      	movs	r3, #6
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	682a      	ldr	r2, [r5, #0]
 8002ff2:	68e1      	ldr	r1, [r4, #12]
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	4003      	ands	r3, r0
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d103      	bne.n	8003004 <_printf_common+0x74>
 8002ffc:	1a8d      	subs	r5, r1, r2
 8002ffe:	43eb      	mvns	r3, r5
 8003000:	17db      	asrs	r3, r3, #31
 8003002:	401d      	ands	r5, r3
 8003004:	68a3      	ldr	r3, [r4, #8]
 8003006:	6922      	ldr	r2, [r4, #16]
 8003008:	4293      	cmp	r3, r2
 800300a:	dd01      	ble.n	8003010 <_printf_common+0x80>
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	18ed      	adds	r5, r5, r3
 8003010:	2700      	movs	r7, #0
 8003012:	42bd      	cmp	r5, r7
 8003014:	d120      	bne.n	8003058 <_printf_common+0xc8>
 8003016:	2000      	movs	r0, #0
 8003018:	e010      	b.n	800303c <_printf_common+0xac>
 800301a:	3701      	adds	r7, #1
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	682a      	ldr	r2, [r5, #0]
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	42bb      	cmp	r3, r7
 8003024:	ddd2      	ble.n	8002fcc <_printf_common+0x3c>
 8003026:	0022      	movs	r2, r4
 8003028:	2301      	movs	r3, #1
 800302a:	9901      	ldr	r1, [sp, #4]
 800302c:	9800      	ldr	r0, [sp, #0]
 800302e:	9e08      	ldr	r6, [sp, #32]
 8003030:	3219      	adds	r2, #25
 8003032:	47b0      	blx	r6
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d1f0      	bne.n	800301a <_printf_common+0x8a>
 8003038:	2001      	movs	r0, #1
 800303a:	4240      	negs	r0, r0
 800303c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800303e:	2030      	movs	r0, #48	; 0x30
 8003040:	18e1      	adds	r1, r4, r3
 8003042:	3143      	adds	r1, #67	; 0x43
 8003044:	7008      	strb	r0, [r1, #0]
 8003046:	0021      	movs	r1, r4
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	3145      	adds	r1, #69	; 0x45
 800304c:	7809      	ldrb	r1, [r1, #0]
 800304e:	18a2      	adds	r2, r4, r2
 8003050:	3243      	adds	r2, #67	; 0x43
 8003052:	3302      	adds	r3, #2
 8003054:	7011      	strb	r1, [r2, #0]
 8003056:	e7c1      	b.n	8002fdc <_printf_common+0x4c>
 8003058:	0022      	movs	r2, r4
 800305a:	2301      	movs	r3, #1
 800305c:	9901      	ldr	r1, [sp, #4]
 800305e:	9800      	ldr	r0, [sp, #0]
 8003060:	9e08      	ldr	r6, [sp, #32]
 8003062:	321a      	adds	r2, #26
 8003064:	47b0      	blx	r6
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	d0e6      	beq.n	8003038 <_printf_common+0xa8>
 800306a:	3701      	adds	r7, #1
 800306c:	e7d1      	b.n	8003012 <_printf_common+0x82>
	...

08003070 <_printf_i>:
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	9206      	str	r2, [sp, #24]
 8003076:	000a      	movs	r2, r1
 8003078:	3243      	adds	r2, #67	; 0x43
 800307a:	9307      	str	r3, [sp, #28]
 800307c:	9005      	str	r0, [sp, #20]
 800307e:	9204      	str	r2, [sp, #16]
 8003080:	7e0a      	ldrb	r2, [r1, #24]
 8003082:	000c      	movs	r4, r1
 8003084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003086:	2a78      	cmp	r2, #120	; 0x78
 8003088:	d807      	bhi.n	800309a <_printf_i+0x2a>
 800308a:	2a62      	cmp	r2, #98	; 0x62
 800308c:	d809      	bhi.n	80030a2 <_printf_i+0x32>
 800308e:	2a00      	cmp	r2, #0
 8003090:	d100      	bne.n	8003094 <_printf_i+0x24>
 8003092:	e0c1      	b.n	8003218 <_printf_i+0x1a8>
 8003094:	2a58      	cmp	r2, #88	; 0x58
 8003096:	d100      	bne.n	800309a <_printf_i+0x2a>
 8003098:	e08c      	b.n	80031b4 <_printf_i+0x144>
 800309a:	0026      	movs	r6, r4
 800309c:	3642      	adds	r6, #66	; 0x42
 800309e:	7032      	strb	r2, [r6, #0]
 80030a0:	e022      	b.n	80030e8 <_printf_i+0x78>
 80030a2:	0010      	movs	r0, r2
 80030a4:	3863      	subs	r0, #99	; 0x63
 80030a6:	2815      	cmp	r0, #21
 80030a8:	d8f7      	bhi.n	800309a <_printf_i+0x2a>
 80030aa:	f7fd f82d 	bl	8000108 <__gnu_thumb1_case_shi>
 80030ae:	0016      	.short	0x0016
 80030b0:	fff6001f 	.word	0xfff6001f
 80030b4:	fff6fff6 	.word	0xfff6fff6
 80030b8:	001ffff6 	.word	0x001ffff6
 80030bc:	fff6fff6 	.word	0xfff6fff6
 80030c0:	fff6fff6 	.word	0xfff6fff6
 80030c4:	003600a8 	.word	0x003600a8
 80030c8:	fff6009a 	.word	0xfff6009a
 80030cc:	00b9fff6 	.word	0x00b9fff6
 80030d0:	0036fff6 	.word	0x0036fff6
 80030d4:	fff6fff6 	.word	0xfff6fff6
 80030d8:	009e      	.short	0x009e
 80030da:	0026      	movs	r6, r4
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	3642      	adds	r6, #66	; 0x42
 80030e0:	1d11      	adds	r1, r2, #4
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	7033      	strb	r3, [r6, #0]
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0a7      	b.n	800323c <_printf_i+0x1cc>
 80030ec:	6808      	ldr	r0, [r1, #0]
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	1d0a      	adds	r2, r1, #4
 80030f2:	0605      	lsls	r5, r0, #24
 80030f4:	d50b      	bpl.n	800310e <_printf_i+0x9e>
 80030f6:	680d      	ldr	r5, [r1, #0]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	da03      	bge.n	8003106 <_printf_i+0x96>
 80030fe:	232d      	movs	r3, #45	; 0x2d
 8003100:	9a04      	ldr	r2, [sp, #16]
 8003102:	426d      	negs	r5, r5
 8003104:	7013      	strb	r3, [r2, #0]
 8003106:	4b61      	ldr	r3, [pc, #388]	; (800328c <_printf_i+0x21c>)
 8003108:	270a      	movs	r7, #10
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	e01b      	b.n	8003146 <_printf_i+0xd6>
 800310e:	680d      	ldr	r5, [r1, #0]
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	0641      	lsls	r1, r0, #25
 8003114:	d5f1      	bpl.n	80030fa <_printf_i+0x8a>
 8003116:	b22d      	sxth	r5, r5
 8003118:	e7ef      	b.n	80030fa <_printf_i+0x8a>
 800311a:	680d      	ldr	r5, [r1, #0]
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	1d08      	adds	r0, r1, #4
 8003120:	6018      	str	r0, [r3, #0]
 8003122:	062e      	lsls	r6, r5, #24
 8003124:	d501      	bpl.n	800312a <_printf_i+0xba>
 8003126:	680d      	ldr	r5, [r1, #0]
 8003128:	e003      	b.n	8003132 <_printf_i+0xc2>
 800312a:	066d      	lsls	r5, r5, #25
 800312c:	d5fb      	bpl.n	8003126 <_printf_i+0xb6>
 800312e:	680d      	ldr	r5, [r1, #0]
 8003130:	b2ad      	uxth	r5, r5
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <_printf_i+0x21c>)
 8003134:	2708      	movs	r7, #8
 8003136:	9303      	str	r3, [sp, #12]
 8003138:	2a6f      	cmp	r2, #111	; 0x6f
 800313a:	d000      	beq.n	800313e <_printf_i+0xce>
 800313c:	3702      	adds	r7, #2
 800313e:	0023      	movs	r3, r4
 8003140:	2200      	movs	r2, #0
 8003142:	3343      	adds	r3, #67	; 0x43
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	6863      	ldr	r3, [r4, #4]
 8003148:	60a3      	str	r3, [r4, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db03      	blt.n	8003156 <_printf_i+0xe6>
 800314e:	2204      	movs	r2, #4
 8003150:	6821      	ldr	r1, [r4, #0]
 8003152:	4391      	bics	r1, r2
 8003154:	6021      	str	r1, [r4, #0]
 8003156:	2d00      	cmp	r5, #0
 8003158:	d102      	bne.n	8003160 <_printf_i+0xf0>
 800315a:	9e04      	ldr	r6, [sp, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <_printf_i+0x10a>
 8003160:	9e04      	ldr	r6, [sp, #16]
 8003162:	0028      	movs	r0, r5
 8003164:	0039      	movs	r1, r7
 8003166:	f7fd f85f 	bl	8000228 <__aeabi_uidivmod>
 800316a:	9b03      	ldr	r3, [sp, #12]
 800316c:	3e01      	subs	r6, #1
 800316e:	5c5b      	ldrb	r3, [r3, r1]
 8003170:	7033      	strb	r3, [r6, #0]
 8003172:	002b      	movs	r3, r5
 8003174:	0005      	movs	r5, r0
 8003176:	429f      	cmp	r7, r3
 8003178:	d9f3      	bls.n	8003162 <_printf_i+0xf2>
 800317a:	2f08      	cmp	r7, #8
 800317c:	d109      	bne.n	8003192 <_printf_i+0x122>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07db      	lsls	r3, r3, #31
 8003182:	d506      	bpl.n	8003192 <_printf_i+0x122>
 8003184:	6863      	ldr	r3, [r4, #4]
 8003186:	6922      	ldr	r2, [r4, #16]
 8003188:	4293      	cmp	r3, r2
 800318a:	dc02      	bgt.n	8003192 <_printf_i+0x122>
 800318c:	2330      	movs	r3, #48	; 0x30
 800318e:	3e01      	subs	r6, #1
 8003190:	7033      	strb	r3, [r6, #0]
 8003192:	9b04      	ldr	r3, [sp, #16]
 8003194:	1b9b      	subs	r3, r3, r6
 8003196:	6123      	str	r3, [r4, #16]
 8003198:	9b07      	ldr	r3, [sp, #28]
 800319a:	0021      	movs	r1, r4
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	9805      	ldr	r0, [sp, #20]
 80031a0:	9b06      	ldr	r3, [sp, #24]
 80031a2:	aa09      	add	r2, sp, #36	; 0x24
 80031a4:	f7ff fef4 	bl	8002f90 <_printf_common>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d14c      	bne.n	8003246 <_printf_i+0x1d6>
 80031ac:	2001      	movs	r0, #1
 80031ae:	4240      	negs	r0, r0
 80031b0:	b00b      	add	sp, #44	; 0x2c
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b4:	3145      	adds	r1, #69	; 0x45
 80031b6:	700a      	strb	r2, [r1, #0]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <_printf_i+0x21c>)
 80031ba:	9203      	str	r2, [sp, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	6821      	ldr	r1, [r4, #0]
 80031c0:	ca20      	ldmia	r2!, {r5}
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	0608      	lsls	r0, r1, #24
 80031c6:	d516      	bpl.n	80031f6 <_printf_i+0x186>
 80031c8:	07cb      	lsls	r3, r1, #31
 80031ca:	d502      	bpl.n	80031d2 <_printf_i+0x162>
 80031cc:	2320      	movs	r3, #32
 80031ce:	4319      	orrs	r1, r3
 80031d0:	6021      	str	r1, [r4, #0]
 80031d2:	2710      	movs	r7, #16
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	d1b2      	bne.n	800313e <_printf_i+0xce>
 80031d8:	2320      	movs	r3, #32
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	439a      	bics	r2, r3
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	e7ad      	b.n	800313e <_printf_i+0xce>
 80031e2:	2220      	movs	r2, #32
 80031e4:	6809      	ldr	r1, [r1, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	6022      	str	r2, [r4, #0]
 80031ea:	0022      	movs	r2, r4
 80031ec:	2178      	movs	r1, #120	; 0x78
 80031ee:	3245      	adds	r2, #69	; 0x45
 80031f0:	7011      	strb	r1, [r2, #0]
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <_printf_i+0x220>)
 80031f4:	e7e1      	b.n	80031ba <_printf_i+0x14a>
 80031f6:	0648      	lsls	r0, r1, #25
 80031f8:	d5e6      	bpl.n	80031c8 <_printf_i+0x158>
 80031fa:	b2ad      	uxth	r5, r5
 80031fc:	e7e4      	b.n	80031c8 <_printf_i+0x158>
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	680d      	ldr	r5, [r1, #0]
 8003202:	1d10      	adds	r0, r2, #4
 8003204:	6949      	ldr	r1, [r1, #20]
 8003206:	6018      	str	r0, [r3, #0]
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	062e      	lsls	r6, r5, #24
 800320c:	d501      	bpl.n	8003212 <_printf_i+0x1a2>
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e002      	b.n	8003218 <_printf_i+0x1a8>
 8003212:	066d      	lsls	r5, r5, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0x19e>
 8003216:	8019      	strh	r1, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	9e04      	ldr	r6, [sp, #16]
 800321c:	6123      	str	r3, [r4, #16]
 800321e:	e7bb      	b.n	8003198 <_printf_i+0x128>
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	1d11      	adds	r1, r2, #4
 8003224:	6019      	str	r1, [r3, #0]
 8003226:	6816      	ldr	r6, [r2, #0]
 8003228:	2100      	movs	r1, #0
 800322a:	0030      	movs	r0, r6
 800322c:	6862      	ldr	r2, [r4, #4]
 800322e:	f000 f8ed 	bl	800340c <memchr>
 8003232:	2800      	cmp	r0, #0
 8003234:	d001      	beq.n	800323a <_printf_i+0x1ca>
 8003236:	1b80      	subs	r0, r0, r6
 8003238:	6060      	str	r0, [r4, #4]
 800323a:	6863      	ldr	r3, [r4, #4]
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	2300      	movs	r3, #0
 8003240:	9a04      	ldr	r2, [sp, #16]
 8003242:	7013      	strb	r3, [r2, #0]
 8003244:	e7a8      	b.n	8003198 <_printf_i+0x128>
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	0032      	movs	r2, r6
 800324a:	9906      	ldr	r1, [sp, #24]
 800324c:	9805      	ldr	r0, [sp, #20]
 800324e:	9d07      	ldr	r5, [sp, #28]
 8003250:	47a8      	blx	r5
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	d0aa      	beq.n	80031ac <_printf_i+0x13c>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	079b      	lsls	r3, r3, #30
 800325a:	d415      	bmi.n	8003288 <_printf_i+0x218>
 800325c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800325e:	68e0      	ldr	r0, [r4, #12]
 8003260:	4298      	cmp	r0, r3
 8003262:	daa5      	bge.n	80031b0 <_printf_i+0x140>
 8003264:	0018      	movs	r0, r3
 8003266:	e7a3      	b.n	80031b0 <_printf_i+0x140>
 8003268:	0022      	movs	r2, r4
 800326a:	2301      	movs	r3, #1
 800326c:	9906      	ldr	r1, [sp, #24]
 800326e:	9805      	ldr	r0, [sp, #20]
 8003270:	9e07      	ldr	r6, [sp, #28]
 8003272:	3219      	adds	r2, #25
 8003274:	47b0      	blx	r6
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d098      	beq.n	80031ac <_printf_i+0x13c>
 800327a:	3501      	adds	r5, #1
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	42ab      	cmp	r3, r5
 8003284:	dcf0      	bgt.n	8003268 <_printf_i+0x1f8>
 8003286:	e7e9      	b.n	800325c <_printf_i+0x1ec>
 8003288:	2500      	movs	r5, #0
 800328a:	e7f7      	b.n	800327c <_printf_i+0x20c>
 800328c:	08003619 	.word	0x08003619
 8003290:	0800362a 	.word	0x0800362a

08003294 <_sbrk_r>:
 8003294:	2300      	movs	r3, #0
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	4d06      	ldr	r5, [pc, #24]	; (80032b4 <_sbrk_r+0x20>)
 800329a:	0004      	movs	r4, r0
 800329c:	0008      	movs	r0, r1
 800329e:	602b      	str	r3, [r5, #0]
 80032a0:	f7fe fe72 	bl	8001f88 <_sbrk>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d103      	bne.n	80032b0 <_sbrk_r+0x1c>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d000      	beq.n	80032b0 <_sbrk_r+0x1c>
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	200000b0 	.word	0x200000b0

080032b8 <__sread>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	000c      	movs	r4, r1
 80032bc:	250e      	movs	r5, #14
 80032be:	5f49      	ldrsh	r1, [r1, r5]
 80032c0:	f000 f8c0 	bl	8003444 <_read_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	db03      	blt.n	80032d0 <__sread+0x18>
 80032c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032ca:	181b      	adds	r3, r3, r0
 80032cc:	6563      	str	r3, [r4, #84]	; 0x54
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	4a02      	ldr	r2, [pc, #8]	; (80032dc <__sread+0x24>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	e7f9      	b.n	80032ce <__sread+0x16>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	ffffefff 	.word	0xffffefff

080032e0 <__swrite>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	001f      	movs	r7, r3
 80032e4:	898b      	ldrh	r3, [r1, #12]
 80032e6:	0005      	movs	r5, r0
 80032e8:	000c      	movs	r4, r1
 80032ea:	0016      	movs	r6, r2
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	d505      	bpl.n	80032fc <__swrite+0x1c>
 80032f0:	230e      	movs	r3, #14
 80032f2:	5ec9      	ldrsh	r1, [r1, r3]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2302      	movs	r3, #2
 80032f8:	f000 f874 	bl	80033e4 <_lseek_r>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <__swrite+0x34>)
 8003300:	0028      	movs	r0, r5
 8003302:	4013      	ands	r3, r2
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	0032      	movs	r2, r6
 8003308:	230e      	movs	r3, #14
 800330a:	5ee1      	ldrsh	r1, [r4, r3]
 800330c:	003b      	movs	r3, r7
 800330e:	f000 f81f 	bl	8003350 <_write_r>
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003314:	ffffefff 	.word	0xffffefff

08003318 <__sseek>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	000c      	movs	r4, r1
 800331c:	250e      	movs	r5, #14
 800331e:	5f49      	ldrsh	r1, [r1, r5]
 8003320:	f000 f860 	bl	80033e4 <_lseek_r>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	1c42      	adds	r2, r0, #1
 8003328:	d103      	bne.n	8003332 <__sseek+0x1a>
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <__sseek+0x28>)
 800332c:	4013      	ands	r3, r2
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	bd70      	pop	{r4, r5, r6, pc}
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	0152      	lsls	r2, r2, #5
 8003336:	4313      	orrs	r3, r2
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	6560      	str	r0, [r4, #84]	; 0x54
 800333c:	e7f8      	b.n	8003330 <__sseek+0x18>
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	ffffefff 	.word	0xffffefff

08003344 <__sclose>:
 8003344:	b510      	push	{r4, lr}
 8003346:	230e      	movs	r3, #14
 8003348:	5ec9      	ldrsh	r1, [r1, r3]
 800334a:	f000 f815 	bl	8003378 <_close_r>
 800334e:	bd10      	pop	{r4, pc}

08003350 <_write_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	0004      	movs	r4, r0
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	001a      	movs	r2, r3
 800335a:	2300      	movs	r3, #0
 800335c:	4d05      	ldr	r5, [pc, #20]	; (8003374 <_write_r+0x24>)
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	f7fe fd06 	bl	8001d70 <_write>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d103      	bne.n	8003370 <_write_r+0x20>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d000      	beq.n	8003370 <_write_r+0x20>
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	200000b0 	.word	0x200000b0

08003378 <_close_r>:
 8003378:	2300      	movs	r3, #0
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	4d06      	ldr	r5, [pc, #24]	; (8003398 <_close_r+0x20>)
 800337e:	0004      	movs	r4, r0
 8003380:	0008      	movs	r0, r1
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	f7fe fdd3 	bl	8001f2e <_close>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d103      	bne.n	8003394 <_close_r+0x1c>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d000      	beq.n	8003394 <_close_r+0x1c>
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	bd70      	pop	{r4, r5, r6, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	200000b0 	.word	0x200000b0

0800339c <_fstat_r>:
 800339c:	2300      	movs	r3, #0
 800339e:	b570      	push	{r4, r5, r6, lr}
 80033a0:	4d06      	ldr	r5, [pc, #24]	; (80033bc <_fstat_r+0x20>)
 80033a2:	0004      	movs	r4, r0
 80033a4:	0008      	movs	r0, r1
 80033a6:	0011      	movs	r1, r2
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	f7fe fdca 	bl	8001f42 <_fstat>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d103      	bne.n	80033ba <_fstat_r+0x1e>
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d000      	beq.n	80033ba <_fstat_r+0x1e>
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	200000b0 	.word	0x200000b0

080033c0 <_isatty_r>:
 80033c0:	2300      	movs	r3, #0
 80033c2:	b570      	push	{r4, r5, r6, lr}
 80033c4:	4d06      	ldr	r5, [pc, #24]	; (80033e0 <_isatty_r+0x20>)
 80033c6:	0004      	movs	r4, r0
 80033c8:	0008      	movs	r0, r1
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	f7fe fdc7 	bl	8001f5e <_isatty>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d103      	bne.n	80033dc <_isatty_r+0x1c>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d000      	beq.n	80033dc <_isatty_r+0x1c>
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	200000b0 	.word	0x200000b0

080033e4 <_lseek_r>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	0004      	movs	r4, r0
 80033e8:	0008      	movs	r0, r1
 80033ea:	0011      	movs	r1, r2
 80033ec:	001a      	movs	r2, r3
 80033ee:	2300      	movs	r3, #0
 80033f0:	4d05      	ldr	r5, [pc, #20]	; (8003408 <_lseek_r+0x24>)
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	f7fe fdbc 	bl	8001f70 <_lseek>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d103      	bne.n	8003404 <_lseek_r+0x20>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d000      	beq.n	8003404 <_lseek_r+0x20>
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	bd70      	pop	{r4, r5, r6, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	200000b0 	.word	0x200000b0

0800340c <memchr>:
 800340c:	b2c9      	uxtb	r1, r1
 800340e:	1882      	adds	r2, r0, r2
 8003410:	4290      	cmp	r0, r2
 8003412:	d101      	bne.n	8003418 <memchr+0xc>
 8003414:	2000      	movs	r0, #0
 8003416:	4770      	bx	lr
 8003418:	7803      	ldrb	r3, [r0, #0]
 800341a:	428b      	cmp	r3, r1
 800341c:	d0fb      	beq.n	8003416 <memchr+0xa>
 800341e:	3001      	adds	r0, #1
 8003420:	e7f6      	b.n	8003410 <memchr+0x4>
	...

08003424 <__malloc_lock>:
 8003424:	b510      	push	{r4, lr}
 8003426:	4802      	ldr	r0, [pc, #8]	; (8003430 <__malloc_lock+0xc>)
 8003428:	f7ff faff 	bl	8002a2a <__retarget_lock_acquire_recursive>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	200000a4 	.word	0x200000a4

08003434 <__malloc_unlock>:
 8003434:	b510      	push	{r4, lr}
 8003436:	4802      	ldr	r0, [pc, #8]	; (8003440 <__malloc_unlock+0xc>)
 8003438:	f7ff faf8 	bl	8002a2c <__retarget_lock_release_recursive>
 800343c:	bd10      	pop	{r4, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	200000a4 	.word	0x200000a4

08003444 <_read_r>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	0004      	movs	r4, r0
 8003448:	0008      	movs	r0, r1
 800344a:	0011      	movs	r1, r2
 800344c:	001a      	movs	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	4d05      	ldr	r5, [pc, #20]	; (8003468 <_read_r+0x24>)
 8003452:	602b      	str	r3, [r5, #0]
 8003454:	f7fe fd4e 	bl	8001ef4 <_read>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d103      	bne.n	8003464 <_read_r+0x20>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d000      	beq.n	8003464 <_read_r+0x20>
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	bd70      	pop	{r4, r5, r6, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	200000b0 	.word	0x200000b0

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
