
STM32_uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003b34  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003b34  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d63  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001960  00000000  00000000  00025df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00027758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00027fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010225  00000000  00000000  00028730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d1e  00000000  00000000  00038955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052758  00000000  00000000  0003f673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  00091e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037e8 	.word	0x080037e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080037e8 	.word	0x080037e8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	2201      	movs	r2, #1
 800043a:	4013      	ands	r3, r2
 800043c:	3b01      	subs	r3, #1
 800043e:	425a      	negs	r2, r3
 8000440:	4153      	adcs	r3, r2
 8000442:	b2db      	uxtb	r3, r3
}
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}

0800044c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000456:	230f      	movs	r3, #15
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff ffe3 	bl	800042c <LL_ADC_IsEnabled>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d118      	bne.n	800049c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <LL_ADC_Init+0x68>)
 8000470:	401a      	ands	r2, r3
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	6859      	ldr	r1, [r3, #4]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4319      	orrs	r1, r3
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	430b      	orrs	r3, r1
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	089a      	lsrs	r2, r3, #2
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	611a      	str	r2, [r3, #16]
 800049a:	e003      	b.n	80004a4 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800049c:	230f      	movs	r3, #15
 800049e:	18fb      	adds	r3, r7, r3
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80004a4:	230f      	movs	r3, #15
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	781b      	ldrb	r3, [r3, #0]
}
 80004aa:	0018      	movs	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	ffff3fc7 	.word	0xffff3fc7

080004b8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80004c2:	230f      	movs	r3, #15
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ffad 	bl	800042c <LL_ADC_IsEnabled>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d115      	bne.n	8000502 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <LL_ADC_REG_Init+0x60>)
 80004dc:	401a      	ands	r2, r3
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	6819      	ldr	r1, [r3, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	4319      	orrs	r1, r3
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4319      	orrs	r1, r3
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	4319      	orrs	r1, r3
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	430b      	orrs	r3, r1
 80004fa:	431a      	orrs	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	e003      	b.n	800050a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000502:	230f      	movs	r3, #15
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800050a:	230f      	movs	r3, #15
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	781b      	ldrb	r3, [r3, #0]
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	b004      	add	sp, #16
 8000516:	bd80      	pop	{r7, pc}
 8000518:	fffec23c 	.word	0xfffec23c

0800051c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <LL_EXTI_EnableIT_0_31+0x1c>)
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	430a      	orrs	r2, r1
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40010400 	.word	0x40010400

0800053c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <LL_EXTI_DisableIT_0_31+0x20>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	43d9      	mvns	r1, r3
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <LL_EXTI_DisableIT_0_31+0x20>)
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40010400 	.word	0x40010400

08000560 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800056a:	6859      	ldr	r1, [r3, #4]
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	430a      	orrs	r2, r1
 8000572:	605a      	str	r2, [r3, #4]

}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40010400 	.word	0x40010400

08000580 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <LL_EXTI_DisableEvent_0_31+0x20>)
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	43d9      	mvns	r1, r3
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000592:	400a      	ands	r2, r1
 8000594:	605a      	str	r2, [r3, #4]
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40010400 	.word	0x40010400

080005a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80005ae:	6899      	ldr	r1, [r3, #8]
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b002      	add	sp, #8
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40010400 	.word	0x40010400

080005c4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80005d6:	400a      	ands	r2, r1
 80005d8:	609a      	str	r2, [r3, #8]

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40010400 	.word	0x40010400

080005e8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80005f2:	68d9      	ldr	r1, [r3, #12]
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010400 	.word	0x40010400

08000608 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	43d9      	mvns	r1, r3
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800061a:	400a      	ands	r2, r1
 800061c:	60da      	str	r2, [r3, #12]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40010400 	.word	0x40010400

0800062c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000634:	230f      	movs	r3, #15
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <LL_EXTI_Init+0x1a>
 8000644:	e068      	b.n	8000718 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d100      	bne.n	8000650 <LL_EXTI_Init+0x24>
 800064e:	e06e      	b.n	800072e <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d01b      	beq.n	8000690 <LL_EXTI_Init+0x64>
 8000658:	dc25      	bgt.n	80006a6 <LL_EXTI_Init+0x7a>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <LL_EXTI_Init+0x38>
 800065e:	2b01      	cmp	r3, #1
 8000660:	d00b      	beq.n	800067a <LL_EXTI_Init+0x4e>
 8000662:	e020      	b.n	80006a6 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff ff89 	bl	8000580 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff ff52 	bl	800051c <LL_EXTI_EnableIT_0_31>
          break;
 8000678:	e01a      	b.n	80006b0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ff5c 	bl	800053c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff ff69 	bl	8000560 <LL_EXTI_EnableEvent_0_31>
          break;
 800068e:	e00f      	b.n	80006b0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ff41 	bl	800051c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff5e 	bl	8000560 <LL_EXTI_EnableEvent_0_31>
          break;
 80006a4:	e004      	b.n	80006b0 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 80006a6:	230f      	movs	r3, #15
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
          break;
 80006ae:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	799b      	ldrb	r3, [r3, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d03a      	beq.n	800072e <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	799b      	ldrb	r3, [r3, #6]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d01b      	beq.n	80006f8 <LL_EXTI_Init+0xcc>
 80006c0:	dc25      	bgt.n	800070e <LL_EXTI_Init+0xe2>
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d002      	beq.n	80006cc <LL_EXTI_Init+0xa0>
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d00b      	beq.n	80006e2 <LL_EXTI_Init+0xb6>
 80006ca:	e020      	b.n	800070e <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ff99 	bl	8000608 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff62 	bl	80005a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80006e0:	e026      	b.n	8000730 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff ff6c 	bl	80005c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff79 	bl	80005e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80006f6:	e01b      	b.n	8000730 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ff51 	bl	80005a4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff6e 	bl	80005e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800070c:	e010      	b.n	8000730 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 800070e:	230f      	movs	r3, #15
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
            break;
 8000716:	e00b      	b.n	8000730 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ff0d 	bl	800053c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff ff2a 	bl	8000580 <LL_EXTI_DisableEvent_0_31>
 800072c:	e000      	b.n	8000730 <LL_EXTI_Init+0x104>
      }
 800072e:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8000730:	230f      	movs	r3, #15
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	781b      	ldrb	r3, [r3, #0]
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b004      	add	sp, #16
 800073c:	bd80      	pop	{r7, pc}

0800073e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6819      	ldr	r1, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	435b      	muls	r3, r3
 8000752:	001a      	movs	r2, r3
 8000754:	0013      	movs	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	189b      	adds	r3, r3, r2
 800075a:	43db      	mvns	r3, r3
 800075c:	400b      	ands	r3, r1
 800075e:	001a      	movs	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	435b      	muls	r3, r3
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	434b      	muls	r3, r1
 8000768:	431a      	orrs	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}

08000776 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	434b      	muls	r3, r1
 8000792:	431a      	orrs	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	605a      	str	r2, [r3, #4]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b004      	add	sp, #16
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6899      	ldr	r1, [r3, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	435b      	muls	r3, r3
 80007b4:	001a      	movs	r2, r3
 80007b6:	0013      	movs	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	43db      	mvns	r3, r3
 80007be:	400b      	ands	r3, r1
 80007c0:	001a      	movs	r2, r3
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	435b      	muls	r3, r3
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	434b      	muls	r3, r1
 80007ca:	431a      	orrs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	609a      	str	r2, [r3, #8]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b004      	add	sp, #16
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	68d9      	ldr	r1, [r3, #12]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	435b      	muls	r3, r3
 80007ec:	001a      	movs	r2, r3
 80007ee:	0013      	movs	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	43db      	mvns	r3, r3
 80007f6:	400b      	ands	r3, r1
 80007f8:	001a      	movs	r2, r3
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	435b      	muls	r3, r3
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	434b      	muls	r3, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	60da      	str	r2, [r3, #12]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b004      	add	sp, #16
 800080e:	bd80      	pop	{r7, pc}

08000810 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6a19      	ldr	r1, [r3, #32]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	435b      	muls	r3, r3
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4353      	muls	r3, r2
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	435a      	muls	r2, r3
 800082c:	0013      	movs	r3, r2
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	43db      	mvns	r3, r3
 8000834:	400b      	ands	r3, r1
 8000836:	001a      	movs	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	435b      	muls	r3, r3
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	434b      	muls	r3, r1
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	434b      	muls	r3, r1
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	434b      	muls	r3, r1
 8000848:	431a      	orrs	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}

08000856 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	0a12      	lsrs	r2, r2, #8
 800086e:	4353      	muls	r3, r2
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	0a12      	lsrs	r2, r2, #8
 8000874:	4353      	muls	r3, r2
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	0a12      	lsrs	r2, r2, #8
 800087a:	435a      	muls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	1a9b      	subs	r3, r3, r2
 8000882:	43db      	mvns	r3, r3
 8000884:	400b      	ands	r3, r1
 8000886:	001a      	movs	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	0a09      	lsrs	r1, r1, #8
 8000890:	434b      	muls	r3, r1
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	0a09      	lsrs	r1, r1, #8
 8000896:	434b      	muls	r3, r1
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	0a09      	lsrs	r1, r1, #8
 800089c:	434b      	muls	r3, r1
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	434b      	muls	r3, r1
 80008a2:	431a      	orrs	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b004      	add	sp, #16
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80008c2:	e048      	b.n	8000956 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d03a      	beq.n	8000950 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d003      	beq.n	80008ea <LL_GPIO_Init+0x3a>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d10e      	bne.n	8000908 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff54 	bl	80007a0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff37 	bl	8000776 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	691a      	ldr	r2, [r3, #16]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ff61 	bl	80007d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d111      	bne.n	8000942 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2bff      	cmp	r3, #255	; 0xff
 8000922:	d807      	bhi.n	8000934 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ff6f 	bl	8000810 <LL_GPIO_SetAFPin_0_7>
 8000932:	e006      	b.n	8000942 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff8a 	bl	8000856 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fef7 	bl	800073e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	40da      	lsrs	r2, r3
 800095e:	1e13      	subs	r3, r2, #0
 8000960:	d1b0      	bne.n	80008c4 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8000962:	2300      	movs	r3, #0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b004      	add	sp, #16
 800096a:	bd80      	pop	{r7, pc}

0800096c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <LL_RCC_HSI_IsReady+0x1c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2204      	movs	r2, #4
 8000976:	4013      	ands	r3, r2
 8000978:	2b04      	cmp	r3, #4
 800097a:	d101      	bne.n	8000980 <LL_RCC_HSI_IsReady+0x14>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <LL_RCC_HSI_IsReady+0x16>
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <LL_RCC_LSE_IsReady+0x24>)
 8000992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	401a      	ands	r2, r3
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <LL_RCC_LSE_IsReady+0x1a>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <LL_RCC_LSE_IsReady+0x1c>
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40021000 	.word	0x40021000

080009b4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <LL_RCC_MSI_GetRange+0x14>)
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	23e0      	movs	r3, #224	; 0xe0
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	4013      	ands	r3, r2
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <LL_RCC_GetSysClkSource+0x14>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	220c      	movs	r2, #12
 80009d6:	4013      	ands	r3, r2
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000

080009e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	22f0      	movs	r2, #240	; 0xf0
 80009ee:	4013      	ands	r3, r2
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000

080009fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	23e0      	movs	r3, #224	; 0xe0
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	4013      	ands	r3, r2
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	23e0      	movs	r3, #224	; 0xe0
 8000a1e:	019b      	lsls	r3, r3, #6
 8000a20:	4013      	ands	r3, r2
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <LL_RCC_GetUSARTClockSource+0x20>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	4313      	orrs	r3, r2
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40021000 	.word	0x40021000

08000a50 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <LL_RCC_PLL_GetMainSource+0x14>)
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	025b      	lsls	r3, r3, #9
 8000a5c:	4013      	ands	r3, r2
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	23f0      	movs	r3, #240	; 0xf0
 8000a72:	039b      	lsls	r3, r3, #14
 8000a74:	4013      	ands	r3, r2
}
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <LL_RCC_PLL_GetDivider+0x14>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	23c0      	movs	r3, #192	; 0xc0
 8000a8a:	041b      	lsls	r3, r3, #16
 8000a8c:	4013      	ands	r3, r2
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d101      	bne.n	8000aac <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d139      	bne.n	8000b3e <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ffad 	bl	8000a2c <LL_RCC_GetUSARTClockSource>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	4a40      	ldr	r2, [pc, #256]	; (8000bd8 <LL_RCC_GetUSARTClockFreq+0x120>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d01c      	beq.n	8000b14 <LL_RCC_GetUSARTClockFreq+0x5c>
 8000ada:	4a3f      	ldr	r2, [pc, #252]	; (8000bd8 <LL_RCC_GetUSARTClockFreq+0x120>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d821      	bhi.n	8000b24 <LL_RCC_GetUSARTClockFreq+0x6c>
 8000ae0:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <LL_RCC_GetUSARTClockFreq+0x124>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d003      	beq.n	8000aee <LL_RCC_GetUSARTClockFreq+0x36>
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <LL_RCC_GetUSARTClockFreq+0x128>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d005      	beq.n	8000af8 <LL_RCC_GetUSARTClockFreq+0x40>
 8000aec:	e01a      	b.n	8000b24 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000aee:	f000 f883 	bl	8000bf8 <RCC_GetSystemClockFreq>
 8000af2:	0003      	movs	r3, r0
 8000af4:	60fb      	str	r3, [r7, #12]
        break;
 8000af6:	e027      	b.n	8000b48 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000af8:	f7ff ff38 	bl	800096c <LL_RCC_HSI_IsReady>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d020      	beq.n	8000b42 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000b00:	f7ff ffca 	bl	8000a98 <LL_RCC_IsActiveFlag_HSIDIV>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d002      	beq.n	8000b0e <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000b08:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000b0a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000b0c:	e019      	b.n	8000b42 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <LL_RCC_GetUSARTClockFreq+0x130>)
 8000b10:	60fb      	str	r3, [r7, #12]
        break;
 8000b12:	e016      	b.n	8000b42 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000b14:	f7ff ff3a 	bl	800098c <LL_RCC_LSE_IsReady>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d014      	beq.n	8000b46 <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000b22:	e010      	b.n	8000b46 <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000b24:	f000 f868 	bl	8000bf8 <RCC_GetSystemClockFreq>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f8a8 	bl	8000c80 <RCC_GetHCLKClockFreq>
 8000b30:	0003      	movs	r3, r0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 f8ce 	bl	8000cd4 <RCC_GetPCLK2ClockFreq>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	60fb      	str	r3, [r7, #12]
        break;
 8000b3c:	e004      	b.n	8000b48 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	e002      	b.n	8000b48 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000      	b.n	8000b48 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8000b46:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0c      	cmp	r3, #12
 8000b4c:	d139      	bne.n	8000bc2 <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff6b 	bl	8000a2c <LL_RCC_GetUSARTClockSource>
 8000b56:	0003      	movs	r3, r0
 8000b58:	4a24      	ldr	r2, [pc, #144]	; (8000bec <LL_RCC_GetUSARTClockFreq+0x134>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d01c      	beq.n	8000b98 <LL_RCC_GetUSARTClockFreq+0xe0>
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <LL_RCC_GetUSARTClockFreq+0x134>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d821      	bhi.n	8000ba8 <LL_RCC_GetUSARTClockFreq+0xf0>
 8000b64:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <LL_RCC_GetUSARTClockFreq+0x138>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d003      	beq.n	8000b72 <LL_RCC_GetUSARTClockFreq+0xba>
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <LL_RCC_GetUSARTClockFreq+0x13c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d005      	beq.n	8000b7c <LL_RCC_GetUSARTClockFreq+0xc4>
 8000b70:	e01a      	b.n	8000ba8 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000b72:	f000 f841 	bl	8000bf8 <RCC_GetSystemClockFreq>
 8000b76:	0003      	movs	r3, r0
 8000b78:	60fb      	str	r3, [r7, #12]
        break;
 8000b7a:	e027      	b.n	8000bcc <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000b7c:	f7ff fef6 	bl	800096c <LL_RCC_HSI_IsReady>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d020      	beq.n	8000bc6 <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000b84:	f7ff ff88 	bl	8000a98 <LL_RCC_IsActiveFlag_HSIDIV>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d002      	beq.n	8000b92 <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000b8e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000b90:	e019      	b.n	8000bc6 <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <LL_RCC_GetUSARTClockFreq+0x130>)
 8000b94:	60fb      	str	r3, [r7, #12]
        break;
 8000b96:	e016      	b.n	8000bc6 <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000b98:	f7ff fef8 	bl	800098c <LL_RCC_LSE_IsReady>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d014      	beq.n	8000bca <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000ba6:	e010      	b.n	8000bca <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000ba8:	f000 f826 	bl	8000bf8 <RCC_GetSystemClockFreq>
 8000bac:	0003      	movs	r3, r0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f866 	bl	8000c80 <RCC_GetHCLKClockFreq>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f878 	bl	8000cac <RCC_GetPCLK1ClockFreq>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	60fb      	str	r3, [r7, #12]
        break;
 8000bc0:	e004      	b.n	8000bcc <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	e002      	b.n	8000bcc <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	e000      	b.n	8000bcc <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8000bca:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	00030003 	.word	0x00030003
 8000bdc:	00030001 	.word	0x00030001
 8000be0:	00030002 	.word	0x00030002
 8000be4:	003d0900 	.word	0x003d0900
 8000be8:	00f42400 	.word	0x00f42400
 8000bec:	000c000c 	.word	0x000c000c
 8000bf0:	000c0004 	.word	0x000c0004
 8000bf4:	000c0008 	.word	0x000c0008

08000bf8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000bfe:	f7ff fee5 	bl	80009cc <LL_RCC_GetSysClkSource>
 8000c02:	0003      	movs	r3, r0
 8000c04:	2b0c      	cmp	r3, #12
 8000c06:	d020      	beq.n	8000c4a <RCC_GetSystemClockFreq+0x52>
 8000c08:	d824      	bhi.n	8000c54 <RCC_GetSystemClockFreq+0x5c>
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d01a      	beq.n	8000c44 <RCC_GetSystemClockFreq+0x4c>
 8000c0e:	d821      	bhi.n	8000c54 <RCC_GetSystemClockFreq+0x5c>
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <RCC_GetSystemClockFreq+0x22>
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d00b      	beq.n	8000c30 <RCC_GetSystemClockFreq+0x38>
 8000c18:	e01c      	b.n	8000c54 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000c1a:	f7ff fecb 	bl	80009b4 <LL_RCC_MSI_GetRange>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0b5b      	lsrs	r3, r3, #13
 8000c22:	3301      	adds	r3, #1
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0212      	lsls	r2, r2, #8
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	607b      	str	r3, [r7, #4]
      break;
 8000c2e:	e01c      	b.n	8000c6a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000c30:	f7ff ff32 	bl	8000a98 <LL_RCC_IsActiveFlag_HSIDIV>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d002      	beq.n	8000c3e <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <RCC_GetSystemClockFreq+0x7c>)
 8000c3a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000c3c:	e015      	b.n	8000c6a <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <RCC_GetSystemClockFreq+0x80>)
 8000c40:	607b      	str	r3, [r7, #4]
      break;
 8000c42:	e012      	b.n	8000c6a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <RCC_GetSystemClockFreq+0x84>)
 8000c46:	607b      	str	r3, [r7, #4]
      break;
 8000c48:	e00f      	b.n	8000c6a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000c4a:	f000 f857 	bl	8000cfc <RCC_PLL_GetFreqDomain_SYS>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	607b      	str	r3, [r7, #4]
      break;
 8000c52:	e00a      	b.n	8000c6a <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000c54:	f7ff feae 	bl	80009b4 <LL_RCC_MSI_GetRange>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	0b5b      	lsrs	r3, r3, #13
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0212      	lsls	r2, r2, #8
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
      break;
 8000c68:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	003d0900 	.word	0x003d0900
 8000c78:	00f42400 	.word	0x00f42400
 8000c7c:	007a1200 	.word	0x007a1200

08000c80 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000c88:	f7ff feac 	bl	80009e4 <LL_RCC_GetAHBPrescaler>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	220f      	movs	r2, #15
 8000c92:	4013      	ands	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <RCC_GetHCLKClockFreq+0x28>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	40d3      	lsrs	r3, r2
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	08003a04 	.word	0x08003a04

08000cac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000cb4:	f7ff fea2 	bl	80009fc <LL_RCC_GetAPB1Prescaler>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <RCC_GetPCLK1ClockFreq+0x24>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	40d3      	lsrs	r3, r2
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	08003a14 	.word	0x08003a14

08000cd4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000cdc:	f7ff fe9a 	bl	8000a14 <LL_RCC_GetAPB2Prescaler>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0adb      	lsrs	r3, r3, #11
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <RCC_GetPCLK2ClockFreq+0x24>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	40d3      	lsrs	r3, r2
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	08003a14 	.word	0x08003a14

08000cfc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000d02:	f7ff fea5 	bl	8000a50 <LL_RCC_PLL_GetMainSource>
 8000d06:	0003      	movs	r3, r0
 8000d08:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000d10:	f7ff fec2 	bl	8000a98 <LL_RCC_IsActiveFlag_HSIDIV>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d002      	beq.n	8000d1e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000d1a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000d1c:	e005      	b.n	8000d2a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000d20:	607b      	str	r3, [r7, #4]
      break;
 8000d22:	e002      	b.n	8000d2a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000d26:	607b      	str	r3, [r7, #4]
      break;
 8000d28:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000d2a:	f7ff fe9d 	bl	8000a68 <LL_RCC_PLL_GetMultiplicator>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0c9b      	lsrs	r3, r3, #18
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	001a      	movs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4353      	muls	r3, r2
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	f7ff fe9f 	bl	8000a80 <LL_RCC_PLL_GetDivider>
 8000d42:	0003      	movs	r3, r0
 8000d44:	0d9b      	lsrs	r3, r3, #22
 8000d46:	3301      	adds	r3, #1
 8000d48:	0019      	movs	r1, r3
 8000d4a:	0020      	movs	r0, r4
 8000d4c:	f7ff f9f8 	bl	8000140 <__udivsi3>
 8000d50:	0003      	movs	r3, r0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b003      	add	sp, #12
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	003d0900 	.word	0x003d0900
 8000d60:	00f42400 	.word	0x00f42400
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	08003a1c 	.word	0x08003a1c

08000d6c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <LL_USART_IsEnabled+0x18>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <LL_USART_IsEnabled+0x1a>
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <LL_USART_SetStopBitsLength+0x24>)
 8000da0:	401a      	ands	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	605a      	str	r2, [r3, #4]
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	ffffcfff 	.word	0xffffcfff

08000db8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <LL_USART_SetHWFlowCtrl+0x24>)
 8000dc8:	401a      	ands	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	fffffcff 	.word	0xfffffcff

08000de0 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d11c      	bne.n	8000e32 <LL_USART_SetBaudRate+0x52>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	005a      	lsls	r2, r3, #1
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff f99b 	bl	8000140 <__udivsi3>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <LL_USART_SetBaudRate+0x74>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	085b      	lsrs	r3, r3, #1
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2307      	movs	r3, #7
 8000e22:	4013      	ands	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000e30:	e00c      	b.n	8000e4c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	085a      	lsrs	r2, r3, #1
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff f97f 	bl	8000140 <__udivsi3>
 8000e42:	0003      	movs	r3, r0
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	001a      	movs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	60da      	str	r2, [r3, #12]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b006      	add	sp, #24
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	0000fff0 	.word	0x0000fff0

08000e58 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000e62:	230f      	movs	r3, #15
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff7b 	bl	8000d6c <LL_USART_IsEnabled>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d145      	bne.n	8000f06 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <LL_USART_Init+0xbc>)
 8000e80:	401a      	ands	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	4319      	orrs	r1, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	4319      	orrs	r1, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	430b      	orrs	r3, r1
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ff72 	bl	8000d90 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	695a      	ldr	r2, [r3, #20]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff7f 	bl	8000db8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <LL_USART_Init+0xc0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d105      	bne.n	8000ece <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f7ff fdf8 	bl	8000ab8 <LL_RCC_GetUSARTClockFreq>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	e008      	b.n	8000ee0 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <LL_USART_Init+0xc4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d104      	bne.n	8000ee0 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	f7ff fdee 	bl	8000ab8 <LL_RCC_GetUSARTClockFreq>
 8000edc:	0003      	movs	r3, r0
 8000ede:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00f      	beq.n	8000f06 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff6d 	bl	8000de0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000f06:	230f      	movs	r3, #15
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b004      	add	sp, #16
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	efff69f3 	.word	0xefff69f3
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40004400 	.word	0x40004400

08000f20 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff f907 	bl	8000140 <__udivsi3>
 8000f32:	0003      	movs	r3, r0
 8000f34:	001a      	movs	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <LL_InitTick+0x30>)
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <LL_InitTick+0x30>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <LL_InitTick+0x30>)
 8000f44:	2205      	movs	r2, #5
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000f5c:	23fa      	movs	r3, #250	; 0xfa
 8000f5e:	009a      	lsls	r2, r3, #2
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffdb 	bl	8000f20 <LL_InitTick>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <LL_mDelay+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000f82:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3301      	adds	r3, #1
 8000f88:	d00c      	beq.n	8000fa4 <LL_mDelay+0x30>
  {
    Delay++;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000f90:	e008      	b.n	8000fa4 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <LL_mDelay+0x40>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	025b      	lsls	r3, r3, #9
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d002      	beq.n	8000fa4 <LL_mDelay+0x30>
    {
      Delay--;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f3      	bne.n	8000f92 <LL_mDelay+0x1e>
    }
  }
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <LL_SetSystemCoreClock+0x18>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <LL_ADC_SetCommonClock>:
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <LL_ADC_SetCommonClock+0x24>)
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	ffc3ffff 	.word	0xffc3ffff

08000ffc <LL_ADC_SetCommonFrequencyMode>:
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <LL_ADC_SetCommonFrequencyMode+0x24>)
 800100c:	401a      	ands	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	fdffffff 	.word	0xfdffffff

08001024 <LL_ADC_SetCommonPathInternalCh>:
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001034:	401a      	ands	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	fe3fffff 	.word	0xfe3fffff

0800104c <LL_ADC_SetClock>:
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	089a      	lsrs	r2, r3, #2
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	611a      	str	r2, [r3, #16]
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	2207      	movs	r2, #7
 800107e:	4393      	bics	r3, r2
 8001080:	001a      	movs	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <LL_ADC_REG_SetSequencerScanDirection>:
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2204      	movs	r2, #4
 80010a2:	4393      	bics	r3, r2
 80010a4:	001a      	movs	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60da      	str	r2, [r3, #12]
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LL_ADC_REG_SetSequencerChAdd>:
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	035b      	lsls	r3, r3, #13
 80010c8:	0b5b      	lsrs	r3, r3, #13
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_SetOverSamplingScope>:
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4393      	bics	r3, r2
 80010ea:	001a      	movs	r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	611a      	str	r2, [r3, #16]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LL_ADC_EnableInternalRegulator>:
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <LL_ADC_EnableInternalRegulator+0x24>)
 800110a:	4013      	ands	r3, r2
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	0552      	lsls	r2, r2, #21
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	6fffffe8 	.word	0x6fffffe8

08001124 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	4393      	bics	r3, r2
 8001134:	001a      	movs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}

08001142 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2208      	movs	r2, #8
 8001150:	4393      	bics	r3, r2
 8001152:	001a      	movs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	605a      	str	r2, [r3, #4]
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <LL_APB2_GRP1_EnableClock+0x28>)
 800116a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <LL_APB2_GRP1_EnableClock+0x28>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	430a      	orrs	r2, r1
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LL_APB2_GRP1_EnableClock+0x28>)
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000

0800118c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <LL_IOP_GRP1_EnableClock+0x28>)
 8001196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <LL_IOP_GRP1_EnableClock+0x28>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	430a      	orrs	r2, r1
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <LL_IOP_GRP1_EnableClock+0x28>)
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b004      	add	sp, #16
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80011be:	2428      	movs	r4, #40	; 0x28
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	2314      	movs	r3, #20
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f001 fab1 	bl	8002730 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80011ce:	2518      	movs	r5, #24
 80011d0:	197b      	adds	r3, r7, r5
 80011d2:	0018      	movs	r0, r3
 80011d4:	2310      	movs	r3, #16
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f001 faa9 	bl	8002730 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	003b      	movs	r3, r7
 80011e0:	0018      	movs	r0, r3
 80011e2:	2318      	movs	r3, #24
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f001 faa2 	bl	8002730 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ffb5 	bl	8001160 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80011f6:	2004      	movs	r0, #4
 80011f8:	f7ff ffc8 	bl	800118c <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PC1   ------> ADC_IN11
  PC3   ------> ADC_IN13
  PC5   ------> ADC_IN15
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80011fc:	003b      	movs	r3, r7
 80011fe:	2202      	movs	r2, #2
 8001200:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001202:	003b      	movs	r3, r7
 8001204:	2203      	movs	r2, #3
 8001206:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001208:	003b      	movs	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	003b      	movs	r3, r7
 8001210:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <MX_ADC_Init+0x1d8>)
 8001212:	0019      	movs	r1, r3
 8001214:	0010      	movs	r0, r2
 8001216:	f7ff fb4b 	bl	80008b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800121a:	003b      	movs	r3, r7
 800121c:	2208      	movs	r2, #8
 800121e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001220:	003b      	movs	r3, r7
 8001222:	2203      	movs	r2, #3
 8001224:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001226:	003b      	movs	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	003b      	movs	r3, r7
 800122e:	4a58      	ldr	r2, [pc, #352]	; (8001390 <MX_ADC_Init+0x1d8>)
 8001230:	0019      	movs	r1, r3
 8001232:	0010      	movs	r0, r2
 8001234:	f7ff fb3c 	bl	80008b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001238:	003b      	movs	r3, r7
 800123a:	2220      	movs	r2, #32
 800123c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800123e:	003b      	movs	r3, r7
 8001240:	2203      	movs	r2, #3
 8001242:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001244:	003b      	movs	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	003b      	movs	r3, r7
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <MX_ADC_Init+0x1d8>)
 800124e:	0019      	movs	r1, r3
 8001250:	0010      	movs	r0, r2
 8001252:	f7ff fb2d 	bl	80008b0 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_11);
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <MX_ADC_Init+0x1dc>)
 8001258:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <MX_ADC_Init+0x1e0>)
 800125a:	0011      	movs	r1, r2
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ff2a 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_13);
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <MX_ADC_Init+0x1e4>)
 8001264:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff24 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_15);
 800126e:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <MX_ADC_Init+0x1e8>)
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ff1e 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_TEMPSENSOR);
 800127a:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <MX_ADC_Init+0x1ec>)
 800127c:	4b46      	ldr	r3, [pc, #280]	; (8001398 <MX_ADC_Init+0x1e0>)
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff ff18 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <MX_ADC_Init+0x1f0>)
 800128c:	0019      	movs	r1, r3
 800128e:	0010      	movs	r0, r2
 8001290:	f7ff fec8 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8001294:	4a45      	ldr	r2, [pc, #276]	; (80013ac <MX_ADC_Init+0x1f4>)
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff ff0b 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	03db      	lsls	r3, r3, #15
 80012a4:	4a40      	ldr	r2, [pc, #256]	; (80013a8 <MX_ADC_Init+0x1f0>)
 80012a6:	0019      	movs	r1, r3
 80012a8:	0010      	movs	r0, r2
 80012aa:	f7ff febb 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80012ae:	0021      	movs	r1, r4
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	4a31      	ldr	r2, [pc, #196]	; (8001398 <MX_ADC_Init+0x1e0>)
 80012d2:	0019      	movs	r1, r3
 80012d4:	0010      	movs	r0, r2
 80012d6:	f7ff f8ef 	bl	80004b8 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <MX_ADC_Init+0x1e0>)
 80012dc:	2105      	movs	r1, #5
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fec5 	bl	800106e <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <MX_ADC_Init+0x1e0>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fef5 	bl	80010d8 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_ADC_Init+0x1e0>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff fecd 	bl	8001092 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	049b      	lsls	r3, r3, #18
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <MX_ADC_Init+0x1f0>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f7ff fe7b 	bl	8000ffc <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff0b 	bl	8001124 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff16 	bl	8001142 <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001316:	197b      	adds	r3, r7, r5
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800131c:	197b      	adds	r3, r7, r5
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001322:	197b      	adds	r3, r7, r5
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001328:	197b      	adds	r3, r7, r5
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_ADC_Init+0x1e0>)
 800132c:	0019      	movs	r1, r3
 800132e:	0010      	movs	r0, r2
 8001330:	f7ff f88c 	bl	800044c <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_ADC_Init+0x1e0>)
 8001336:	2100      	movs	r1, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff fe87 	bl	800104c <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 800133e:	23e0      	movs	r3, #224	; 0xe0
 8001340:	035b      	lsls	r3, r3, #13
 8001342:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <MX_ADC_Init+0x1f0>)
 8001344:	0019      	movs	r1, r3
 8001346:	0010      	movs	r0, r2
 8001348:	f7ff fe44 	bl	8000fd4 <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_ADC_Init+0x1e0>)
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff fed4 	bl	80010fc <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_ADC_Init+0x1f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4916      	ldr	r1, [pc, #88]	; (80013b4 <MX_ADC_Init+0x1fc>)
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe fef0 	bl	8000140 <__udivsi3>
 8001360:	0003      	movs	r3, r0
 8001362:	001a      	movs	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	189b      	adds	r3, r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	210a      	movs	r1, #10
 800136e:	0018      	movs	r0, r3
 8001370:	f7fe fee6 	bl	8000140 <__udivsi3>
 8001374:	0003      	movs	r3, r0
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001378:	e002      	b.n	8001380 <MX_ADC_Init+0x1c8>
  {
    wait_loop_index--;
 800137a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137c:	3b01      	subs	r3, #1
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <MX_ADC_Init+0x1c2>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b010      	add	sp, #64	; 0x40
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	50000800 	.word	0x50000800
 8001394:	2c000800 	.word	0x2c000800
 8001398:	40012400 	.word	0x40012400
 800139c:	34002000 	.word	0x34002000
 80013a0:	3c008000 	.word	0x3c008000
 80013a4:	c8040000 	.word	0xc8040000
 80013a8:	40012708 	.word	0x40012708
 80013ac:	c4020000 	.word	0xc4020000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	00030d40 	.word	0x00030d40

080013b8 <LL_IOP_GRP1_EnableClock>:
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <LL_IOP_GRP1_EnableClock+0x28>)
 80013c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <LL_IOP_GRP1_EnableClock+0x28>)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <LL_IOP_GRP1_EnableClock+0x28>)
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <LL_SYSCFG_SetEXTISource+0x48>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	21ff      	movs	r1, #255	; 0xff
 80013f4:	400b      	ands	r3, r1
 80013f6:	3302      	adds	r3, #2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	589b      	ldr	r3, [r3, r2]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	0c12      	lsrs	r2, r2, #16
 8001400:	210f      	movs	r1, #15
 8001402:	4091      	lsls	r1, r2
 8001404:	000a      	movs	r2, r1
 8001406:	43d2      	mvns	r2, r2
 8001408:	401a      	ands	r2, r3
 800140a:	0011      	movs	r1, r2
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	409a      	lsls	r2, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <LL_SYSCFG_SetEXTISource+0x48>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	24ff      	movs	r4, #255	; 0xff
 800141a:	4023      	ands	r3, r4
 800141c:	430a      	orrs	r2, r1
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	501a      	str	r2, [r3, r0]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b003      	add	sp, #12
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	40010000 	.word	0x40010000

08001430 <LL_GPIO_SetPinMode>:
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	435b      	muls	r3, r3
 8001444:	001a      	movs	r2, r3
 8001446:	0013      	movs	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	189b      	adds	r3, r3, r2
 800144c:	43db      	mvns	r3, r3
 800144e:	400b      	ands	r3, r1
 8001450:	001a      	movs	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	435b      	muls	r3, r3
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	434b      	muls	r3, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}

08001468 <LL_GPIO_SetPinPull>:
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	435b      	muls	r3, r3
 800147c:	001a      	movs	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	189b      	adds	r3, r3, r2
 8001484:	43db      	mvns	r3, r3
 8001486:	400b      	ands	r3, r1
 8001488:	001a      	movs	r2, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	435b      	muls	r3, r3
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	434b      	muls	r3, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b004      	add	sp, #16
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80014be:	2418      	movs	r4, #24
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	0018      	movs	r0, r3
 80014c4:	2308      	movs	r3, #8
 80014c6:	001a      	movs	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	f001 f931 	bl	8002730 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	003b      	movs	r3, r7
 80014d0:	0018      	movs	r0, r3
 80014d2:	2318      	movs	r3, #24
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f001 f92a 	bl	8002730 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80014dc:	2004      	movs	r0, #4
 80014de:	f7ff ff6b 	bl	80013b8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 80014e2:	2080      	movs	r0, #128	; 0x80
 80014e4:	f7ff ff68 	bl	80013b8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff ff65 	bl	80013b8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <MX_GPIO_Init+0x164>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ffd4 	bl	80014a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <MX_GPIO_Init+0x164>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ffcf 	bl	80014a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001502:	23a0      	movs	r3, #160	; 0xa0
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	2120      	movs	r1, #32
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ffc9 	bl	80014a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4a42      	ldr	r2, [pc, #264]	; (800161c <MX_GPIO_Init+0x164>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f7ff ffc2 	bl	80014a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <MX_GPIO_Init+0x168>)
 800151e:	0019      	movs	r1, r3
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff ff5f 	bl	80013e4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	483c      	ldr	r0, [pc, #240]	; (800161c <MX_GPIO_Init+0x164>)
 800152c:	2200      	movs	r2, #0
 800152e:	0019      	movs	r1, r3
 8001530:	f7ff ff9a 	bl	8001468 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	019b      	lsls	r3, r3, #6
 8001538:	4838      	ldr	r0, [pc, #224]	; (800161c <MX_GPIO_Init+0x164>)
 800153a:	2200      	movs	r2, #0
 800153c:	0019      	movs	r1, r3
 800153e:	f7ff ff77 	bl	8001430 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001542:	0021      	movs	r1, r4
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	0192      	lsls	r2, r2, #6
 800154a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2201      	movs	r2, #1
 8001550:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2202      	movs	r2, #2
 800155c:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800155e:	187b      	adds	r3, r7, r1
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff f863 	bl	800062c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001566:	003b      	movs	r3, r7
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800156c:	003b      	movs	r3, r7
 800156e:	2201      	movs	r2, #1
 8001570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001572:	003b      	movs	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001578:	003b      	movs	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800157e:	003b      	movs	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	003b      	movs	r3, r7
 8001586:	4a25      	ldr	r2, [pc, #148]	; (800161c <MX_GPIO_Init+0x164>)
 8001588:	0019      	movs	r1, r3
 800158a:	0010      	movs	r0, r2
 800158c:	f7ff f990 	bl	80008b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001590:	003b      	movs	r3, r7
 8001592:	2204      	movs	r2, #4
 8001594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001596:	003b      	movs	r3, r7
 8001598:	2201      	movs	r2, #1
 800159a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800159c:	003b      	movs	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a2:	003b      	movs	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a8:	003b      	movs	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	003b      	movs	r3, r7
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <MX_GPIO_Init+0x164>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	0010      	movs	r0, r2
 80015b6:	f7ff f97b 	bl	80008b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ba:	003b      	movs	r3, r7
 80015bc:	2220      	movs	r2, #32
 80015be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015c0:	003b      	movs	r3, r7
 80015c2:	2201      	movs	r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015c6:	003b      	movs	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015d2:	003b      	movs	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d8:	003a      	movs	r2, r7
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff f965 	bl	80008b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80015e6:	003b      	movs	r3, r7
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	0052      	lsls	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ee:	003b      	movs	r3, r7
 80015f0:	2201      	movs	r2, #1
 80015f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015f4:	003b      	movs	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015fa:	003b      	movs	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001600:	003b      	movs	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	003b      	movs	r3, r7
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <MX_GPIO_Init+0x164>)
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f7ff f94f 	bl	80008b0 <LL_GPIO_Init>

}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b009      	add	sp, #36	; 0x24
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	50000800 	.word	0x50000800
 8001620:	00040003 	.word	0x00040003

08001624 <LL_ADC_SetCommonPathInternalCh>:
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001634:	401a      	ands	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	fe3fffff 	.word	0xfe3fffff

0800164c <LL_ADC_REG_SetSequencerChannels>:
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	035b      	lsls	r3, r3, #13
 800165a:	0b5a      	lsrs	r2, r3, #13
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}

08001668 <LL_ADC_Enable>:
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <LL_ADC_Enable+0x20>)
 8001676:	4013      	ands	r3, r2
 8001678:	2201      	movs	r2, #1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	7fffffe8 	.word	0x7fffffe8

0800168c <LL_ADC_REG_StartConversion>:
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <LL_ADC_REG_StartConversion+0x20>)
 800169a:	4013      	ands	r3, r2
 800169c:	2204      	movs	r2, #4
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	7fffffe8 	.word	0x7fffffe8

080016b0 <LL_ADC_REG_ReadConversionData12>:
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	b29b      	uxth	r3, r3
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <LL_ADC_IsActiveFlag_EOC>:
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	3b04      	subs	r3, #4
 80016d8:	425a      	negs	r2, r3
 80016da:	4153      	adcs	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <LL_RCC_HSI_Enable>:
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <LL_RCC_HSI_Enable+0x18>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <LL_RCC_HSI_Enable+0x18>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40021000 	.word	0x40021000

08001704 <LL_RCC_HSI_IsReady>:
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <LL_RCC_HSI_IsReady+0x1c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2204      	movs	r2, #4
 800170e:	4013      	ands	r3, r2
 8001710:	2b04      	cmp	r3, #4
 8001712:	d101      	bne.n	8001718 <LL_RCC_HSI_IsReady+0x14>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_RCC_HSI_IsReady+0x16>
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000

08001724 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	021a      	lsls	r2, r3, #8
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	ffffe0ff 	.word	0xffffe0ff

08001750 <LL_RCC_SetSysClkSource>:
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <LL_RCC_SetSysClkSource+0x24>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2203      	movs	r2, #3
 800175e:	4393      	bics	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <LL_RCC_SetSysClkSource+0x24>)
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	430a      	orrs	r2, r1
 8001768:	60da      	str	r2, [r3, #12]
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	40021000 	.word	0x40021000

08001778 <LL_RCC_GetSysClkSource>:
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <LL_RCC_GetSysClkSource+0x14>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021000 	.word	0x40021000

08001790 <LL_RCC_SetAHBPrescaler>:
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	22f0      	movs	r2, #240	; 0xf0
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_SetAPB1Prescaler>:
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000
 80017e0:	fffff8ff 	.word	0xfffff8ff

080017e4 <LL_RCC_SetAPB2Prescaler>:
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <LL_RCC_SetAPB2Prescaler+0x28>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	ffffc7ff 	.word	0xffffc7ff

08001810 <LL_RCC_SetUSARTClockSource>:
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <LL_RCC_SetUSARTClockSource+0x2c>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	0c12      	lsrs	r2, r2, #16
 8001820:	43d2      	mvns	r2, r2
 8001822:	401a      	ands	r2, r3
 8001824:	0011      	movs	r1, r2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	0c1a      	lsrs	r2, r3, #16
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <LL_RCC_SetUSARTClockSource+0x2c>)
 800182e:	430a      	orrs	r2, r1
 8001830:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000

08001840 <LL_APB1_GRP1_EnableClock>:
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <LL_APB1_GRP1_EnableClock+0x28>)
 800184a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <LL_APB1_GRP1_EnableClock+0x28>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	430a      	orrs	r2, r1
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <LL_APB1_GRP1_EnableClock+0x28>)
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4013      	ands	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <LL_APB2_GRP1_EnableClock>:
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <LL_APB2_GRP1_EnableClock+0x28>)
 8001876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_APB2_GRP1_EnableClock+0x28>)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <LL_APB2_GRP1_EnableClock+0x28>)
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b004      	add	sp, #16
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <LL_FLASH_SetLatency+0x24>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4393      	bics	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <LL_FLASH_SetLatency+0x24>)
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40022000 	.word	0x40022000

080018c0 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <LL_FLASH_GetLatency+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40022000 	.word	0x40022000

080018d8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <LL_SYSTICK_EnableIT+0x18>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <LL_SYSTICK_EnableIT+0x18>)
 80018e2:	2102      	movs	r1, #2
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8001902:	4013      	ands	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40007000 	.word	0x40007000
 800191c:	ffffe7ff 	.word	0xffffe7ff

08001920 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	4013      	ands	r3, r2
 8001930:	2b80      	cmp	r3, #128	; 0x80
 8001932:	d101      	bne.n	8001938 <LL_USART_IsActiveFlag_TXE+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_USART_IsActiveFlag_TXE+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}

08001942 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800194a:	f3ef 8310 	mrs	r3, PRIMASK
 800194e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001950:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	2301      	movs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f383 8810 	msr	PRIMASK, r3
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2220      	movs	r2, #32
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f383 8810 	msr	PRIMASK, r3
}
 8001976:	46c0      	nop			; (mov r8, r8)
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b006      	add	sp, #24
 800197e:	bd80      	pop	{r7, pc}

08001980 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	000a      	movs	r2, r1
 800198a:	1cfb      	adds	r3, r7, #3
 800198c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800198e:	1cfb      	adds	r3, r7, #3
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}

0800199e <LL_GPIO_IsInputPinSet>:
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	425a      	negs	r2, r3
 80019b6:	4153      	adcs	r3, r2
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <LL_GPIO_SetOutputPin>:
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}

080019da <LL_GPIO_ResetOutputPin>:
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <system_is_disabled>:

/**
  * @brief  Check if system is disabled or not
  * @retval bool
  */
uint8_t system_is_disabled() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) {
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <system_is_disabled+0x44>)
 80019fa:	2104      	movs	r1, #4
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ffce 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d10a      	bne.n	8001a1c <system_is_disabled+0x28>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <system_is_disabled+0x44>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f7ff ffc5 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a14:	1e03      	subs	r3, r0, #0
 8001a16:	d101      	bne.n	8001a1c <system_is_disabled+0x28>
		return 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e009      	b.n	8001a30 <system_is_disabled+0x3c>
	} else if (LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2)) {
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <system_is_disabled+0x44>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ffbc 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <system_is_disabled+0x3a>
		return 1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <system_is_disabled+0x3c>
	} else {
		return 0;
 8001a2e:	2300      	movs	r3, #0
	}
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	50000800 	.word	0x50000800

08001a3c <reset_measure>:

/**
  * @brief  reset measures
  * @retval None
  */
void reset_measure() { // reset measure
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	first_brightness_mesure = 0;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <reset_measure+0x1c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	first_temperature_mesure = 0;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <reset_measure+0x20>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	first_pressure_mesure = 0;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <reset_measure+0x24>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200000c0 	.word	0x200000c0
 8001a5c:	200000c8 	.word	0x200000c8
 8001a60:	200000c4 	.word	0x200000c4

08001a64 <enable_system>:

/**
  * @brief  Enable system and activate alarm
  * @retval None
  */
void enable_system() { // enable system
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	reset_measure();
 8001a6a:	f7ff ffe7 	bl	8001a3c <reset_measure>
	// check if led are active or not
	if ((!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) || LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2)) {
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <enable_system+0xa0>)
 8001a70:	2104      	movs	r1, #4
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff ff93 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d108      	bne.n	8001a8e <enable_system+0x2a>
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <enable_system+0xa0>)
 8001a82:	0019      	movs	r1, r3
 8001a84:	0010      	movs	r0, r2
 8001a86:	f7ff ff8a 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d006      	beq.n	8001a9c <enable_system+0x38>
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <enable_system+0xa0>)
 8001a90:	2104      	movs	r1, #4
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ff83 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d029      	beq.n	8001af0 <enable_system+0x8c>
		printf("Système armé\r\n"); //print system enabling
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <enable_system+0xa4>)
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 feda 	bl	8002858 <puts>
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <enable_system+0xa0>)
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff ff96 	bl	80019da <LL_GPIO_ResetOutputPin>
			LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_8);
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <enable_system+0xa0>)
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	0010      	movs	r0, r2
 8001ab8:	f7ff ff83 	bl	80019c2 <LL_GPIO_SetOutputPin>
			// enable alarm (3 bip)
			for (int i=0; i<3; i++) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	e012      	b.n	8001ae8 <enable_system+0x84>
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <enable_system+0xa0>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff ff7b 	bl	80019c2 <LL_GPIO_SetOutputPin>
				LL_mDelay(200); // 500ms delay
 8001acc:	20c8      	movs	r0, #200	; 0xc8
 8001ace:	f7ff fa51 	bl	8000f74 <LL_mDelay>
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <enable_system+0xa0>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff ff7f 	bl	80019da <LL_GPIO_ResetOutputPin>
				LL_mDelay(200); // 500ms delay
 8001adc:	20c8      	movs	r0, #200	; 0xc8
 8001ade:	f7ff fa49 	bl	8000f74 <LL_mDelay>
			for (int i=0; i<3; i++) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	dde9      	ble.n	8001ac2 <enable_system+0x5e>
 8001aee:	e004      	b.n	8001afa <enable_system+0x96>
			}
	} else {
		printf("Votre système est déjà armé\r\n");
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <enable_system+0xa8>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 feb0 	bl	8002858 <puts>
	}

}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	50000800 	.word	0x50000800
 8001b08:	0800380c 	.word	0x0800380c
 8001b0c:	0800381c 	.word	0x0800381c

08001b10 <disable_system>:

/**
  * @brief  Disable system and check user password
  * @retval None
  */
void disable_system() { // disable system
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b092      	sub	sp, #72	; 0x48
 8001b14:	af00      	add	r7, sp, #0
	memset(password, '\0', sizeof(password));
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <disable_system+0x170>)
 8001b18:	2232      	movs	r2, #50	; 0x32
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 fe07 	bl	8002730 <memset>
	char visible_password[50] = "";
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	222e      	movs	r2, #46	; 0x2e
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 fdfe 	bl	8002730 <memset>
	if ((!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2) && !LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) || LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_8)) {
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <disable_system+0x174>)
 8001b36:	2104      	movs	r1, #4
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff ff30 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d108      	bne.n	8001b54 <disable_system+0x44>
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <disable_system+0x174>)
 8001b48:	0019      	movs	r1, r3
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	f7ff ff27 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d009      	beq.n	8001b68 <disable_system+0x58>
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4a4a      	ldr	r2, [pc, #296]	; (8001c84 <disable_system+0x174>)
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	f7ff ff1e 	bl	800199e <LL_GPIO_IsInputPinSet>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d100      	bne.n	8001b68 <disable_system+0x58>
 8001b66:	e081      	b.n	8001c6c <disable_system+0x15c>
		printf("Veuillez saisir votre mot de passe:\r\n");
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <disable_system+0x178>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fe74 	bl	8002858 <puts>
		while(1) {
			if (kbhit()) {
 8001b70:	f000 fb70 	bl	8002254 <kbhit>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d0fb      	beq.n	8001b70 <disable_system+0x60>
				char c = getch();
 8001b78:	2543      	movs	r5, #67	; 0x43
 8001b7a:	197c      	adds	r4, r7, r5
 8001b7c:	f000 fb4a 	bl	8002214 <getch>
 8001b80:	0003      	movs	r3, r0
 8001b82:	7023      	strb	r3, [r4, #0]
				int len = strlen(password);
 8001b84:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <disable_system+0x170>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fac8 	bl	800011c <strlen>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
				int len_v = strlen(visible_password);
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fac2 	bl	800011c <strlen>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38

				// reset password
				if (c == '*') {
 8001b9c:	197b      	adds	r3, r7, r5
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ba2:	d102      	bne.n	8001baa <disable_system+0x9a>
					disable_system();
 8001ba4:	f7ff ffb4 	bl	8001b10 <disable_system>
					break;
 8001ba8:	e036      	b.n	8001c18 <disable_system+0x108>
				}

				if (c == 0x08) {
 8001baa:	2343      	movs	r3, #67	; 0x43
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d10a      	bne.n	8001bca <disable_system+0xba>
					password[len] = '\0';
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <disable_system+0x170>)
 8001bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
					visible_password[len_v] = '\0';
 8001bbe:	1d3a      	adds	r2, r7, #4
 8001bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc2:	18d3      	adds	r3, r2, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e015      	b.n	8001bf6 <disable_system+0xe6>
				} else {
					// print password
					visible_password[len_v] = '*';
 8001bca:	1d3a      	adds	r2, r7, #4
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	222a      	movs	r2, #42	; 0x2a
 8001bd2:	701a      	strb	r2, [r3, #0]
					visible_password[len_v+1] = '\0';
 8001bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	1d3a      	adds	r2, r7, #4
 8001bda:	2100      	movs	r1, #0
 8001bdc:	54d1      	strb	r1, [r2, r3]
					password[len] = c;
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <disable_system+0x170>)
 8001be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be2:	18d3      	adds	r3, r2, r3
 8001be4:	2243      	movs	r2, #67	; 0x43
 8001be6:	18ba      	adds	r2, r7, r2
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	701a      	strb	r2, [r3, #0]
					password[len+1] = '\0';
 8001bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <disable_system+0x170>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	54d1      	strb	r1, [r2, r3]
				}


				printf("Mot de passe:%s\r\n", visible_password);
 8001bf6:	1d3a      	adds	r2, r7, #4
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <disable_system+0x17c>)
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fd9f 	bl	8002740 <iprintf>
				// compare password
				if (strcmp(password, CONF_PASSWORD) == 0) {
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <disable_system+0x180>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <disable_system+0x170>)
 8001c08:	0011      	movs	r1, r2
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fa7c 	bl	8000108 <strcmp>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d000      	beq.n	8001c16 <disable_system+0x106>
			if (kbhit()) {
 8001c14:	e7ac      	b.n	8001b70 <disable_system+0x60>
					break;
 8001c16:	46c0      	nop			; (mov r8, r8)
				}
			}
		}

		printf("Désactivation du système\r\n"); //print system disabling
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <disable_system+0x184>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 fe1c 	bl	8002858 <puts>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <disable_system+0x174>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fecc 	bl	80019c2 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <disable_system+0x174>)
 8001c30:	0019      	movs	r1, r3
 8001c32:	0010      	movs	r0, r2
 8001c34:	f7ff fed1 	bl	80019da <LL_GPIO_ResetOutputPin>
		// disable alarm (2 bip)
		for (int i=0; i<2; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3c:	e012      	b.n	8001c64 <disable_system+0x154>
			LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <disable_system+0x174>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff febd 	bl	80019c2 <LL_GPIO_SetOutputPin>
			LL_mDelay(200); // 500ms delay
 8001c48:	20c8      	movs	r0, #200	; 0xc8
 8001c4a:	f7ff f993 	bl	8000f74 <LL_mDelay>
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <disable_system+0x174>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff fec1 	bl	80019da <LL_GPIO_ResetOutputPin>
			LL_mDelay(200); // 500ms delay
 8001c58:	20c8      	movs	r0, #200	; 0xc8
 8001c5a:	f7ff f98b 	bl	8000f74 <LL_mDelay>
		for (int i=0; i<2; i++) {
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c60:	3301      	adds	r3, #1
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	dde9      	ble.n	8001c3e <disable_system+0x12e>
 8001c6a:	e004      	b.n	8001c76 <disable_system+0x166>
		}
	} else {
		printf("Votre système est déjà désarmé\r\n");
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <disable_system+0x188>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fdf2 	bl	8002858 <puts>
	}
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b012      	add	sp, #72	; 0x48
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	2000008c 	.word	0x2000008c
 8001c84:	50000800 	.word	0x50000800
 8001c88:	08003840 	.word	0x08003840
 8001c8c:	08003868 	.word	0x08003868
 8001c90:	20000000 	.word	0x20000000
 8001c94:	0800387c 	.word	0x0800387c
 8001c98:	08003898 	.word	0x08003898

08001c9c <launch_alert>:

/**
  * @brief  Start alert sound
  * @retval None
  */
void launch_alert(char* category) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	// start alarm
	while (1) {
		printf("ALERTE!! Système compromis\r\n");
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <launch_alert+0x64>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 fdd6 	bl	8002858 <puts>
		printf("Erreur de %s\r\n", category);
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <launch_alert+0x68>)
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fd44 	bl	8002740 <iprintf>
		LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0); // set
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <launch_alert+0x6c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fe80 	bl	80019c2 <LL_GPIO_SetOutputPin>
		LL_mDelay(100); // 500ms delay
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f7ff f956 	bl	8000f74 <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0); // reset
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <launch_alert+0x6c>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff fe84 	bl	80019da <LL_GPIO_ResetOutputPin>
		LL_mDelay(100); // 500ms delay
 8001cd2:	2064      	movs	r0, #100	; 0x64
 8001cd4:	f7ff f94e 	bl	8000f74 <LL_mDelay>
		if (kbhit()) {
 8001cd8:	f000 fabc 	bl	8002254 <kbhit>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d0e1      	beq.n	8001ca4 <launch_alert+0x8>
			// stop alarm
			if (getch() == 's') {
 8001ce0:	f000 fa98 	bl	8002214 <getch>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	2b73      	cmp	r3, #115	; 0x73
 8001ce8:	d1dc      	bne.n	8001ca4 <launch_alert+0x8>
				printf("Alerte désactivée\r\n");
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <launch_alert+0x70>)
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 fdb3 	bl	8002858 <puts>
				disable_system();
 8001cf2:	f7ff ff0d 	bl	8001b10 <disable_system>
				break;
 8001cf6:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	080038c0 	.word	0x080038c0
 8001d04:	080038e0 	.word	0x080038e0
 8001d08:	50000800 	.word	0x50000800
 8001d0c:	080038f0 	.word	0x080038f0

08001d10 <check_values>:

/**
  * @brief Compare current measure with references
  * @retval None
  */
void check_values(uint16_t ref, uint16_t current_value, uint16_t threshold, char* category) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	0004      	movs	r4, r0
 8001d18:	0008      	movs	r0, r1
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	250e      	movs	r5, #14
 8001d20:	197b      	adds	r3, r7, r5
 8001d22:	1c22      	adds	r2, r4, #0
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	240c      	movs	r4, #12
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	1c02      	adds	r2, r0, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	230a      	movs	r3, #10
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	1c0a      	adds	r2, r1, #0
 8001d34:	801a      	strh	r2, [r3, #0]
	// compare values with references
	if (current_value < (ref / 2) || current_value > (ref * 2)) {
 8001d36:	0029      	movs	r1, r5
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	193a      	adds	r2, r7, r4
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d306      	bcc.n	8001d56 <check_values+0x46>
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dd03      	ble.n	8001d5e <check_values+0x4e>
		launch_alert(category);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff9f 	bl	8001c9c <launch_alert>
	}
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d68 <check_brightness>:

/**
  * @brief  Measure brightness and update reference if it's first one
  * @retval None
  */
void check_brightness(uint16_t threshold) {
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	801a      	strh	r2, [r3, #0]
	// check brightness level
	if (system_is_disabled() == 0) {
 8001d74:	f7ff fe3e 	bl	80019f4 <system_is_disabled>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d131      	bne.n	8001de0 <check_brightness+0x78>
		// launch conversion
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_11);
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <check_brightness+0x80>)
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <check_brightness+0x84>)
 8001d80:	0011      	movs	r1, r2
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff fc62 	bl	800164c <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <check_brightness+0x84>)
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fc7e 	bl	800168c <LL_ADC_REG_StartConversion>
		// wait
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <check_brightness+0x84>)
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fc96 	bl	80016c6 <LL_ADC_IsActiveFlag_EOC>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d0f9      	beq.n	8001d92 <check_brightness+0x2a>
		int t = LL_ADC_REG_ReadConversionData12(ADC1);
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <check_brightness+0x84>)
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fc85 	bl	80016b0 <LL_ADC_REG_ReadConversionData12>
 8001da6:	0003      	movs	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]
		if (first_brightness_mesure == 0) {
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <check_brightness+0x88>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <check_brightness+0x58>
		  brightness_ref = t;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <check_brightness+0x8c>)
 8001db8:	801a      	strh	r2, [r3, #0]
		  first_brightness_mesure = 1;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <check_brightness+0x88>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
		}
		printf("Brightness:%i\r\n\n", t);
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <check_brightness+0x90>)
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fcba 	bl	8002740 <iprintf>
		// compare values
		check_values(brightness_ref, t, threshold, "Luminosité");
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <check_brightness+0x8c>)
 8001dce:	8818      	ldrh	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	4c09      	ldr	r4, [pc, #36]	; (8001dfc <check_brightness+0x94>)
 8001dd6:	1dbb      	adds	r3, r7, #6
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	0023      	movs	r3, r4
 8001ddc:	f7ff ff98 	bl	8001d10 <check_values>
	}
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b005      	add	sp, #20
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	2c000800 	.word	0x2c000800
 8001dec:	40012400 	.word	0x40012400
 8001df0:	200000c0 	.word	0x200000c0
 8001df4:	200000be 	.word	0x200000be
 8001df8:	08003908 	.word	0x08003908
 8001dfc:	0800391c 	.word	0x0800391c

08001e00 <check_pressure>:

/**
  * @brief  Measure pressure level and update reference if it's first one
  * @retval None
  */
void check_pressure(uint16_t threshold) {
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	0002      	movs	r2, r0
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	801a      	strh	r2, [r3, #0]
	// check pressure level
	if (system_is_disabled() == 0) {
 8001e0c:	f7ff fdf2 	bl	80019f4 <system_is_disabled>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d131      	bne.n	8001e78 <check_pressure+0x78>
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_13);
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <check_pressure+0x80>)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <check_pressure+0x84>)
 8001e18:	0011      	movs	r1, r2
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7ff fc16 	bl	800164c <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <check_pressure+0x84>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fc32 	bl	800168c <LL_ADC_REG_StartConversion>
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <check_pressure+0x84>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fc4a 	bl	80016c6 <LL_ADC_IsActiveFlag_EOC>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d0f9      	beq.n	8001e2a <check_pressure+0x2a>
		int p = LL_ADC_REG_ReadConversionData12(ADC1);
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <check_pressure+0x84>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fc39 	bl	80016b0 <LL_ADC_REG_ReadConversionData12>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]
		if (first_pressure_mesure == 0) {
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <check_pressure+0x88>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <check_pressure+0x58>
		  pressure_ref = p;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <check_pressure+0x8c>)
 8001e50:	801a      	strh	r2, [r3, #0]
		  first_pressure_mesure = 1;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <check_pressure+0x88>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
		}
		printf("Pressure:%i\r\n\n", p);
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <check_pressure+0x90>)
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fc6e 	bl	8002740 <iprintf>
		check_values(pressure_ref, p, threshold, "Pression");
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <check_pressure+0x8c>)
 8001e66:	8818      	ldrh	r0, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	4c09      	ldr	r4, [pc, #36]	; (8001e94 <check_pressure+0x94>)
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	0023      	movs	r3, r4
 8001e74:	f7ff ff4c 	bl	8001d10 <check_values>
	}
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b005      	add	sp, #20
 8001e7e:	bd90      	pop	{r4, r7, pc}
 8001e80:	34002000 	.word	0x34002000
 8001e84:	40012400 	.word	0x40012400
 8001e88:	200000c4 	.word	0x200000c4
 8001e8c:	200000c2 	.word	0x200000c2
 8001e90:	08003928 	.word	0x08003928
 8001e94:	08003938 	.word	0x08003938

08001e98 <check_temperature>:

/**
  * @brief  Measure temperature and update reference if it's first one
  * @retval None
  */
void check_temperature(uint16_t threshold) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	801a      	strh	r2, [r3, #0]
	// check temperature level
	if (system_is_disabled() == 0) {
 8001ea4:	f7ff fda6 	bl	80019f4 <system_is_disabled>
 8001ea8:	1e03      	subs	r3, r0, #0
 8001eaa:	d14d      	bne.n	8001f48 <check_temperature+0xb0>
		LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_15);
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <check_temperature+0xb8>)
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <check_temperature+0xbc>)
 8001eb0:	0011      	movs	r1, r2
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff fbca 	bl	800164c <LL_ADC_REG_SetSequencerChannels>
		LL_ADC_REG_StartConversion(ADC1);
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <check_temperature+0xbc>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fbe6 	bl	800168c <LL_ADC_REG_StartConversion>
		while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <check_temperature+0xbc>)
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff fbfe 	bl	80016c6 <LL_ADC_IsActiveFlag_EOC>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d0f9      	beq.n	8001ec2 <check_temperature+0x2a>
		int h = LL_ADC_REG_ReadConversionData12(ADC1);
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <check_temperature+0xbc>)
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff fbed 	bl	80016b0 <LL_ADC_REG_ReadConversionData12>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]
		if (first_temperature_mesure == 0) {
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <check_temperature+0xc0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <check_temperature+0x58>
		  temperature_ref = h;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <check_temperature+0xc4>)
 8001ee8:	801a      	strh	r2, [r3, #0]
		  first_temperature_mesure = 1;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <check_temperature+0xc0>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
		}
		uint16_t tension = (h*3300) / 4096;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <check_temperature+0xc8>)
 8001ef4:	4353      	muls	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da02      	bge.n	8001f00 <check_temperature+0x68>
 8001efa:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <check_temperature+0xcc>)
 8001efc:	4694      	mov	ip, r2
 8001efe:	4463      	add	r3, ip
 8001f00:	131b      	asrs	r3, r3, #12
 8001f02:	001a      	movs	r2, r3
 8001f04:	240a      	movs	r4, #10
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	801a      	strh	r2, [r3, #0]
		uint16_t temp = (tension - 500) / 10;
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	3bf5      	subs	r3, #245	; 0xf5
 8001f10:	3bff      	subs	r3, #255	; 0xff
 8001f12:	210a      	movs	r1, #10
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe f99d 	bl	8000254 <__divsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	2108      	movs	r1, #8
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	801a      	strh	r2, [r3, #0]
		printf("Temperature:%i°c (%imV)\r\n\n", temp, tension);
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	8819      	ldrh	r1, [r3, #0]
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <check_temperature+0xd0>)
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 fc06 	bl	8002740 <iprintf>
		check_values(temperature_ref, h, threshold, "Temperature");
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <check_temperature+0xc4>)
 8001f36:	8818      	ldrh	r0, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	4c0b      	ldr	r4, [pc, #44]	; (8001f6c <check_temperature+0xd4>)
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	0023      	movs	r3, r4
 8001f44:	f7ff fee4 	bl	8001d10 <check_values>
	}
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b005      	add	sp, #20
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	3c008000 	.word	0x3c008000
 8001f54:	40012400 	.word	0x40012400
 8001f58:	200000c8 	.word	0x200000c8
 8001f5c:	200000c6 	.word	0x200000c6
 8001f60:	00000ce4 	.word	0x00000ce4
 8001f64:	00000fff 	.word	0x00000fff
 8001f68:	08003944 	.word	0x08003944
 8001f6c:	08003960 	.word	0x08003960

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff fc79 	bl	800186c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	055b      	lsls	r3, r3, #21
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff fc5e 	bl	8001840 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 f874 	bl	8002070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f7ff fa96 	bl	80014b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f8c:	f000 fafe 	bl	800258c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001f90:	f7ff f912 	bl	80011b8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  getchInit();
 8001f94:	f000 f934 	bl	8002200 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <main+0xd8>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff fcd1 	bl	8001942 <LL_USART_EnableIT_RXNE>
  printf("Ready !!!!\r\n"); //print it
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <main+0xdc>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fc58 	bl	8002858 <puts>
  // printf("\x1B[2J"); //Efface l'écran
  LL_ADC_Enable(ADC1);
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <main+0xe0>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff fb5c 	bl	8001668 <LL_ADC_Enable>
  LL_SYSTICK_EnableIT();
 8001fb0:	f7ff fc92 	bl	80018d8 <LL_SYSTICK_EnableIT>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <main+0xe4>)
 8001fba:	0019      	movs	r1, r3
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	f7ff fb31 	bl	8001624 <LL_ADC_SetCommonPathInternalCh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (tick_1000ms_elapsed == 1) {
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <main+0xe8>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2a01      	cmp	r2, #1
 8001fca:	d122      	bne.n	8002012 <main+0xa2>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d120      	bne.n	8002012 <main+0xa2>
		/* each seconds */
		if (system_is_disabled() == 0) {
 8001fd0:	f7ff fd10 	bl	80019f4 <system_is_disabled>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d117      	bne.n	8002008 <main+0x98>
			printf("\n---------------------------------------\r\n");
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <main+0xec>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fc3c 	bl	8002858 <puts>
			printf("\n------------ Parameters --------------- \r\n");
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <main+0xf0>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f000 fc38 	bl	8002858 <puts>
			check_temperature(5000);
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <main+0xf4>)
 8001fea:	0018      	movs	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <check_temperature>
			check_brightness(5000);
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <main+0xf4>)
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff feb8 	bl	8001d68 <check_brightness>
			check_pressure(5000);
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <main+0xf4>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff ff00 	bl	8001e00 <check_pressure>
			printf("---------------------------------------\r\n");
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <main+0xf8>)
 8002002:	0018      	movs	r0, r3
 8002004:	f000 fc28 	bl	8002858 <puts>
		}
		/* reset tick */
		tick_1000ms_elapsed = 0;
 8002008:	4913      	ldr	r1, [pc, #76]	; (8002058 <main+0xe8>)
 800200a:	2200      	movs	r2, #0
 800200c:	2300      	movs	r3, #0
 800200e:	600a      	str	r2, [r1, #0]
 8002010:	604b      	str	r3, [r1, #4]
	}
	if (kbhit()) /* if one char received on USART2 */
 8002012:	f000 f91f 	bl	8002254 <kbhit>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d014      	beq.n	8002044 <main+0xd4>
	{
	  switch(getch()) {
 800201a:	f000 f8fb 	bl	8002214 <getch>
 800201e:	0003      	movs	r3, r0
 8002020:	2b61      	cmp	r3, #97	; 0x61
 8002022:	d00a      	beq.n	800203a <main+0xca>
 8002024:	dccd      	bgt.n	8001fc2 <main+0x52>
 8002026:	2b30      	cmp	r3, #48	; 0x30
 8002028:	d004      	beq.n	8002034 <main+0xc4>
 800202a:	2b31      	cmp	r3, #49	; 0x31
 800202c:	d1c9      	bne.n	8001fc2 <main+0x52>
	  case '1': /* enable */
		  enable_system();
 800202e:	f7ff fd19 	bl	8001a64 <enable_system>
		  break;
 8002032:	e008      	b.n	8002046 <main+0xd6>
	  case '0': /* disable */
		  disable_system();
 8002034:	f7ff fd6c 	bl	8001b10 <disable_system>
		  break;
 8002038:	e005      	b.n	8002046 <main+0xd6>
	  case 'a': /* launch alert */
		  launch_alert("manual");
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <main+0xfc>)
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff fe2d 	bl	8001c9c <launch_alert>
		  break;
 8002042:	e000      	b.n	8002046 <main+0xd6>
	  }
	}
 8002044:	46c0      	nop			; (mov r8, r8)
	if (tick_1000ms_elapsed == 1) {
 8002046:	e7bc      	b.n	8001fc2 <main+0x52>
 8002048:	40004400 	.word	0x40004400
 800204c:	0800396c 	.word	0x0800396c
 8002050:	40012400 	.word	0x40012400
 8002054:	40012708 	.word	0x40012708
 8002058:	200000d0 	.word	0x200000d0
 800205c:	08003978 	.word	0x08003978
 8002060:	080039a4 	.word	0x080039a4
 8002064:	00001388 	.word	0x00001388
 8002068:	080039d0 	.word	0x080039d0
 800206c:	080039fc 	.word	0x080039fc

08002070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fc0f 	bl	8001898 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	f7ff fc20 	bl	80018c0 <LL_FLASH_GetLatency>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d1fb      	bne.n	800207c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff fc33 	bl	80018f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800208e:	f7ff fb2b 	bl	80016e8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	f7ff fb36 	bl	8001704 <LL_RCC_HSI_IsReady>
 8002098:	0003      	movs	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d1fa      	bne.n	8002094 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff fb40 	bl	8001724 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fb73 	bl	8001790 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fb84 	bl	80017b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fb97 	bl	80017e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff fb4a 	bl	8001750 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	f7ff fb5b 	bl	8001778 <LL_RCC_GetSysClkSource>
 80020c2:	0003      	movs	r3, r0
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d1fa      	bne.n	80020be <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <SystemClock_Config+0x78>)
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe ff42 	bl	8000f54 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SystemClock_Config+0x78>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe ff70 	bl	8000fb8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	031b      	lsls	r3, r3, #12
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fb97 	bl	8001810 <LL_RCC_SetUSARTClockSource>
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00f42400 	.word	0x00f42400

080020ec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char * ptr, int len)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len;i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e013      	b.n	8002126 <_write+0x3a>
  {
    while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <_write+0x4c>)
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fc0c 	bl	8001920 <LL_USART_IsActiveFlag_TXE>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d0f9      	beq.n	8002100 <_write+0x14>
    LL_USART_TransmitData8(USART2,*ptr);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <_write+0x4c>)
 8002112:	0019      	movs	r1, r3
 8002114:	0010      	movs	r0, r2
 8002116:	f7ff fc33 	bl	8001980 <LL_USART_TransmitData8>
    ptr++;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
  for (int i=0; i<len;i++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbe7      	blt.n	80020fe <_write+0x12>
  }
return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40004400 	.word	0x40004400

0800213c <LL_USART_IsActiveFlag_RXNE>:
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2220      	movs	r2, #32
 800214a:	4013      	ands	r3, r2
 800214c:	2b20      	cmp	r3, #32
 800214e:	d101      	bne.n	8002154 <LL_USART_IsActiveFlag_RXNE+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <LL_USART_ReceiveData8>:
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	b2db      	uxtb	r3, r3
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler+0x4>

08002184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	// each ms
	ms_ticks++;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <SysTick_Handler+0x30>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <SysTick_Handler+0x30>)
 80021a4:	601a      	str	r2, [r3, #0]

	// each second
	if (ms_ticks % 100 == 0) {
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <SysTick_Handler+0x30>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2164      	movs	r1, #100	; 0x64
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7fe f84d 	bl	800024c <__aeabi_uidivmod>
 80021b2:	1e0b      	subs	r3, r1, #0
 80021b4:	d104      	bne.n	80021c0 <SysTick_Handler+0x28>
		tick_1000ms_elapsed = 1;
 80021b6:	4905      	ldr	r1, [pc, #20]	; (80021cc <SysTick_Handler+0x34>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	2300      	movs	r3, #0
 80021bc:	600a      	str	r2, [r1, #0]
 80021be:	604b      	str	r3, [r1, #4]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	200000dc 	.word	0x200000dc
 80021cc:	200000d0 	.word	0x200000d0

080021d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <USART2_IRQHandler+0x28>)
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff ffb0 	bl	800213c <LL_USART_IsActiveFlag_RXNE>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d007      	beq.n	80021f0 <USART2_IRQHandler+0x20>
  {
    g_rxCarUSART2=LL_USART_ReceiveData8(USART2);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <USART2_IRQHandler+0x28>)
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ffbb 	bl	800215e <LL_USART_ReceiveData8>
 80021e8:	0003      	movs	r3, r0
 80021ea:	001a      	movs	r2, r3
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <USART2_IRQHandler+0x2c>)
 80021ee:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40004400 	.word	0x40004400
 80021fc:	200000d8 	.word	0x200000d8

08002200 <getchInit>:

/* USER CODE BEGIN 1 */
void getchInit(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	g_rxCarUSART2=255; //no char received
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <getchInit+0x10>)
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200000d8 	.word	0x200000d8

08002214 <getch>:

//Return  a char received on UART2
// Wait if none received yet
uint8_t getch(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  volatile uint8_t l_car=1;
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
  do
  {
	if (g_rxCarUSART2==255)
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <getch+0x3c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2bff      	cmp	r3, #255	; 0xff
 8002226:	d100      	bne.n	800222a <getch+0x16>
	{
	  __WFI(); //wait for interrupt (for a key ==> data RX)
 8002228:	bf30      	wfi
	}
  }
  while(g_rxCarUSART2==255); //while no char received
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <getch+0x3c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d0f6      	beq.n	8002220 <getch+0xc>

  l_car=g_rxCarUSART2; //save received data
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <getch+0x3c>)
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	701a      	strb	r2, [r3, #0]
  g_rxCarUSART2=255; //clear char received
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <getch+0x3c>)
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	701a      	strb	r2, [r3, #0]
  return l_car; //return received data
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	200000d8 	.word	0x200000d8

08002254 <kbhit>:
//Return 1 if a char received on UART2
// else 0
int kbhit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
 if(g_rxCarUSART2==255)
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <kbhit+0x18>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2bff      	cmp	r3, #255	; 0xff
 800225e:	d101      	bne.n	8002264 <kbhit+0x10>
   return 0;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <kbhit+0x12>
 else
   return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200000d8 	.word	0x200000d8

08002270 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00a      	b.n	8002298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002282:	e000      	b.n	8002286 <_read+0x16>
 8002284:	bf00      	nop
 8002286:	0001      	movs	r1, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf0      	blt.n	8002282 <_read+0x12>
	}

return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b006      	add	sp, #24
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	return -1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	425b      	negs	r3, r3
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b002      	add	sp, #8
 80022bc:	bd80      	pop	{r7, pc}

080022be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	0192      	lsls	r2, r2, #6
 80022ce:	605a      	str	r2, [r3, #4]
	return 0;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x50>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x16>
		heap_end = &end;
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <_sbrk+0x50>)
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <_sbrk+0x54>)
 8002318:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <_sbrk+0x50>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <_sbrk+0x50>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	466b      	mov	r3, sp
 800232a:	429a      	cmp	r2, r3
 800232c:	d907      	bls.n	800233e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800232e:	f000 f9d5 	bl	80026dc <__errno>
 8002332:	0003      	movs	r3, r0
 8002334:	220c      	movs	r2, #12
 8002336:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002338:	2301      	movs	r3, #1
 800233a:	425b      	negs	r3, r3
 800233c:	e006      	b.n	800234c <_sbrk+0x48>
	}

	heap_end += incr;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <_sbrk+0x50>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	18d2      	adds	r2, r2, r3
 8002346:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_sbrk+0x50>)
 8002348:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200000e0 	.word	0x200000e0
 8002358:	200000f8 	.word	0x200000f8

0800235c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <SystemInit+0x64>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <SystemInit+0x64>)
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	0049      	lsls	r1, r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <SystemInit+0x64>)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <SystemInit+0x64>)
 8002374:	4913      	ldr	r1, [pc, #76]	; (80023c4 <SystemInit+0x68>)
 8002376:	400a      	ands	r2, r1
 8002378:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <SystemInit+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <SystemInit+0x64>)
 8002380:	4911      	ldr	r1, [pc, #68]	; (80023c8 <SystemInit+0x6c>)
 8002382:	400a      	ands	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <SystemInit+0x64>)
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <SystemInit+0x64>)
 800238c:	2101      	movs	r1, #1
 800238e:	438a      	bics	r2, r1
 8002390:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <SystemInit+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <SystemInit+0x64>)
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <SystemInit+0x70>)
 800239a:	400a      	ands	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <SystemInit+0x64>)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <SystemInit+0x64>)
 80023a4:	490a      	ldr	r1, [pc, #40]	; (80023d0 <SystemInit+0x74>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <SystemInit+0x64>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <SystemInit+0x78>)
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0512      	lsls	r2, r2, #20
 80023b6:	609a      	str	r2, [r3, #8]
#endif
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	88ff400c 	.word	0x88ff400c
 80023c8:	fef6fff6 	.word	0xfef6fff6
 80023cc:	fffbffff 	.word	0xfffbffff
 80023d0:	ff02ffff 	.word	0xff02ffff
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	0002      	movs	r2, r0
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ea:	d809      	bhi.n	8002400 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	001a      	movs	r2, r3
 80023f2:	231f      	movs	r3, #31
 80023f4:	401a      	ands	r2, r3
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_EnableIRQ+0x30>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	4091      	lsls	r1, r2
 80023fc:	000a      	movs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
  }
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	0002      	movs	r2, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b7f      	cmp	r3, #127	; 0x7f
 8002420:	d828      	bhi.n	8002474 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <__NVIC_SetPriority+0xd4>)
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	33c0      	adds	r3, #192	; 0xc0
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	589b      	ldr	r3, [r3, r2]
 8002432:	1dfa      	adds	r2, r7, #7
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	0011      	movs	r1, r2
 8002438:	2203      	movs	r2, #3
 800243a:	400a      	ands	r2, r1
 800243c:	00d2      	lsls	r2, r2, #3
 800243e:	21ff      	movs	r1, #255	; 0xff
 8002440:	4091      	lsls	r1, r2
 8002442:	000a      	movs	r2, r1
 8002444:	43d2      	mvns	r2, r2
 8002446:	401a      	ands	r2, r3
 8002448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	401a      	ands	r2, r3
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	0018      	movs	r0, r3
 8002458:	2303      	movs	r3, #3
 800245a:	4003      	ands	r3, r0
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002460:	481f      	ldr	r0, [pc, #124]	; (80024e0 <__NVIC_SetPriority+0xd4>)
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b25b      	sxtb	r3, r3
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	430a      	orrs	r2, r1
 800246c:	33c0      	adds	r3, #192	; 0xc0
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002472:	e031      	b.n	80024d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <__NVIC_SetPriority+0xd8>)
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	0019      	movs	r1, r3
 800247c:	230f      	movs	r3, #15
 800247e:	400b      	ands	r3, r1
 8002480:	3b08      	subs	r3, #8
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3306      	adds	r3, #6
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	3304      	adds	r3, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1dfa      	adds	r2, r7, #7
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	0011      	movs	r1, r2
 8002494:	2203      	movs	r2, #3
 8002496:	400a      	ands	r2, r1
 8002498:	00d2      	lsls	r2, r2, #3
 800249a:	21ff      	movs	r1, #255	; 0xff
 800249c:	4091      	lsls	r1, r2
 800249e:	000a      	movs	r2, r1
 80024a0:	43d2      	mvns	r2, r2
 80024a2:	401a      	ands	r2, r3
 80024a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	401a      	ands	r2, r3
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	2303      	movs	r3, #3
 80024b6:	4003      	ands	r3, r0
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <__NVIC_SetPriority+0xd8>)
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	001c      	movs	r4, r3
 80024c4:	230f      	movs	r3, #15
 80024c6:	4023      	ands	r3, r4
 80024c8:	3b08      	subs	r3, #8
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	430a      	orrs	r2, r1
 80024ce:	3306      	adds	r3, #6
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	18c3      	adds	r3, r0, r3
 80024d4:	3304      	adds	r3, #4
 80024d6:	601a      	str	r2, [r3, #0]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b003      	add	sp, #12
 80024de:	bd90      	pop	{r4, r7, pc}
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <LL_APB1_GRP1_EnableClock>:
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <LL_APB1_GRP1_EnableClock+0x28>)
 80024f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <LL_APB1_GRP1_EnableClock+0x28>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <LL_APB1_GRP1_EnableClock+0x28>)
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b004      	add	sp, #16
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <LL_IOP_GRP1_EnableClock>:
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <LL_IOP_GRP1_EnableClock+0x28>)
 800251e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <LL_IOP_GRP1_EnableClock+0x28>)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	430a      	orrs	r2, r1
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <LL_IOP_GRP1_EnableClock+0x28>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <LL_USART_Enable>:
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	601a      	str	r2, [r3, #0]
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <LL_USART_ConfigAsyncMode>:
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <LL_USART_ConfigAsyncMode+0x2c>)
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	222a      	movs	r2, #42	; 0x2a
 8002576:	4393      	bics	r3, r2
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	ffffb7ff 	.word	0xffffb7ff

0800258c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b08f      	sub	sp, #60	; 0x3c
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002592:	241c      	movs	r4, #28
 8002594:	193b      	adds	r3, r7, r4
 8002596:	0018      	movs	r0, r3
 8002598:	231c      	movs	r3, #28
 800259a:	001a      	movs	r2, r3
 800259c:	2100      	movs	r1, #0
 800259e:	f000 f8c7 	bl	8002730 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	0018      	movs	r0, r3
 80025a6:	2318      	movs	r3, #24
 80025a8:	001a      	movs	r2, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	f000 f8c0 	bl	8002730 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff ff97 	bl	80024e8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff ffaa 	bl	8002514 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2204      	movs	r2, #4
 80025c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2202      	movs	r2, #2
 80025ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2203      	movs	r2, #3
 80025d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2204      	movs	r2, #4
 80025e2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80025e4:	1d3a      	adds	r2, r7, #4
 80025e6:	23a0      	movs	r3, #160	; 0xa0
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fe f95f 	bl	80008b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2208      	movs	r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2202      	movs	r2, #2
 80025fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2203      	movs	r2, #3
 8002602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2204      	movs	r2, #4
 8002614:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	23a0      	movs	r3, #160	; 0xa0
 800261a:	05db      	lsls	r3, r3, #23
 800261c:	0011      	movs	r1, r2
 800261e:	0018      	movs	r0, r3
 8002620:	f7fe f946 	bl	80008b0 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002624:	2100      	movs	r1, #0
 8002626:	201c      	movs	r0, #28
 8002628:	f7ff fef0 	bl	800240c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800262c:	201c      	movs	r0, #28
 800262e:	f7ff fed3 	bl	80023d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002632:	193b      	adds	r3, r7, r4
 8002634:	22e1      	movs	r2, #225	; 0xe1
 8002636:	0252      	lsls	r2, r2, #9
 8002638:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	220c      	movs	r2, #12
 8002652:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002660:	187b      	adds	r3, r7, r1
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <MX_USART2_UART_Init+0xf8>)
 8002664:	0019      	movs	r1, r3
 8002666:	0010      	movs	r0, r2
 8002668:	f7fe fbf6 	bl	8000e58 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <MX_USART2_UART_Init+0xf8>)
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff74 	bl	800255c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <MX_USART2_UART_Init+0xf8>)
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff ff62 	bl	8002540 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b00f      	add	sp, #60	; 0x3c
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	40004400 	.word	0x40004400

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002688:	480d      	ldr	r0, [pc, #52]	; (80026c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800268e:	490e      	ldr	r1, [pc, #56]	; (80026c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002690:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <LoopForever+0xe>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026a4:	4c0b      	ldr	r4, [pc, #44]	; (80026d4 <LoopForever+0x16>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026b2:	f7ff fe53 	bl	800235c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f000 f817 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7ff fc59 	bl	8001f70 <main>

080026be <LoopForever>:

LoopForever:
    b LoopForever
 80026be:	e7fe      	b.n	80026be <LoopForever>
  ldr   r0, =_estack
 80026c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026cc:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 80026d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026d4:	200000f4 	.word	0x200000f4

080026d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC1_COMP_IRQHandler>
	...

080026dc <__errno>:
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <__errno+0x8>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4770      	bx	lr
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000008 	.word	0x20000008

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	2600      	movs	r6, #0
 80026fa:	f001 f875 	bl	80037e8 <_init>
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	00b3      	lsls	r3, r6, #2
 800270e:	58eb      	ldr	r3, [r5, r3]
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	00b3      	lsls	r3, r6, #2
 8002718:	58eb      	ldr	r3, [r5, r3]
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	08003ac0 	.word	0x08003ac0
 8002724:	08003ac0 	.word	0x08003ac0
 8002728:	08003ac0 	.word	0x08003ac0
 800272c:	08003ac4 	.word	0x08003ac4

08002730 <memset>:
 8002730:	0003      	movs	r3, r0
 8002732:	1882      	adds	r2, r0, r2
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	7019      	strb	r1, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <iprintf>:
 8002740:	b40f      	push	{r0, r1, r2, r3}
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <iprintf+0x30>)
 8002744:	b513      	push	{r0, r1, r4, lr}
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	2c00      	cmp	r4, #0
 800274a:	d005      	beq.n	8002758 <iprintf+0x18>
 800274c:	69a3      	ldr	r3, [r4, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <iprintf+0x18>
 8002752:	0020      	movs	r0, r4
 8002754:	f000 fa86 	bl	8002c64 <__sinit>
 8002758:	ab05      	add	r3, sp, #20
 800275a:	0020      	movs	r0, r4
 800275c:	9a04      	ldr	r2, [sp, #16]
 800275e:	68a1      	ldr	r1, [r4, #8]
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	f000 fc99 	bl	8003098 <_vfiprintf_r>
 8002766:	bc16      	pop	{r1, r2, r4}
 8002768:	bc08      	pop	{r3}
 800276a:	b004      	add	sp, #16
 800276c:	4718      	bx	r3
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	20000008 	.word	0x20000008

08002774 <_puts_r>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	0005      	movs	r5, r0
 8002778:	000e      	movs	r6, r1
 800277a:	2800      	cmp	r0, #0
 800277c:	d004      	beq.n	8002788 <_puts_r+0x14>
 800277e:	6983      	ldr	r3, [r0, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <_puts_r+0x14>
 8002784:	f000 fa6e 	bl	8002c64 <__sinit>
 8002788:	69ab      	ldr	r3, [r5, #24]
 800278a:	68ac      	ldr	r4, [r5, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_puts_r+0x22>
 8002790:	0028      	movs	r0, r5
 8002792:	f000 fa67 	bl	8002c64 <__sinit>
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <_puts_r+0xd8>)
 8002798:	429c      	cmp	r4, r3
 800279a:	d122      	bne.n	80027e2 <_puts_r+0x6e>
 800279c:	686c      	ldr	r4, [r5, #4]
 800279e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027a0:	07db      	lsls	r3, r3, #31
 80027a2:	d405      	bmi.n	80027b0 <_puts_r+0x3c>
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	059b      	lsls	r3, r3, #22
 80027a8:	d402      	bmi.n	80027b0 <_puts_r+0x3c>
 80027aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ac:	f000 fafb 	bl	8002da6 <__retarget_lock_acquire_recursive>
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	071b      	lsls	r3, r3, #28
 80027b4:	d502      	bpl.n	80027bc <_puts_r+0x48>
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d129      	bne.n	8002810 <_puts_r+0x9c>
 80027bc:	0021      	movs	r1, r4
 80027be:	0028      	movs	r0, r5
 80027c0:	f000 f8aa 	bl	8002918 <__swsetup_r>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d023      	beq.n	8002810 <_puts_r+0x9c>
 80027c8:	2501      	movs	r5, #1
 80027ca:	426d      	negs	r5, r5
 80027cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027ce:	07db      	lsls	r3, r3, #31
 80027d0:	d405      	bmi.n	80027de <_puts_r+0x6a>
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	059b      	lsls	r3, r3, #22
 80027d6:	d402      	bmi.n	80027de <_puts_r+0x6a>
 80027d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027da:	f000 fae5 	bl	8002da8 <__retarget_lock_release_recursive>
 80027de:	0028      	movs	r0, r5
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <_puts_r+0xdc>)
 80027e4:	429c      	cmp	r4, r3
 80027e6:	d101      	bne.n	80027ec <_puts_r+0x78>
 80027e8:	68ac      	ldr	r4, [r5, #8]
 80027ea:	e7d8      	b.n	800279e <_puts_r+0x2a>
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <_puts_r+0xe0>)
 80027ee:	429c      	cmp	r4, r3
 80027f0:	d1d5      	bne.n	800279e <_puts_r+0x2a>
 80027f2:	68ec      	ldr	r4, [r5, #12]
 80027f4:	e7d3      	b.n	800279e <_puts_r+0x2a>
 80027f6:	3601      	adds	r6, #1
 80027f8:	60a3      	str	r3, [r4, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da04      	bge.n	8002808 <_puts_r+0x94>
 80027fe:	69a2      	ldr	r2, [r4, #24]
 8002800:	429a      	cmp	r2, r3
 8002802:	dc16      	bgt.n	8002832 <_puts_r+0xbe>
 8002804:	290a      	cmp	r1, #10
 8002806:	d014      	beq.n	8002832 <_puts_r+0xbe>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	6022      	str	r2, [r4, #0]
 800280e:	7019      	strb	r1, [r3, #0]
 8002810:	68a3      	ldr	r3, [r4, #8]
 8002812:	7831      	ldrb	r1, [r6, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	2900      	cmp	r1, #0
 8002818:	d1ed      	bne.n	80027f6 <_puts_r+0x82>
 800281a:	60a3      	str	r3, [r4, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da0f      	bge.n	8002840 <_puts_r+0xcc>
 8002820:	0028      	movs	r0, r5
 8002822:	0022      	movs	r2, r4
 8002824:	310a      	adds	r1, #10
 8002826:	f000 f821 	bl	800286c <__swbuf_r>
 800282a:	250a      	movs	r5, #10
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d1cd      	bne.n	80027cc <_puts_r+0x58>
 8002830:	e7ca      	b.n	80027c8 <_puts_r+0x54>
 8002832:	0022      	movs	r2, r4
 8002834:	0028      	movs	r0, r5
 8002836:	f000 f819 	bl	800286c <__swbuf_r>
 800283a:	1c43      	adds	r3, r0, #1
 800283c:	d1e8      	bne.n	8002810 <_puts_r+0x9c>
 800283e:	e7c3      	b.n	80027c8 <_puts_r+0x54>
 8002840:	250a      	movs	r5, #10
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	6022      	str	r2, [r4, #0]
 8002848:	701d      	strb	r5, [r3, #0]
 800284a:	e7bf      	b.n	80027cc <_puts_r+0x58>
 800284c:	08003a4c 	.word	0x08003a4c
 8002850:	08003a6c 	.word	0x08003a6c
 8002854:	08003a2c 	.word	0x08003a2c

08002858 <puts>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4b03      	ldr	r3, [pc, #12]	; (8002868 <puts+0x10>)
 800285c:	0001      	movs	r1, r0
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f7ff ff88 	bl	8002774 <_puts_r>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000008 	.word	0x20000008

0800286c <__swbuf_r>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	0005      	movs	r5, r0
 8002870:	000e      	movs	r6, r1
 8002872:	0014      	movs	r4, r2
 8002874:	2800      	cmp	r0, #0
 8002876:	d004      	beq.n	8002882 <__swbuf_r+0x16>
 8002878:	6983      	ldr	r3, [r0, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <__swbuf_r+0x16>
 800287e:	f000 f9f1 	bl	8002c64 <__sinit>
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <__swbuf_r+0xa0>)
 8002884:	429c      	cmp	r4, r3
 8002886:	d12e      	bne.n	80028e6 <__swbuf_r+0x7a>
 8002888:	686c      	ldr	r4, [r5, #4]
 800288a:	69a3      	ldr	r3, [r4, #24]
 800288c:	60a3      	str	r3, [r4, #8]
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	071b      	lsls	r3, r3, #28
 8002892:	d532      	bpl.n	80028fa <__swbuf_r+0x8e>
 8002894:	6923      	ldr	r3, [r4, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02f      	beq.n	80028fa <__swbuf_r+0x8e>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	6922      	ldr	r2, [r4, #16]
 800289e:	b2f7      	uxtb	r7, r6
 80028a0:	1a98      	subs	r0, r3, r2
 80028a2:	6963      	ldr	r3, [r4, #20]
 80028a4:	b2f6      	uxtb	r6, r6
 80028a6:	4283      	cmp	r3, r0
 80028a8:	dc05      	bgt.n	80028b6 <__swbuf_r+0x4a>
 80028aa:	0021      	movs	r1, r4
 80028ac:	0028      	movs	r0, r5
 80028ae:	f000 f937 	bl	8002b20 <_fflush_r>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d127      	bne.n	8002906 <__swbuf_r+0x9a>
 80028b6:	68a3      	ldr	r3, [r4, #8]
 80028b8:	3001      	adds	r0, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	701f      	strb	r7, [r3, #0]
 80028c6:	6963      	ldr	r3, [r4, #20]
 80028c8:	4283      	cmp	r3, r0
 80028ca:	d004      	beq.n	80028d6 <__swbuf_r+0x6a>
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	07db      	lsls	r3, r3, #31
 80028d0:	d507      	bpl.n	80028e2 <__swbuf_r+0x76>
 80028d2:	2e0a      	cmp	r6, #10
 80028d4:	d105      	bne.n	80028e2 <__swbuf_r+0x76>
 80028d6:	0021      	movs	r1, r4
 80028d8:	0028      	movs	r0, r5
 80028da:	f000 f921 	bl	8002b20 <_fflush_r>
 80028de:	2800      	cmp	r0, #0
 80028e0:	d111      	bne.n	8002906 <__swbuf_r+0x9a>
 80028e2:	0030      	movs	r0, r6
 80028e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <__swbuf_r+0xa4>)
 80028e8:	429c      	cmp	r4, r3
 80028ea:	d101      	bne.n	80028f0 <__swbuf_r+0x84>
 80028ec:	68ac      	ldr	r4, [r5, #8]
 80028ee:	e7cc      	b.n	800288a <__swbuf_r+0x1e>
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <__swbuf_r+0xa8>)
 80028f2:	429c      	cmp	r4, r3
 80028f4:	d1c9      	bne.n	800288a <__swbuf_r+0x1e>
 80028f6:	68ec      	ldr	r4, [r5, #12]
 80028f8:	e7c7      	b.n	800288a <__swbuf_r+0x1e>
 80028fa:	0021      	movs	r1, r4
 80028fc:	0028      	movs	r0, r5
 80028fe:	f000 f80b 	bl	8002918 <__swsetup_r>
 8002902:	2800      	cmp	r0, #0
 8002904:	d0c9      	beq.n	800289a <__swbuf_r+0x2e>
 8002906:	2601      	movs	r6, #1
 8002908:	4276      	negs	r6, r6
 800290a:	e7ea      	b.n	80028e2 <__swbuf_r+0x76>
 800290c:	08003a4c 	.word	0x08003a4c
 8002910:	08003a6c 	.word	0x08003a6c
 8002914:	08003a2c 	.word	0x08003a2c

08002918 <__swsetup_r>:
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <__swsetup_r+0xe0>)
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	681d      	ldr	r5, [r3, #0]
 800291e:	0006      	movs	r6, r0
 8002920:	000c      	movs	r4, r1
 8002922:	2d00      	cmp	r5, #0
 8002924:	d005      	beq.n	8002932 <__swsetup_r+0x1a>
 8002926:	69ab      	ldr	r3, [r5, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <__swsetup_r+0x1a>
 800292c:	0028      	movs	r0, r5
 800292e:	f000 f999 	bl	8002c64 <__sinit>
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <__swsetup_r+0xe4>)
 8002934:	429c      	cmp	r4, r3
 8002936:	d10f      	bne.n	8002958 <__swsetup_r+0x40>
 8002938:	686c      	ldr	r4, [r5, #4]
 800293a:	230c      	movs	r3, #12
 800293c:	5ee2      	ldrsh	r2, [r4, r3]
 800293e:	b293      	uxth	r3, r2
 8002940:	0711      	lsls	r1, r2, #28
 8002942:	d42d      	bmi.n	80029a0 <__swsetup_r+0x88>
 8002944:	06d9      	lsls	r1, r3, #27
 8002946:	d411      	bmi.n	800296c <__swsetup_r+0x54>
 8002948:	2309      	movs	r3, #9
 800294a:	2001      	movs	r0, #1
 800294c:	6033      	str	r3, [r6, #0]
 800294e:	3337      	adds	r3, #55	; 0x37
 8002950:	4313      	orrs	r3, r2
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	4240      	negs	r0, r0
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <__swsetup_r+0xe8>)
 800295a:	429c      	cmp	r4, r3
 800295c:	d101      	bne.n	8002962 <__swsetup_r+0x4a>
 800295e:	68ac      	ldr	r4, [r5, #8]
 8002960:	e7eb      	b.n	800293a <__swsetup_r+0x22>
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <__swsetup_r+0xec>)
 8002964:	429c      	cmp	r4, r3
 8002966:	d1e8      	bne.n	800293a <__swsetup_r+0x22>
 8002968:	68ec      	ldr	r4, [r5, #12]
 800296a:	e7e6      	b.n	800293a <__swsetup_r+0x22>
 800296c:	075b      	lsls	r3, r3, #29
 800296e:	d513      	bpl.n	8002998 <__swsetup_r+0x80>
 8002970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002972:	2900      	cmp	r1, #0
 8002974:	d008      	beq.n	8002988 <__swsetup_r+0x70>
 8002976:	0023      	movs	r3, r4
 8002978:	3344      	adds	r3, #68	; 0x44
 800297a:	4299      	cmp	r1, r3
 800297c:	d002      	beq.n	8002984 <__swsetup_r+0x6c>
 800297e:	0030      	movs	r0, r6
 8002980:	f000 fa80 	bl	8002e84 <_free_r>
 8002984:	2300      	movs	r3, #0
 8002986:	6363      	str	r3, [r4, #52]	; 0x34
 8002988:	2224      	movs	r2, #36	; 0x24
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	4393      	bics	r3, r2
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	2300      	movs	r3, #0
 8002992:	6063      	str	r3, [r4, #4]
 8002994:	6923      	ldr	r3, [r4, #16]
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	2308      	movs	r3, #8
 800299a:	89a2      	ldrh	r2, [r4, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	81a3      	strh	r3, [r4, #12]
 80029a0:	6923      	ldr	r3, [r4, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <__swsetup_r+0xa6>
 80029a6:	21a0      	movs	r1, #160	; 0xa0
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	0089      	lsls	r1, r1, #2
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	400b      	ands	r3, r1
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <__swsetup_r+0xa6>
 80029b6:	0021      	movs	r1, r4
 80029b8:	0030      	movs	r0, r6
 80029ba:	f000 fa1f 	bl	8002dfc <__smakebuf_r>
 80029be:	220c      	movs	r2, #12
 80029c0:	5ea3      	ldrsh	r3, [r4, r2]
 80029c2:	2001      	movs	r0, #1
 80029c4:	001a      	movs	r2, r3
 80029c6:	b299      	uxth	r1, r3
 80029c8:	4002      	ands	r2, r0
 80029ca:	4203      	tst	r3, r0
 80029cc:	d00f      	beq.n	80029ee <__swsetup_r+0xd6>
 80029ce:	2200      	movs	r2, #0
 80029d0:	60a2      	str	r2, [r4, #8]
 80029d2:	6962      	ldr	r2, [r4, #20]
 80029d4:	4252      	negs	r2, r2
 80029d6:	61a2      	str	r2, [r4, #24]
 80029d8:	2000      	movs	r0, #0
 80029da:	6922      	ldr	r2, [r4, #16]
 80029dc:	4282      	cmp	r2, r0
 80029de:	d1ba      	bne.n	8002956 <__swsetup_r+0x3e>
 80029e0:	060a      	lsls	r2, r1, #24
 80029e2:	d5b8      	bpl.n	8002956 <__swsetup_r+0x3e>
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	4313      	orrs	r3, r2
 80029e8:	81a3      	strh	r3, [r4, #12]
 80029ea:	3801      	subs	r0, #1
 80029ec:	e7b3      	b.n	8002956 <__swsetup_r+0x3e>
 80029ee:	0788      	lsls	r0, r1, #30
 80029f0:	d400      	bmi.n	80029f4 <__swsetup_r+0xdc>
 80029f2:	6962      	ldr	r2, [r4, #20]
 80029f4:	60a2      	str	r2, [r4, #8]
 80029f6:	e7ef      	b.n	80029d8 <__swsetup_r+0xc0>
 80029f8:	20000008 	.word	0x20000008
 80029fc:	08003a4c 	.word	0x08003a4c
 8002a00:	08003a6c 	.word	0x08003a6c
 8002a04:	08003a2c 	.word	0x08003a2c

08002a08 <__sflush_r>:
 8002a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a0a:	898b      	ldrh	r3, [r1, #12]
 8002a0c:	0005      	movs	r5, r0
 8002a0e:	000c      	movs	r4, r1
 8002a10:	071a      	lsls	r2, r3, #28
 8002a12:	d45f      	bmi.n	8002ad4 <__sflush_r+0xcc>
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	dc04      	bgt.n	8002a24 <__sflush_r+0x1c>
 8002a1a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002a1c:	2a00      	cmp	r2, #0
 8002a1e:	dc01      	bgt.n	8002a24 <__sflush_r+0x1c>
 8002a20:	2000      	movs	r0, #0
 8002a22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002a26:	2f00      	cmp	r7, #0
 8002a28:	d0fa      	beq.n	8002a20 <__sflush_r+0x18>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	682e      	ldr	r6, [r5, #0]
 8002a30:	602a      	str	r2, [r5, #0]
 8002a32:	001a      	movs	r2, r3
 8002a34:	0149      	lsls	r1, r1, #5
 8002a36:	400a      	ands	r2, r1
 8002a38:	420b      	tst	r3, r1
 8002a3a:	d034      	beq.n	8002aa6 <__sflush_r+0x9e>
 8002a3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	075b      	lsls	r3, r3, #29
 8002a42:	d506      	bpl.n	8002a52 <__sflush_r+0x4a>
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	1ac0      	subs	r0, r0, r3
 8002a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <__sflush_r+0x4a>
 8002a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	0002      	movs	r2, r0
 8002a54:	6a21      	ldr	r1, [r4, #32]
 8002a56:	2300      	movs	r3, #0
 8002a58:	0028      	movs	r0, r5
 8002a5a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002a5c:	47b8      	blx	r7
 8002a5e:	89a1      	ldrh	r1, [r4, #12]
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d106      	bne.n	8002a72 <__sflush_r+0x6a>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	2b1d      	cmp	r3, #29
 8002a68:	d831      	bhi.n	8002ace <__sflush_r+0xc6>
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <__sflush_r+0x114>)
 8002a6c:	40da      	lsrs	r2, r3
 8002a6e:	07d3      	lsls	r3, r2, #31
 8002a70:	d52d      	bpl.n	8002ace <__sflush_r+0xc6>
 8002a72:	2300      	movs	r3, #0
 8002a74:	6063      	str	r3, [r4, #4]
 8002a76:	6923      	ldr	r3, [r4, #16]
 8002a78:	6023      	str	r3, [r4, #0]
 8002a7a:	04cb      	lsls	r3, r1, #19
 8002a7c:	d505      	bpl.n	8002a8a <__sflush_r+0x82>
 8002a7e:	1c43      	adds	r3, r0, #1
 8002a80:	d102      	bne.n	8002a88 <__sflush_r+0x80>
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d100      	bne.n	8002a8a <__sflush_r+0x82>
 8002a88:	6560      	str	r0, [r4, #84]	; 0x54
 8002a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a8c:	602e      	str	r6, [r5, #0]
 8002a8e:	2900      	cmp	r1, #0
 8002a90:	d0c6      	beq.n	8002a20 <__sflush_r+0x18>
 8002a92:	0023      	movs	r3, r4
 8002a94:	3344      	adds	r3, #68	; 0x44
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d002      	beq.n	8002aa0 <__sflush_r+0x98>
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	f000 f9f2 	bl	8002e84 <_free_r>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	6360      	str	r0, [r4, #52]	; 0x34
 8002aa4:	e7bd      	b.n	8002a22 <__sflush_r+0x1a>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	0028      	movs	r0, r5
 8002aaa:	6a21      	ldr	r1, [r4, #32]
 8002aac:	47b8      	blx	r7
 8002aae:	1c43      	adds	r3, r0, #1
 8002ab0:	d1c5      	bne.n	8002a3e <__sflush_r+0x36>
 8002ab2:	682b      	ldr	r3, [r5, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0c2      	beq.n	8002a3e <__sflush_r+0x36>
 8002ab8:	2b1d      	cmp	r3, #29
 8002aba:	d001      	beq.n	8002ac0 <__sflush_r+0xb8>
 8002abc:	2b16      	cmp	r3, #22
 8002abe:	d101      	bne.n	8002ac4 <__sflush_r+0xbc>
 8002ac0:	602e      	str	r6, [r5, #0]
 8002ac2:	e7ad      	b.n	8002a20 <__sflush_r+0x18>
 8002ac4:	2340      	movs	r3, #64	; 0x40
 8002ac6:	89a2      	ldrh	r2, [r4, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	81a3      	strh	r3, [r4, #12]
 8002acc:	e7a9      	b.n	8002a22 <__sflush_r+0x1a>
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	e7fa      	b.n	8002aca <__sflush_r+0xc2>
 8002ad4:	690f      	ldr	r7, [r1, #16]
 8002ad6:	2f00      	cmp	r7, #0
 8002ad8:	d0a2      	beq.n	8002a20 <__sflush_r+0x18>
 8002ada:	680a      	ldr	r2, [r1, #0]
 8002adc:	600f      	str	r7, [r1, #0]
 8002ade:	1bd2      	subs	r2, r2, r7
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	079b      	lsls	r3, r3, #30
 8002ae6:	d100      	bne.n	8002aea <__sflush_r+0xe2>
 8002ae8:	694a      	ldr	r2, [r1, #20]
 8002aea:	60a2      	str	r2, [r4, #8]
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dc00      	bgt.n	8002af4 <__sflush_r+0xec>
 8002af2:	e795      	b.n	8002a20 <__sflush_r+0x18>
 8002af4:	003a      	movs	r2, r7
 8002af6:	0028      	movs	r0, r5
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	6a21      	ldr	r1, [r4, #32]
 8002afc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002afe:	47b0      	blx	r6
 8002b00:	2800      	cmp	r0, #0
 8002b02:	dc06      	bgt.n	8002b12 <__sflush_r+0x10a>
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	2001      	movs	r0, #1
 8002b08:	89a2      	ldrh	r2, [r4, #12]
 8002b0a:	4240      	negs	r0, r0
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	81a3      	strh	r3, [r4, #12]
 8002b10:	e787      	b.n	8002a22 <__sflush_r+0x1a>
 8002b12:	9b01      	ldr	r3, [sp, #4]
 8002b14:	183f      	adds	r7, r7, r0
 8002b16:	1a1b      	subs	r3, r3, r0
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	e7e7      	b.n	8002aec <__sflush_r+0xe4>
 8002b1c:	20400001 	.word	0x20400001

08002b20 <_fflush_r>:
 8002b20:	690b      	ldr	r3, [r1, #16]
 8002b22:	b570      	push	{r4, r5, r6, lr}
 8002b24:	0005      	movs	r5, r0
 8002b26:	000c      	movs	r4, r1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_fflush_r+0x12>
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	0028      	movs	r0, r5
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d004      	beq.n	8002b40 <_fflush_r+0x20>
 8002b36:	6983      	ldr	r3, [r0, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <_fflush_r+0x20>
 8002b3c:	f000 f892 	bl	8002c64 <__sinit>
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <_fflush_r+0x74>)
 8002b42:	429c      	cmp	r4, r3
 8002b44:	d11b      	bne.n	8002b7e <_fflush_r+0x5e>
 8002b46:	686c      	ldr	r4, [r5, #4]
 8002b48:	220c      	movs	r2, #12
 8002b4a:	5ea3      	ldrsh	r3, [r4, r2]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <_fflush_r+0xc>
 8002b50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b52:	07d2      	lsls	r2, r2, #31
 8002b54:	d404      	bmi.n	8002b60 <_fflush_r+0x40>
 8002b56:	059b      	lsls	r3, r3, #22
 8002b58:	d402      	bmi.n	8002b60 <_fflush_r+0x40>
 8002b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b5c:	f000 f923 	bl	8002da6 <__retarget_lock_acquire_recursive>
 8002b60:	0028      	movs	r0, r5
 8002b62:	0021      	movs	r1, r4
 8002b64:	f7ff ff50 	bl	8002a08 <__sflush_r>
 8002b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b6a:	0005      	movs	r5, r0
 8002b6c:	07db      	lsls	r3, r3, #31
 8002b6e:	d4de      	bmi.n	8002b2e <_fflush_r+0xe>
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	059b      	lsls	r3, r3, #22
 8002b74:	d4db      	bmi.n	8002b2e <_fflush_r+0xe>
 8002b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b78:	f000 f916 	bl	8002da8 <__retarget_lock_release_recursive>
 8002b7c:	e7d7      	b.n	8002b2e <_fflush_r+0xe>
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <_fflush_r+0x78>)
 8002b80:	429c      	cmp	r4, r3
 8002b82:	d101      	bne.n	8002b88 <_fflush_r+0x68>
 8002b84:	68ac      	ldr	r4, [r5, #8]
 8002b86:	e7df      	b.n	8002b48 <_fflush_r+0x28>
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <_fflush_r+0x7c>)
 8002b8a:	429c      	cmp	r4, r3
 8002b8c:	d1dc      	bne.n	8002b48 <_fflush_r+0x28>
 8002b8e:	68ec      	ldr	r4, [r5, #12]
 8002b90:	e7da      	b.n	8002b48 <_fflush_r+0x28>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	08003a4c 	.word	0x08003a4c
 8002b98:	08003a6c 	.word	0x08003a6c
 8002b9c:	08003a2c 	.word	0x08003a2c

08002ba0 <std>:
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	b510      	push	{r4, lr}
 8002ba4:	0004      	movs	r4, r0
 8002ba6:	6003      	str	r3, [r0, #0]
 8002ba8:	6043      	str	r3, [r0, #4]
 8002baa:	6083      	str	r3, [r0, #8]
 8002bac:	8181      	strh	r1, [r0, #12]
 8002bae:	6643      	str	r3, [r0, #100]	; 0x64
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	81c2      	strh	r2, [r0, #14]
 8002bb4:	6103      	str	r3, [r0, #16]
 8002bb6:	6143      	str	r3, [r0, #20]
 8002bb8:	6183      	str	r3, [r0, #24]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	305c      	adds	r0, #92	; 0x5c
 8002bbe:	f7ff fdb7 	bl	8002730 <memset>
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <std+0x38>)
 8002bc4:	6224      	str	r4, [r4, #32]
 8002bc6:	6263      	str	r3, [r4, #36]	; 0x24
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <std+0x3c>)
 8002bca:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <std+0x40>)
 8002bce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <std+0x44>)
 8002bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	08003635 	.word	0x08003635
 8002bdc:	0800365d 	.word	0x0800365d
 8002be0:	08003695 	.word	0x08003695
 8002be4:	080036c1 	.word	0x080036c1

08002be8 <_cleanup_r>:
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4902      	ldr	r1, [pc, #8]	; (8002bf4 <_cleanup_r+0xc>)
 8002bec:	f000 f8ba 	bl	8002d64 <_fwalk_reent>
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	08002b21 	.word	0x08002b21

08002bf8 <__sfmoreglue>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2568      	movs	r5, #104	; 0x68
 8002bfc:	1e4a      	subs	r2, r1, #1
 8002bfe:	4355      	muls	r5, r2
 8002c00:	000e      	movs	r6, r1
 8002c02:	0029      	movs	r1, r5
 8002c04:	3174      	adds	r1, #116	; 0x74
 8002c06:	f000 f9a9 	bl	8002f5c <_malloc_r>
 8002c0a:	1e04      	subs	r4, r0, #0
 8002c0c:	d008      	beq.n	8002c20 <__sfmoreglue+0x28>
 8002c0e:	2100      	movs	r1, #0
 8002c10:	002a      	movs	r2, r5
 8002c12:	6001      	str	r1, [r0, #0]
 8002c14:	6046      	str	r6, [r0, #4]
 8002c16:	300c      	adds	r0, #12
 8002c18:	60a0      	str	r0, [r4, #8]
 8002c1a:	3268      	adds	r2, #104	; 0x68
 8002c1c:	f7ff fd88 	bl	8002730 <memset>
 8002c20:	0020      	movs	r0, r4
 8002c22:	bd70      	pop	{r4, r5, r6, pc}

08002c24 <__sfp_lock_acquire>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <__sfp_lock_acquire+0xc>)
 8002c28:	f000 f8bd 	bl	8002da6 <__retarget_lock_acquire_recursive>
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	200000e5 	.word	0x200000e5

08002c34 <__sfp_lock_release>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <__sfp_lock_release+0xc>)
 8002c38:	f000 f8b6 	bl	8002da8 <__retarget_lock_release_recursive>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	200000e5 	.word	0x200000e5

08002c44 <__sinit_lock_acquire>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	4802      	ldr	r0, [pc, #8]	; (8002c50 <__sinit_lock_acquire+0xc>)
 8002c48:	f000 f8ad 	bl	8002da6 <__retarget_lock_acquire_recursive>
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	200000e6 	.word	0x200000e6

08002c54 <__sinit_lock_release>:
 8002c54:	b510      	push	{r4, lr}
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <__sinit_lock_release+0xc>)
 8002c58:	f000 f8a6 	bl	8002da8 <__retarget_lock_release_recursive>
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	200000e6 	.word	0x200000e6

08002c64 <__sinit>:
 8002c64:	b513      	push	{r0, r1, r4, lr}
 8002c66:	0004      	movs	r4, r0
 8002c68:	f7ff ffec 	bl	8002c44 <__sinit_lock_acquire>
 8002c6c:	69a3      	ldr	r3, [r4, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <__sinit+0x14>
 8002c72:	f7ff ffef 	bl	8002c54 <__sinit_lock_release>
 8002c76:	bd13      	pop	{r0, r1, r4, pc}
 8002c78:	64a3      	str	r3, [r4, #72]	; 0x48
 8002c7a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <__sinit+0x68>)
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <__sinit+0x6c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	d101      	bne.n	8002c90 <__sinit+0x2c>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61a3      	str	r3, [r4, #24]
 8002c90:	0020      	movs	r0, r4
 8002c92:	f000 f81f 	bl	8002cd4 <__sfp>
 8002c96:	6060      	str	r0, [r4, #4]
 8002c98:	0020      	movs	r0, r4
 8002c9a:	f000 f81b 	bl	8002cd4 <__sfp>
 8002c9e:	60a0      	str	r0, [r4, #8]
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 f817 	bl	8002cd4 <__sfp>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2104      	movs	r1, #4
 8002caa:	60e0      	str	r0, [r4, #12]
 8002cac:	6860      	ldr	r0, [r4, #4]
 8002cae:	f7ff ff77 	bl	8002ba0 <std>
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2109      	movs	r1, #9
 8002cb6:	68a0      	ldr	r0, [r4, #8]
 8002cb8:	f7ff ff72 	bl	8002ba0 <std>
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2112      	movs	r1, #18
 8002cc0:	68e0      	ldr	r0, [r4, #12]
 8002cc2:	f7ff ff6d 	bl	8002ba0 <std>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61a3      	str	r3, [r4, #24]
 8002cca:	e7d2      	b.n	8002c72 <__sinit+0xe>
 8002ccc:	08003a28 	.word	0x08003a28
 8002cd0:	08002be9 	.word	0x08002be9

08002cd4 <__sfp>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	0007      	movs	r7, r0
 8002cd8:	f7ff ffa4 	bl	8002c24 <__sfp_lock_acquire>
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <__sfp+0x88>)
 8002cde:	681e      	ldr	r6, [r3, #0]
 8002ce0:	69b3      	ldr	r3, [r6, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <__sfp+0x18>
 8002ce6:	0030      	movs	r0, r6
 8002ce8:	f7ff ffbc 	bl	8002c64 <__sinit>
 8002cec:	3648      	adds	r6, #72	; 0x48
 8002cee:	68b4      	ldr	r4, [r6, #8]
 8002cf0:	6873      	ldr	r3, [r6, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	d504      	bpl.n	8002d00 <__sfp+0x2c>
 8002cf6:	6833      	ldr	r3, [r6, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d022      	beq.n	8002d42 <__sfp+0x6e>
 8002cfc:	6836      	ldr	r6, [r6, #0]
 8002cfe:	e7f6      	b.n	8002cee <__sfp+0x1a>
 8002d00:	220c      	movs	r2, #12
 8002d02:	5ea5      	ldrsh	r5, [r4, r2]
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	d11a      	bne.n	8002d3e <__sfp+0x6a>
 8002d08:	0020      	movs	r0, r4
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <__sfp+0x8c>)
 8002d0c:	3058      	adds	r0, #88	; 0x58
 8002d0e:	60e3      	str	r3, [r4, #12]
 8002d10:	6665      	str	r5, [r4, #100]	; 0x64
 8002d12:	f000 f847 	bl	8002da4 <__retarget_lock_init_recursive>
 8002d16:	f7ff ff8d 	bl	8002c34 <__sfp_lock_release>
 8002d1a:	0020      	movs	r0, r4
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	0029      	movs	r1, r5
 8002d20:	6025      	str	r5, [r4, #0]
 8002d22:	60a5      	str	r5, [r4, #8]
 8002d24:	6065      	str	r5, [r4, #4]
 8002d26:	6125      	str	r5, [r4, #16]
 8002d28:	6165      	str	r5, [r4, #20]
 8002d2a:	61a5      	str	r5, [r4, #24]
 8002d2c:	305c      	adds	r0, #92	; 0x5c
 8002d2e:	f7ff fcff 	bl	8002730 <memset>
 8002d32:	6365      	str	r5, [r4, #52]	; 0x34
 8002d34:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d36:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d38:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d3e:	3468      	adds	r4, #104	; 0x68
 8002d40:	e7d7      	b.n	8002cf2 <__sfp+0x1e>
 8002d42:	2104      	movs	r1, #4
 8002d44:	0038      	movs	r0, r7
 8002d46:	f7ff ff57 	bl	8002bf8 <__sfmoreglue>
 8002d4a:	1e04      	subs	r4, r0, #0
 8002d4c:	6030      	str	r0, [r6, #0]
 8002d4e:	d1d5      	bne.n	8002cfc <__sfp+0x28>
 8002d50:	f7ff ff70 	bl	8002c34 <__sfp_lock_release>
 8002d54:	230c      	movs	r3, #12
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	e7ef      	b.n	8002d3a <__sfp+0x66>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	08003a28 	.word	0x08003a28
 8002d60:	ffff0001 	.word	0xffff0001

08002d64 <_fwalk_reent>:
 8002d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d66:	0004      	movs	r4, r0
 8002d68:	0006      	movs	r6, r0
 8002d6a:	2700      	movs	r7, #0
 8002d6c:	9101      	str	r1, [sp, #4]
 8002d6e:	3448      	adds	r4, #72	; 0x48
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	68a5      	ldr	r5, [r4, #8]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	9b00      	ldr	r3, [sp, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	d504      	bpl.n	8002d88 <_fwalk_reent+0x24>
 8002d7e:	6824      	ldr	r4, [r4, #0]
 8002d80:	2c00      	cmp	r4, #0
 8002d82:	d1f5      	bne.n	8002d70 <_fwalk_reent+0xc>
 8002d84:	0038      	movs	r0, r7
 8002d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d88:	89ab      	ldrh	r3, [r5, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d908      	bls.n	8002da0 <_fwalk_reent+0x3c>
 8002d8e:	220e      	movs	r2, #14
 8002d90:	5eab      	ldrsh	r3, [r5, r2]
 8002d92:	3301      	adds	r3, #1
 8002d94:	d004      	beq.n	8002da0 <_fwalk_reent+0x3c>
 8002d96:	0029      	movs	r1, r5
 8002d98:	0030      	movs	r0, r6
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	4307      	orrs	r7, r0
 8002da0:	3568      	adds	r5, #104	; 0x68
 8002da2:	e7e8      	b.n	8002d76 <_fwalk_reent+0x12>

08002da4 <__retarget_lock_init_recursive>:
 8002da4:	4770      	bx	lr

08002da6 <__retarget_lock_acquire_recursive>:
 8002da6:	4770      	bx	lr

08002da8 <__retarget_lock_release_recursive>:
 8002da8:	4770      	bx	lr
	...

08002dac <__swhatbuf_r>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	000e      	movs	r6, r1
 8002db0:	001d      	movs	r5, r3
 8002db2:	230e      	movs	r3, #14
 8002db4:	5ec9      	ldrsh	r1, [r1, r3]
 8002db6:	0014      	movs	r4, r2
 8002db8:	b096      	sub	sp, #88	; 0x58
 8002dba:	2900      	cmp	r1, #0
 8002dbc:	da08      	bge.n	8002dd0 <__swhatbuf_r+0x24>
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	5eb3      	ldrsh	r3, [r6, r2]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	602a      	str	r2, [r5, #0]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	d411      	bmi.n	8002dee <__swhatbuf_r+0x42>
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	e00f      	b.n	8002df0 <__swhatbuf_r+0x44>
 8002dd0:	466a      	mov	r2, sp
 8002dd2:	f000 fca1 	bl	8003718 <_fstat_r>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	dbf1      	blt.n	8002dbe <__swhatbuf_r+0x12>
 8002dda:	23f0      	movs	r3, #240	; 0xf0
 8002ddc:	9901      	ldr	r1, [sp, #4]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	4019      	ands	r1, r3
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <__swhatbuf_r+0x4c>)
 8002de4:	18c9      	adds	r1, r1, r3
 8002de6:	424b      	negs	r3, r1
 8002de8:	4159      	adcs	r1, r3
 8002dea:	6029      	str	r1, [r5, #0]
 8002dec:	e7ed      	b.n	8002dca <__swhatbuf_r+0x1e>
 8002dee:	2340      	movs	r3, #64	; 0x40
 8002df0:	2000      	movs	r0, #0
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	b016      	add	sp, #88	; 0x58
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	ffffe000 	.word	0xffffe000

08002dfc <__smakebuf_r>:
 8002dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dfe:	2602      	movs	r6, #2
 8002e00:	898b      	ldrh	r3, [r1, #12]
 8002e02:	0005      	movs	r5, r0
 8002e04:	000c      	movs	r4, r1
 8002e06:	4233      	tst	r3, r6
 8002e08:	d006      	beq.n	8002e18 <__smakebuf_r+0x1c>
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	3347      	adds	r3, #71	; 0x47
 8002e0e:	6023      	str	r3, [r4, #0]
 8002e10:	6123      	str	r3, [r4, #16]
 8002e12:	2301      	movs	r3, #1
 8002e14:	6163      	str	r3, [r4, #20]
 8002e16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002e18:	466a      	mov	r2, sp
 8002e1a:	ab01      	add	r3, sp, #4
 8002e1c:	f7ff ffc6 	bl	8002dac <__swhatbuf_r>
 8002e20:	9900      	ldr	r1, [sp, #0]
 8002e22:	0007      	movs	r7, r0
 8002e24:	0028      	movs	r0, r5
 8002e26:	f000 f899 	bl	8002f5c <_malloc_r>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d108      	bne.n	8002e40 <__smakebuf_r+0x44>
 8002e2e:	220c      	movs	r2, #12
 8002e30:	5ea3      	ldrsh	r3, [r4, r2]
 8002e32:	059a      	lsls	r2, r3, #22
 8002e34:	d4ef      	bmi.n	8002e16 <__smakebuf_r+0x1a>
 8002e36:	2203      	movs	r2, #3
 8002e38:	4393      	bics	r3, r2
 8002e3a:	431e      	orrs	r6, r3
 8002e3c:	81a6      	strh	r6, [r4, #12]
 8002e3e:	e7e4      	b.n	8002e0a <__smakebuf_r+0xe>
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <__smakebuf_r+0x84>)
 8002e42:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	89a2      	ldrh	r2, [r4, #12]
 8002e48:	6020      	str	r0, [r4, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	81a3      	strh	r3, [r4, #12]
 8002e4e:	9b00      	ldr	r3, [sp, #0]
 8002e50:	6120      	str	r0, [r4, #16]
 8002e52:	6163      	str	r3, [r4, #20]
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <__smakebuf_r+0x7a>
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	230e      	movs	r3, #14
 8002e5e:	5ee1      	ldrsh	r1, [r4, r3]
 8002e60:	f000 fc6c 	bl	800373c <_isatty_r>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d006      	beq.n	8002e76 <__smakebuf_r+0x7a>
 8002e68:	2203      	movs	r2, #3
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	001a      	movs	r2, r3
 8002e70:	2301      	movs	r3, #1
 8002e72:	4313      	orrs	r3, r2
 8002e74:	81a3      	strh	r3, [r4, #12]
 8002e76:	89a0      	ldrh	r0, [r4, #12]
 8002e78:	4307      	orrs	r7, r0
 8002e7a:	81a7      	strh	r7, [r4, #12]
 8002e7c:	e7cb      	b.n	8002e16 <__smakebuf_r+0x1a>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	08002be9 	.word	0x08002be9

08002e84 <_free_r>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	0005      	movs	r5, r0
 8002e88:	2900      	cmp	r1, #0
 8002e8a:	d010      	beq.n	8002eae <_free_r+0x2a>
 8002e8c:	1f0c      	subs	r4, r1, #4
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da00      	bge.n	8002e96 <_free_r+0x12>
 8002e94:	18e4      	adds	r4, r4, r3
 8002e96:	0028      	movs	r0, r5
 8002e98:	f000 fc82 	bl	80037a0 <__malloc_lock>
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <_free_r+0x90>)
 8002e9e:	6813      	ldr	r3, [r2, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <_free_r+0x2c>
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	6014      	str	r4, [r2, #0]
 8002ea8:	0028      	movs	r0, r5
 8002eaa:	f000 fc81 	bl	80037b0 <__malloc_unlock>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	d908      	bls.n	8002ec6 <_free_r+0x42>
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	1860      	adds	r0, r4, r1
 8002eb8:	4283      	cmp	r3, r0
 8002eba:	d1f3      	bne.n	8002ea4 <_free_r+0x20>
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	1841      	adds	r1, r0, r1
 8002ec2:	6021      	str	r1, [r4, #0]
 8002ec4:	e7ee      	b.n	8002ea4 <_free_r+0x20>
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <_free_r+0x4e>
 8002ece:	42a3      	cmp	r3, r4
 8002ed0:	d9f9      	bls.n	8002ec6 <_free_r+0x42>
 8002ed2:	6811      	ldr	r1, [r2, #0]
 8002ed4:	1850      	adds	r0, r2, r1
 8002ed6:	42a0      	cmp	r0, r4
 8002ed8:	d10b      	bne.n	8002ef2 <_free_r+0x6e>
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	1809      	adds	r1, r1, r0
 8002ede:	1850      	adds	r0, r2, r1
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	d1e0      	bne.n	8002ea8 <_free_r+0x24>
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	1841      	adds	r1, r0, r1
 8002eec:	6011      	str	r1, [r2, #0]
 8002eee:	6053      	str	r3, [r2, #4]
 8002ef0:	e7da      	b.n	8002ea8 <_free_r+0x24>
 8002ef2:	42a0      	cmp	r0, r4
 8002ef4:	d902      	bls.n	8002efc <_free_r+0x78>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	e7d5      	b.n	8002ea8 <_free_r+0x24>
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	1860      	adds	r0, r4, r1
 8002f00:	4283      	cmp	r3, r0
 8002f02:	d103      	bne.n	8002f0c <_free_r+0x88>
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	1841      	adds	r1, r0, r1
 8002f0a:	6021      	str	r1, [r4, #0]
 8002f0c:	6063      	str	r3, [r4, #4]
 8002f0e:	6054      	str	r4, [r2, #4]
 8002f10:	e7ca      	b.n	8002ea8 <_free_r+0x24>
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	200000e8 	.word	0x200000e8

08002f18 <sbrk_aligned>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4e0f      	ldr	r6, [pc, #60]	; (8002f58 <sbrk_aligned+0x40>)
 8002f1c:	000d      	movs	r5, r1
 8002f1e:	6831      	ldr	r1, [r6, #0]
 8002f20:	0004      	movs	r4, r0
 8002f22:	2900      	cmp	r1, #0
 8002f24:	d102      	bne.n	8002f2c <sbrk_aligned+0x14>
 8002f26:	f000 fb73 	bl	8003610 <_sbrk_r>
 8002f2a:	6030      	str	r0, [r6, #0]
 8002f2c:	0029      	movs	r1, r5
 8002f2e:	0020      	movs	r0, r4
 8002f30:	f000 fb6e 	bl	8003610 <_sbrk_r>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d00a      	beq.n	8002f4e <sbrk_aligned+0x36>
 8002f38:	2303      	movs	r3, #3
 8002f3a:	1cc5      	adds	r5, r0, #3
 8002f3c:	439d      	bics	r5, r3
 8002f3e:	42a8      	cmp	r0, r5
 8002f40:	d007      	beq.n	8002f52 <sbrk_aligned+0x3a>
 8002f42:	1a29      	subs	r1, r5, r0
 8002f44:	0020      	movs	r0, r4
 8002f46:	f000 fb63 	bl	8003610 <_sbrk_r>
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	d101      	bne.n	8002f52 <sbrk_aligned+0x3a>
 8002f4e:	2501      	movs	r5, #1
 8002f50:	426d      	negs	r5, r5
 8002f52:	0028      	movs	r0, r5
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	200000ec 	.word	0x200000ec

08002f5c <_malloc_r>:
 8002f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f5e:	2203      	movs	r2, #3
 8002f60:	1ccb      	adds	r3, r1, #3
 8002f62:	4393      	bics	r3, r2
 8002f64:	3308      	adds	r3, #8
 8002f66:	0006      	movs	r6, r0
 8002f68:	001f      	movs	r7, r3
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d232      	bcs.n	8002fd4 <_malloc_r+0x78>
 8002f6e:	270c      	movs	r7, #12
 8002f70:	42b9      	cmp	r1, r7
 8002f72:	d831      	bhi.n	8002fd8 <_malloc_r+0x7c>
 8002f74:	0030      	movs	r0, r6
 8002f76:	f000 fc13 	bl	80037a0 <__malloc_lock>
 8002f7a:	4d32      	ldr	r5, [pc, #200]	; (8003044 <_malloc_r+0xe8>)
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	001c      	movs	r4, r3
 8002f80:	2c00      	cmp	r4, #0
 8002f82:	d12e      	bne.n	8002fe2 <_malloc_r+0x86>
 8002f84:	0039      	movs	r1, r7
 8002f86:	0030      	movs	r0, r6
 8002f88:	f7ff ffc6 	bl	8002f18 <sbrk_aligned>
 8002f8c:	0004      	movs	r4, r0
 8002f8e:	1c43      	adds	r3, r0, #1
 8002f90:	d11e      	bne.n	8002fd0 <_malloc_r+0x74>
 8002f92:	682c      	ldr	r4, [r5, #0]
 8002f94:	0025      	movs	r5, r4
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d14a      	bne.n	8003030 <_malloc_r+0xd4>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	0029      	movs	r1, r5
 8002f9e:	18e3      	adds	r3, r4, r3
 8002fa0:	0030      	movs	r0, r6
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f000 fb34 	bl	8003610 <_sbrk_r>
 8002fa8:	9b01      	ldr	r3, [sp, #4]
 8002faa:	4283      	cmp	r3, r0
 8002fac:	d143      	bne.n	8003036 <_malloc_r+0xda>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	3703      	adds	r7, #3
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	439f      	bics	r7, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	2f0c      	cmp	r7, #12
 8002fbc:	d200      	bcs.n	8002fc0 <_malloc_r+0x64>
 8002fbe:	270c      	movs	r7, #12
 8002fc0:	0039      	movs	r1, r7
 8002fc2:	0030      	movs	r0, r6
 8002fc4:	f7ff ffa8 	bl	8002f18 <sbrk_aligned>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d034      	beq.n	8003036 <_malloc_r+0xda>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	19df      	adds	r7, r3, r7
 8002fd0:	6027      	str	r7, [r4, #0]
 8002fd2:	e013      	b.n	8002ffc <_malloc_r+0xa0>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dacb      	bge.n	8002f70 <_malloc_r+0x14>
 8002fd8:	230c      	movs	r3, #12
 8002fda:	2500      	movs	r5, #0
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	0028      	movs	r0, r5
 8002fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	1bd1      	subs	r1, r2, r7
 8002fe6:	d420      	bmi.n	800302a <_malloc_r+0xce>
 8002fe8:	290b      	cmp	r1, #11
 8002fea:	d917      	bls.n	800301c <_malloc_r+0xc0>
 8002fec:	19e2      	adds	r2, r4, r7
 8002fee:	6027      	str	r7, [r4, #0]
 8002ff0:	42a3      	cmp	r3, r4
 8002ff2:	d111      	bne.n	8003018 <_malloc_r+0xbc>
 8002ff4:	602a      	str	r2, [r5, #0]
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	6053      	str	r3, [r2, #4]
 8002ffc:	0030      	movs	r0, r6
 8002ffe:	0025      	movs	r5, r4
 8003000:	f000 fbd6 	bl	80037b0 <__malloc_unlock>
 8003004:	2207      	movs	r2, #7
 8003006:	350b      	adds	r5, #11
 8003008:	1d23      	adds	r3, r4, #4
 800300a:	4395      	bics	r5, r2
 800300c:	1aea      	subs	r2, r5, r3
 800300e:	429d      	cmp	r5, r3
 8003010:	d0e5      	beq.n	8002fde <_malloc_r+0x82>
 8003012:	1b5b      	subs	r3, r3, r5
 8003014:	50a3      	str	r3, [r4, r2]
 8003016:	e7e2      	b.n	8002fde <_malloc_r+0x82>
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	e7ec      	b.n	8002ff6 <_malloc_r+0x9a>
 800301c:	6862      	ldr	r2, [r4, #4]
 800301e:	42a3      	cmp	r3, r4
 8003020:	d101      	bne.n	8003026 <_malloc_r+0xca>
 8003022:	602a      	str	r2, [r5, #0]
 8003024:	e7ea      	b.n	8002ffc <_malloc_r+0xa0>
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e7e8      	b.n	8002ffc <_malloc_r+0xa0>
 800302a:	0023      	movs	r3, r4
 800302c:	6864      	ldr	r4, [r4, #4]
 800302e:	e7a7      	b.n	8002f80 <_malloc_r+0x24>
 8003030:	002c      	movs	r4, r5
 8003032:	686d      	ldr	r5, [r5, #4]
 8003034:	e7af      	b.n	8002f96 <_malloc_r+0x3a>
 8003036:	230c      	movs	r3, #12
 8003038:	0030      	movs	r0, r6
 800303a:	6033      	str	r3, [r6, #0]
 800303c:	f000 fbb8 	bl	80037b0 <__malloc_unlock>
 8003040:	e7cd      	b.n	8002fde <_malloc_r+0x82>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	200000e8 	.word	0x200000e8

08003048 <__sfputc_r>:
 8003048:	6893      	ldr	r3, [r2, #8]
 800304a:	b510      	push	{r4, lr}
 800304c:	3b01      	subs	r3, #1
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	da04      	bge.n	800305e <__sfputc_r+0x16>
 8003054:	6994      	ldr	r4, [r2, #24]
 8003056:	42a3      	cmp	r3, r4
 8003058:	db07      	blt.n	800306a <__sfputc_r+0x22>
 800305a:	290a      	cmp	r1, #10
 800305c:	d005      	beq.n	800306a <__sfputc_r+0x22>
 800305e:	6813      	ldr	r3, [r2, #0]
 8003060:	1c58      	adds	r0, r3, #1
 8003062:	6010      	str	r0, [r2, #0]
 8003064:	7019      	strb	r1, [r3, #0]
 8003066:	0008      	movs	r0, r1
 8003068:	bd10      	pop	{r4, pc}
 800306a:	f7ff fbff 	bl	800286c <__swbuf_r>
 800306e:	0001      	movs	r1, r0
 8003070:	e7f9      	b.n	8003066 <__sfputc_r+0x1e>

08003072 <__sfputs_r>:
 8003072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003074:	0006      	movs	r6, r0
 8003076:	000f      	movs	r7, r1
 8003078:	0014      	movs	r4, r2
 800307a:	18d5      	adds	r5, r2, r3
 800307c:	42ac      	cmp	r4, r5
 800307e:	d101      	bne.n	8003084 <__sfputs_r+0x12>
 8003080:	2000      	movs	r0, #0
 8003082:	e007      	b.n	8003094 <__sfputs_r+0x22>
 8003084:	7821      	ldrb	r1, [r4, #0]
 8003086:	003a      	movs	r2, r7
 8003088:	0030      	movs	r0, r6
 800308a:	f7ff ffdd 	bl	8003048 <__sfputc_r>
 800308e:	3401      	adds	r4, #1
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d1f3      	bne.n	800307c <__sfputs_r+0xa>
 8003094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003098 <_vfiprintf_r>:
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b0a1      	sub	sp, #132	; 0x84
 800309c:	0006      	movs	r6, r0
 800309e:	000c      	movs	r4, r1
 80030a0:	001f      	movs	r7, r3
 80030a2:	9203      	str	r2, [sp, #12]
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d004      	beq.n	80030b2 <_vfiprintf_r+0x1a>
 80030a8:	6983      	ldr	r3, [r0, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <_vfiprintf_r+0x1a>
 80030ae:	f7ff fdd9 	bl	8002c64 <__sinit>
 80030b2:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <_vfiprintf_r+0x254>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	d11c      	bne.n	80030f2 <_vfiprintf_r+0x5a>
 80030b8:	6874      	ldr	r4, [r6, #4]
 80030ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030bc:	07db      	lsls	r3, r3, #31
 80030be:	d405      	bmi.n	80030cc <_vfiprintf_r+0x34>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	059b      	lsls	r3, r3, #22
 80030c4:	d402      	bmi.n	80030cc <_vfiprintf_r+0x34>
 80030c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c8:	f7ff fe6d 	bl	8002da6 <__retarget_lock_acquire_recursive>
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	071b      	lsls	r3, r3, #28
 80030d0:	d502      	bpl.n	80030d8 <_vfiprintf_r+0x40>
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11d      	bne.n	8003114 <_vfiprintf_r+0x7c>
 80030d8:	0021      	movs	r1, r4
 80030da:	0030      	movs	r0, r6
 80030dc:	f7ff fc1c 	bl	8002918 <__swsetup_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d017      	beq.n	8003114 <_vfiprintf_r+0x7c>
 80030e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d50d      	bpl.n	8003106 <_vfiprintf_r+0x6e>
 80030ea:	2001      	movs	r0, #1
 80030ec:	4240      	negs	r0, r0
 80030ee:	b021      	add	sp, #132	; 0x84
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f2:	4b7f      	ldr	r3, [pc, #508]	; (80032f0 <_vfiprintf_r+0x258>)
 80030f4:	429c      	cmp	r4, r3
 80030f6:	d101      	bne.n	80030fc <_vfiprintf_r+0x64>
 80030f8:	68b4      	ldr	r4, [r6, #8]
 80030fa:	e7de      	b.n	80030ba <_vfiprintf_r+0x22>
 80030fc:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <_vfiprintf_r+0x25c>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d1db      	bne.n	80030ba <_vfiprintf_r+0x22>
 8003102:	68f4      	ldr	r4, [r6, #12]
 8003104:	e7d9      	b.n	80030ba <_vfiprintf_r+0x22>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	059b      	lsls	r3, r3, #22
 800310a:	d4ee      	bmi.n	80030ea <_vfiprintf_r+0x52>
 800310c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310e:	f7ff fe4b 	bl	8002da8 <__retarget_lock_release_recursive>
 8003112:	e7ea      	b.n	80030ea <_vfiprintf_r+0x52>
 8003114:	2300      	movs	r3, #0
 8003116:	ad08      	add	r5, sp, #32
 8003118:	616b      	str	r3, [r5, #20]
 800311a:	3320      	adds	r3, #32
 800311c:	766b      	strb	r3, [r5, #25]
 800311e:	3310      	adds	r3, #16
 8003120:	76ab      	strb	r3, [r5, #26]
 8003122:	9707      	str	r7, [sp, #28]
 8003124:	9f03      	ldr	r7, [sp, #12]
 8003126:	783b      	ldrb	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <_vfiprintf_r+0x98>
 800312c:	2b25      	cmp	r3, #37	; 0x25
 800312e:	d14e      	bne.n	80031ce <_vfiprintf_r+0x136>
 8003130:	9b03      	ldr	r3, [sp, #12]
 8003132:	1afb      	subs	r3, r7, r3
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	429f      	cmp	r7, r3
 800313a:	d00d      	beq.n	8003158 <_vfiprintf_r+0xc0>
 800313c:	9b05      	ldr	r3, [sp, #20]
 800313e:	0021      	movs	r1, r4
 8003140:	0030      	movs	r0, r6
 8003142:	9a03      	ldr	r2, [sp, #12]
 8003144:	f7ff ff95 	bl	8003072 <__sfputs_r>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d100      	bne.n	800314e <_vfiprintf_r+0xb6>
 800314c:	e0b5      	b.n	80032ba <_vfiprintf_r+0x222>
 800314e:	696a      	ldr	r2, [r5, #20]
 8003150:	9b05      	ldr	r3, [sp, #20]
 8003152:	4694      	mov	ip, r2
 8003154:	4463      	add	r3, ip
 8003156:	616b      	str	r3, [r5, #20]
 8003158:	783b      	ldrb	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d100      	bne.n	8003160 <_vfiprintf_r+0xc8>
 800315e:	e0ac      	b.n	80032ba <_vfiprintf_r+0x222>
 8003160:	2201      	movs	r2, #1
 8003162:	1c7b      	adds	r3, r7, #1
 8003164:	9303      	str	r3, [sp, #12]
 8003166:	2300      	movs	r3, #0
 8003168:	4252      	negs	r2, r2
 800316a:	606a      	str	r2, [r5, #4]
 800316c:	a904      	add	r1, sp, #16
 800316e:	3254      	adds	r2, #84	; 0x54
 8003170:	1852      	adds	r2, r2, r1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	60eb      	str	r3, [r5, #12]
 8003176:	60ab      	str	r3, [r5, #8]
 8003178:	7013      	strb	r3, [r2, #0]
 800317a:	65ab      	str	r3, [r5, #88]	; 0x58
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	2205      	movs	r2, #5
 8003180:	7819      	ldrb	r1, [r3, #0]
 8003182:	485d      	ldr	r0, [pc, #372]	; (80032f8 <_vfiprintf_r+0x260>)
 8003184:	f000 fb00 	bl	8003788 <memchr>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	1c5f      	adds	r7, r3, #1
 800318c:	2800      	cmp	r0, #0
 800318e:	d120      	bne.n	80031d2 <_vfiprintf_r+0x13a>
 8003190:	682a      	ldr	r2, [r5, #0]
 8003192:	06d3      	lsls	r3, r2, #27
 8003194:	d504      	bpl.n	80031a0 <_vfiprintf_r+0x108>
 8003196:	2353      	movs	r3, #83	; 0x53
 8003198:	a904      	add	r1, sp, #16
 800319a:	185b      	adds	r3, r3, r1
 800319c:	2120      	movs	r1, #32
 800319e:	7019      	strb	r1, [r3, #0]
 80031a0:	0713      	lsls	r3, r2, #28
 80031a2:	d504      	bpl.n	80031ae <_vfiprintf_r+0x116>
 80031a4:	2353      	movs	r3, #83	; 0x53
 80031a6:	a904      	add	r1, sp, #16
 80031a8:	185b      	adds	r3, r3, r1
 80031aa:	212b      	movs	r1, #43	; 0x2b
 80031ac:	7019      	strb	r1, [r3, #0]
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b2a      	cmp	r3, #42	; 0x2a
 80031b4:	d016      	beq.n	80031e4 <_vfiprintf_r+0x14c>
 80031b6:	2100      	movs	r1, #0
 80031b8:	68eb      	ldr	r3, [r5, #12]
 80031ba:	9f03      	ldr	r7, [sp, #12]
 80031bc:	783a      	ldrb	r2, [r7, #0]
 80031be:	1c78      	adds	r0, r7, #1
 80031c0:	3a30      	subs	r2, #48	; 0x30
 80031c2:	4684      	mov	ip, r0
 80031c4:	2a09      	cmp	r2, #9
 80031c6:	d94f      	bls.n	8003268 <_vfiprintf_r+0x1d0>
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d111      	bne.n	80031f0 <_vfiprintf_r+0x158>
 80031cc:	e017      	b.n	80031fe <_vfiprintf_r+0x166>
 80031ce:	3701      	adds	r7, #1
 80031d0:	e7a9      	b.n	8003126 <_vfiprintf_r+0x8e>
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <_vfiprintf_r+0x260>)
 80031d4:	682a      	ldr	r2, [r5, #0]
 80031d6:	1ac0      	subs	r0, r0, r3
 80031d8:	2301      	movs	r3, #1
 80031da:	4083      	lsls	r3, r0
 80031dc:	4313      	orrs	r3, r2
 80031de:	602b      	str	r3, [r5, #0]
 80031e0:	9703      	str	r7, [sp, #12]
 80031e2:	e7cb      	b.n	800317c <_vfiprintf_r+0xe4>
 80031e4:	9b07      	ldr	r3, [sp, #28]
 80031e6:	1d19      	adds	r1, r3, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	9107      	str	r1, [sp, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db01      	blt.n	80031f4 <_vfiprintf_r+0x15c>
 80031f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80031f2:	e004      	b.n	80031fe <_vfiprintf_r+0x166>
 80031f4:	425b      	negs	r3, r3
 80031f6:	60eb      	str	r3, [r5, #12]
 80031f8:	2302      	movs	r3, #2
 80031fa:	4313      	orrs	r3, r2
 80031fc:	602b      	str	r3, [r5, #0]
 80031fe:	783b      	ldrb	r3, [r7, #0]
 8003200:	2b2e      	cmp	r3, #46	; 0x2e
 8003202:	d10a      	bne.n	800321a <_vfiprintf_r+0x182>
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d137      	bne.n	800327a <_vfiprintf_r+0x1e2>
 800320a:	9b07      	ldr	r3, [sp, #28]
 800320c:	3702      	adds	r7, #2
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9207      	str	r2, [sp, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db2d      	blt.n	8003274 <_vfiprintf_r+0x1dc>
 8003218:	9309      	str	r3, [sp, #36]	; 0x24
 800321a:	2203      	movs	r2, #3
 800321c:	7839      	ldrb	r1, [r7, #0]
 800321e:	4837      	ldr	r0, [pc, #220]	; (80032fc <_vfiprintf_r+0x264>)
 8003220:	f000 fab2 	bl	8003788 <memchr>
 8003224:	2800      	cmp	r0, #0
 8003226:	d007      	beq.n	8003238 <_vfiprintf_r+0x1a0>
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <_vfiprintf_r+0x264>)
 800322a:	682a      	ldr	r2, [r5, #0]
 800322c:	1ac0      	subs	r0, r0, r3
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	4083      	lsls	r3, r0
 8003232:	4313      	orrs	r3, r2
 8003234:	3701      	adds	r7, #1
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	7839      	ldrb	r1, [r7, #0]
 800323a:	1c7b      	adds	r3, r7, #1
 800323c:	2206      	movs	r2, #6
 800323e:	4830      	ldr	r0, [pc, #192]	; (8003300 <_vfiprintf_r+0x268>)
 8003240:	9303      	str	r3, [sp, #12]
 8003242:	7629      	strb	r1, [r5, #24]
 8003244:	f000 faa0 	bl	8003788 <memchr>
 8003248:	2800      	cmp	r0, #0
 800324a:	d045      	beq.n	80032d8 <_vfiprintf_r+0x240>
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <_vfiprintf_r+0x26c>)
 800324e:	2b00      	cmp	r3, #0
 8003250:	d127      	bne.n	80032a2 <_vfiprintf_r+0x20a>
 8003252:	2207      	movs	r2, #7
 8003254:	9b07      	ldr	r3, [sp, #28]
 8003256:	3307      	adds	r3, #7
 8003258:	4393      	bics	r3, r2
 800325a:	3308      	adds	r3, #8
 800325c:	9307      	str	r3, [sp, #28]
 800325e:	696b      	ldr	r3, [r5, #20]
 8003260:	9a04      	ldr	r2, [sp, #16]
 8003262:	189b      	adds	r3, r3, r2
 8003264:	616b      	str	r3, [r5, #20]
 8003266:	e75d      	b.n	8003124 <_vfiprintf_r+0x8c>
 8003268:	210a      	movs	r1, #10
 800326a:	434b      	muls	r3, r1
 800326c:	4667      	mov	r7, ip
 800326e:	189b      	adds	r3, r3, r2
 8003270:	3909      	subs	r1, #9
 8003272:	e7a3      	b.n	80031bc <_vfiprintf_r+0x124>
 8003274:	2301      	movs	r3, #1
 8003276:	425b      	negs	r3, r3
 8003278:	e7ce      	b.n	8003218 <_vfiprintf_r+0x180>
 800327a:	2300      	movs	r3, #0
 800327c:	001a      	movs	r2, r3
 800327e:	3701      	adds	r7, #1
 8003280:	606b      	str	r3, [r5, #4]
 8003282:	7839      	ldrb	r1, [r7, #0]
 8003284:	1c78      	adds	r0, r7, #1
 8003286:	3930      	subs	r1, #48	; 0x30
 8003288:	4684      	mov	ip, r0
 800328a:	2909      	cmp	r1, #9
 800328c:	d903      	bls.n	8003296 <_vfiprintf_r+0x1fe>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0c3      	beq.n	800321a <_vfiprintf_r+0x182>
 8003292:	9209      	str	r2, [sp, #36]	; 0x24
 8003294:	e7c1      	b.n	800321a <_vfiprintf_r+0x182>
 8003296:	230a      	movs	r3, #10
 8003298:	435a      	muls	r2, r3
 800329a:	4667      	mov	r7, ip
 800329c:	1852      	adds	r2, r2, r1
 800329e:	3b09      	subs	r3, #9
 80032a0:	e7ef      	b.n	8003282 <_vfiprintf_r+0x1ea>
 80032a2:	ab07      	add	r3, sp, #28
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	0022      	movs	r2, r4
 80032a8:	0029      	movs	r1, r5
 80032aa:	0030      	movs	r0, r6
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <_vfiprintf_r+0x270>)
 80032ae:	e000      	b.n	80032b2 <_vfiprintf_r+0x21a>
 80032b0:	bf00      	nop
 80032b2:	9004      	str	r0, [sp, #16]
 80032b4:	9b04      	ldr	r3, [sp, #16]
 80032b6:	3301      	adds	r3, #1
 80032b8:	d1d1      	bne.n	800325e <_vfiprintf_r+0x1c6>
 80032ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032bc:	07db      	lsls	r3, r3, #31
 80032be:	d405      	bmi.n	80032cc <_vfiprintf_r+0x234>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	059b      	lsls	r3, r3, #22
 80032c4:	d402      	bmi.n	80032cc <_vfiprintf_r+0x234>
 80032c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c8:	f7ff fd6e 	bl	8002da8 <__retarget_lock_release_recursive>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	065b      	lsls	r3, r3, #25
 80032d0:	d500      	bpl.n	80032d4 <_vfiprintf_r+0x23c>
 80032d2:	e70a      	b.n	80030ea <_vfiprintf_r+0x52>
 80032d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032d6:	e70a      	b.n	80030ee <_vfiprintf_r+0x56>
 80032d8:	ab07      	add	r3, sp, #28
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	0022      	movs	r2, r4
 80032de:	0029      	movs	r1, r5
 80032e0:	0030      	movs	r0, r6
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <_vfiprintf_r+0x270>)
 80032e4:	f000 f882 	bl	80033ec <_printf_i>
 80032e8:	e7e3      	b.n	80032b2 <_vfiprintf_r+0x21a>
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	08003a4c 	.word	0x08003a4c
 80032f0:	08003a6c 	.word	0x08003a6c
 80032f4:	08003a2c 	.word	0x08003a2c
 80032f8:	08003a8c 	.word	0x08003a8c
 80032fc:	08003a92 	.word	0x08003a92
 8003300:	08003a96 	.word	0x08003a96
 8003304:	00000000 	.word	0x00000000
 8003308:	08003073 	.word	0x08003073

0800330c <_printf_common>:
 800330c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800330e:	0015      	movs	r5, r2
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	688a      	ldr	r2, [r1, #8]
 8003314:	690b      	ldr	r3, [r1, #16]
 8003316:	000c      	movs	r4, r1
 8003318:	9000      	str	r0, [sp, #0]
 800331a:	4293      	cmp	r3, r2
 800331c:	da00      	bge.n	8003320 <_printf_common+0x14>
 800331e:	0013      	movs	r3, r2
 8003320:	0022      	movs	r2, r4
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	3243      	adds	r2, #67	; 0x43
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	2a00      	cmp	r2, #0
 800332a:	d001      	beq.n	8003330 <_printf_common+0x24>
 800332c:	3301      	adds	r3, #1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	069b      	lsls	r3, r3, #26
 8003334:	d502      	bpl.n	800333c <_printf_common+0x30>
 8003336:	682b      	ldr	r3, [r5, #0]
 8003338:	3302      	adds	r3, #2
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	2306      	movs	r3, #6
 8003340:	0017      	movs	r7, r2
 8003342:	401f      	ands	r7, r3
 8003344:	421a      	tst	r2, r3
 8003346:	d027      	beq.n	8003398 <_printf_common+0x8c>
 8003348:	0023      	movs	r3, r4
 800334a:	3343      	adds	r3, #67	; 0x43
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	4193      	sbcs	r3, r2
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	0692      	lsls	r2, r2, #26
 8003356:	d430      	bmi.n	80033ba <_printf_common+0xae>
 8003358:	0022      	movs	r2, r4
 800335a:	9901      	ldr	r1, [sp, #4]
 800335c:	9800      	ldr	r0, [sp, #0]
 800335e:	9e08      	ldr	r6, [sp, #32]
 8003360:	3243      	adds	r2, #67	; 0x43
 8003362:	47b0      	blx	r6
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d025      	beq.n	80033b4 <_printf_common+0xa8>
 8003368:	2306      	movs	r3, #6
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	682a      	ldr	r2, [r5, #0]
 800336e:	68e1      	ldr	r1, [r4, #12]
 8003370:	2500      	movs	r5, #0
 8003372:	4003      	ands	r3, r0
 8003374:	2b04      	cmp	r3, #4
 8003376:	d103      	bne.n	8003380 <_printf_common+0x74>
 8003378:	1a8d      	subs	r5, r1, r2
 800337a:	43eb      	mvns	r3, r5
 800337c:	17db      	asrs	r3, r3, #31
 800337e:	401d      	ands	r5, r3
 8003380:	68a3      	ldr	r3, [r4, #8]
 8003382:	6922      	ldr	r2, [r4, #16]
 8003384:	4293      	cmp	r3, r2
 8003386:	dd01      	ble.n	800338c <_printf_common+0x80>
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	18ed      	adds	r5, r5, r3
 800338c:	2700      	movs	r7, #0
 800338e:	42bd      	cmp	r5, r7
 8003390:	d120      	bne.n	80033d4 <_printf_common+0xc8>
 8003392:	2000      	movs	r0, #0
 8003394:	e010      	b.n	80033b8 <_printf_common+0xac>
 8003396:	3701      	adds	r7, #1
 8003398:	68e3      	ldr	r3, [r4, #12]
 800339a:	682a      	ldr	r2, [r5, #0]
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	42bb      	cmp	r3, r7
 80033a0:	ddd2      	ble.n	8003348 <_printf_common+0x3c>
 80033a2:	0022      	movs	r2, r4
 80033a4:	2301      	movs	r3, #1
 80033a6:	9901      	ldr	r1, [sp, #4]
 80033a8:	9800      	ldr	r0, [sp, #0]
 80033aa:	9e08      	ldr	r6, [sp, #32]
 80033ac:	3219      	adds	r2, #25
 80033ae:	47b0      	blx	r6
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d1f0      	bne.n	8003396 <_printf_common+0x8a>
 80033b4:	2001      	movs	r0, #1
 80033b6:	4240      	negs	r0, r0
 80033b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033ba:	2030      	movs	r0, #48	; 0x30
 80033bc:	18e1      	adds	r1, r4, r3
 80033be:	3143      	adds	r1, #67	; 0x43
 80033c0:	7008      	strb	r0, [r1, #0]
 80033c2:	0021      	movs	r1, r4
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	3145      	adds	r1, #69	; 0x45
 80033c8:	7809      	ldrb	r1, [r1, #0]
 80033ca:	18a2      	adds	r2, r4, r2
 80033cc:	3243      	adds	r2, #67	; 0x43
 80033ce:	3302      	adds	r3, #2
 80033d0:	7011      	strb	r1, [r2, #0]
 80033d2:	e7c1      	b.n	8003358 <_printf_common+0x4c>
 80033d4:	0022      	movs	r2, r4
 80033d6:	2301      	movs	r3, #1
 80033d8:	9901      	ldr	r1, [sp, #4]
 80033da:	9800      	ldr	r0, [sp, #0]
 80033dc:	9e08      	ldr	r6, [sp, #32]
 80033de:	321a      	adds	r2, #26
 80033e0:	47b0      	blx	r6
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	d0e6      	beq.n	80033b4 <_printf_common+0xa8>
 80033e6:	3701      	adds	r7, #1
 80033e8:	e7d1      	b.n	800338e <_printf_common+0x82>
	...

080033ec <_printf_i>:
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	b08b      	sub	sp, #44	; 0x2c
 80033f0:	9206      	str	r2, [sp, #24]
 80033f2:	000a      	movs	r2, r1
 80033f4:	3243      	adds	r2, #67	; 0x43
 80033f6:	9307      	str	r3, [sp, #28]
 80033f8:	9005      	str	r0, [sp, #20]
 80033fa:	9204      	str	r2, [sp, #16]
 80033fc:	7e0a      	ldrb	r2, [r1, #24]
 80033fe:	000c      	movs	r4, r1
 8003400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003402:	2a78      	cmp	r2, #120	; 0x78
 8003404:	d807      	bhi.n	8003416 <_printf_i+0x2a>
 8003406:	2a62      	cmp	r2, #98	; 0x62
 8003408:	d809      	bhi.n	800341e <_printf_i+0x32>
 800340a:	2a00      	cmp	r2, #0
 800340c:	d100      	bne.n	8003410 <_printf_i+0x24>
 800340e:	e0c1      	b.n	8003594 <_printf_i+0x1a8>
 8003410:	2a58      	cmp	r2, #88	; 0x58
 8003412:	d100      	bne.n	8003416 <_printf_i+0x2a>
 8003414:	e08c      	b.n	8003530 <_printf_i+0x144>
 8003416:	0026      	movs	r6, r4
 8003418:	3642      	adds	r6, #66	; 0x42
 800341a:	7032      	strb	r2, [r6, #0]
 800341c:	e022      	b.n	8003464 <_printf_i+0x78>
 800341e:	0010      	movs	r0, r2
 8003420:	3863      	subs	r0, #99	; 0x63
 8003422:	2815      	cmp	r0, #21
 8003424:	d8f7      	bhi.n	8003416 <_printf_i+0x2a>
 8003426:	f7fc fe81 	bl	800012c <__gnu_thumb1_case_shi>
 800342a:	0016      	.short	0x0016
 800342c:	fff6001f 	.word	0xfff6001f
 8003430:	fff6fff6 	.word	0xfff6fff6
 8003434:	001ffff6 	.word	0x001ffff6
 8003438:	fff6fff6 	.word	0xfff6fff6
 800343c:	fff6fff6 	.word	0xfff6fff6
 8003440:	003600a8 	.word	0x003600a8
 8003444:	fff6009a 	.word	0xfff6009a
 8003448:	00b9fff6 	.word	0x00b9fff6
 800344c:	0036fff6 	.word	0x0036fff6
 8003450:	fff6fff6 	.word	0xfff6fff6
 8003454:	009e      	.short	0x009e
 8003456:	0026      	movs	r6, r4
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	3642      	adds	r6, #66	; 0x42
 800345c:	1d11      	adds	r1, r2, #4
 800345e:	6019      	str	r1, [r3, #0]
 8003460:	6813      	ldr	r3, [r2, #0]
 8003462:	7033      	strb	r3, [r6, #0]
 8003464:	2301      	movs	r3, #1
 8003466:	e0a7      	b.n	80035b8 <_printf_i+0x1cc>
 8003468:	6808      	ldr	r0, [r1, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	1d0a      	adds	r2, r1, #4
 800346e:	0605      	lsls	r5, r0, #24
 8003470:	d50b      	bpl.n	800348a <_printf_i+0x9e>
 8003472:	680d      	ldr	r5, [r1, #0]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	2d00      	cmp	r5, #0
 8003478:	da03      	bge.n	8003482 <_printf_i+0x96>
 800347a:	232d      	movs	r3, #45	; 0x2d
 800347c:	9a04      	ldr	r2, [sp, #16]
 800347e:	426d      	negs	r5, r5
 8003480:	7013      	strb	r3, [r2, #0]
 8003482:	4b61      	ldr	r3, [pc, #388]	; (8003608 <_printf_i+0x21c>)
 8003484:	270a      	movs	r7, #10
 8003486:	9303      	str	r3, [sp, #12]
 8003488:	e01b      	b.n	80034c2 <_printf_i+0xd6>
 800348a:	680d      	ldr	r5, [r1, #0]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	0641      	lsls	r1, r0, #25
 8003490:	d5f1      	bpl.n	8003476 <_printf_i+0x8a>
 8003492:	b22d      	sxth	r5, r5
 8003494:	e7ef      	b.n	8003476 <_printf_i+0x8a>
 8003496:	680d      	ldr	r5, [r1, #0]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	1d08      	adds	r0, r1, #4
 800349c:	6018      	str	r0, [r3, #0]
 800349e:	062e      	lsls	r6, r5, #24
 80034a0:	d501      	bpl.n	80034a6 <_printf_i+0xba>
 80034a2:	680d      	ldr	r5, [r1, #0]
 80034a4:	e003      	b.n	80034ae <_printf_i+0xc2>
 80034a6:	066d      	lsls	r5, r5, #25
 80034a8:	d5fb      	bpl.n	80034a2 <_printf_i+0xb6>
 80034aa:	680d      	ldr	r5, [r1, #0]
 80034ac:	b2ad      	uxth	r5, r5
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <_printf_i+0x21c>)
 80034b0:	2708      	movs	r7, #8
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	2a6f      	cmp	r2, #111	; 0x6f
 80034b6:	d000      	beq.n	80034ba <_printf_i+0xce>
 80034b8:	3702      	adds	r7, #2
 80034ba:	0023      	movs	r3, r4
 80034bc:	2200      	movs	r2, #0
 80034be:	3343      	adds	r3, #67	; 0x43
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	6863      	ldr	r3, [r4, #4]
 80034c4:	60a3      	str	r3, [r4, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db03      	blt.n	80034d2 <_printf_i+0xe6>
 80034ca:	2204      	movs	r2, #4
 80034cc:	6821      	ldr	r1, [r4, #0]
 80034ce:	4391      	bics	r1, r2
 80034d0:	6021      	str	r1, [r4, #0]
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d102      	bne.n	80034dc <_printf_i+0xf0>
 80034d6:	9e04      	ldr	r6, [sp, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <_printf_i+0x10a>
 80034dc:	9e04      	ldr	r6, [sp, #16]
 80034de:	0028      	movs	r0, r5
 80034e0:	0039      	movs	r1, r7
 80034e2:	f7fc feb3 	bl	800024c <__aeabi_uidivmod>
 80034e6:	9b03      	ldr	r3, [sp, #12]
 80034e8:	3e01      	subs	r6, #1
 80034ea:	5c5b      	ldrb	r3, [r3, r1]
 80034ec:	7033      	strb	r3, [r6, #0]
 80034ee:	002b      	movs	r3, r5
 80034f0:	0005      	movs	r5, r0
 80034f2:	429f      	cmp	r7, r3
 80034f4:	d9f3      	bls.n	80034de <_printf_i+0xf2>
 80034f6:	2f08      	cmp	r7, #8
 80034f8:	d109      	bne.n	800350e <_printf_i+0x122>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	07db      	lsls	r3, r3, #31
 80034fe:	d506      	bpl.n	800350e <_printf_i+0x122>
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	6922      	ldr	r2, [r4, #16]
 8003504:	4293      	cmp	r3, r2
 8003506:	dc02      	bgt.n	800350e <_printf_i+0x122>
 8003508:	2330      	movs	r3, #48	; 0x30
 800350a:	3e01      	subs	r6, #1
 800350c:	7033      	strb	r3, [r6, #0]
 800350e:	9b04      	ldr	r3, [sp, #16]
 8003510:	1b9b      	subs	r3, r3, r6
 8003512:	6123      	str	r3, [r4, #16]
 8003514:	9b07      	ldr	r3, [sp, #28]
 8003516:	0021      	movs	r1, r4
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	9805      	ldr	r0, [sp, #20]
 800351c:	9b06      	ldr	r3, [sp, #24]
 800351e:	aa09      	add	r2, sp, #36	; 0x24
 8003520:	f7ff fef4 	bl	800330c <_printf_common>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d14c      	bne.n	80035c2 <_printf_i+0x1d6>
 8003528:	2001      	movs	r0, #1
 800352a:	4240      	negs	r0, r0
 800352c:	b00b      	add	sp, #44	; 0x2c
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	3145      	adds	r1, #69	; 0x45
 8003532:	700a      	strb	r2, [r1, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <_printf_i+0x21c>)
 8003536:	9203      	str	r2, [sp, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	ca20      	ldmia	r2!, {r5}
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	0608      	lsls	r0, r1, #24
 8003542:	d516      	bpl.n	8003572 <_printf_i+0x186>
 8003544:	07cb      	lsls	r3, r1, #31
 8003546:	d502      	bpl.n	800354e <_printf_i+0x162>
 8003548:	2320      	movs	r3, #32
 800354a:	4319      	orrs	r1, r3
 800354c:	6021      	str	r1, [r4, #0]
 800354e:	2710      	movs	r7, #16
 8003550:	2d00      	cmp	r5, #0
 8003552:	d1b2      	bne.n	80034ba <_printf_i+0xce>
 8003554:	2320      	movs	r3, #32
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	439a      	bics	r2, r3
 800355a:	6022      	str	r2, [r4, #0]
 800355c:	e7ad      	b.n	80034ba <_printf_i+0xce>
 800355e:	2220      	movs	r2, #32
 8003560:	6809      	ldr	r1, [r1, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	0022      	movs	r2, r4
 8003568:	2178      	movs	r1, #120	; 0x78
 800356a:	3245      	adds	r2, #69	; 0x45
 800356c:	7011      	strb	r1, [r2, #0]
 800356e:	4a27      	ldr	r2, [pc, #156]	; (800360c <_printf_i+0x220>)
 8003570:	e7e1      	b.n	8003536 <_printf_i+0x14a>
 8003572:	0648      	lsls	r0, r1, #25
 8003574:	d5e6      	bpl.n	8003544 <_printf_i+0x158>
 8003576:	b2ad      	uxth	r5, r5
 8003578:	e7e4      	b.n	8003544 <_printf_i+0x158>
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	680d      	ldr	r5, [r1, #0]
 800357e:	1d10      	adds	r0, r2, #4
 8003580:	6949      	ldr	r1, [r1, #20]
 8003582:	6018      	str	r0, [r3, #0]
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	062e      	lsls	r6, r5, #24
 8003588:	d501      	bpl.n	800358e <_printf_i+0x1a2>
 800358a:	6019      	str	r1, [r3, #0]
 800358c:	e002      	b.n	8003594 <_printf_i+0x1a8>
 800358e:	066d      	lsls	r5, r5, #25
 8003590:	d5fb      	bpl.n	800358a <_printf_i+0x19e>
 8003592:	8019      	strh	r1, [r3, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	9e04      	ldr	r6, [sp, #16]
 8003598:	6123      	str	r3, [r4, #16]
 800359a:	e7bb      	b.n	8003514 <_printf_i+0x128>
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	1d11      	adds	r1, r2, #4
 80035a0:	6019      	str	r1, [r3, #0]
 80035a2:	6816      	ldr	r6, [r2, #0]
 80035a4:	2100      	movs	r1, #0
 80035a6:	0030      	movs	r0, r6
 80035a8:	6862      	ldr	r2, [r4, #4]
 80035aa:	f000 f8ed 	bl	8003788 <memchr>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d001      	beq.n	80035b6 <_printf_i+0x1ca>
 80035b2:	1b80      	subs	r0, r0, r6
 80035b4:	6060      	str	r0, [r4, #4]
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9a04      	ldr	r2, [sp, #16]
 80035be:	7013      	strb	r3, [r2, #0]
 80035c0:	e7a8      	b.n	8003514 <_printf_i+0x128>
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	0032      	movs	r2, r6
 80035c6:	9906      	ldr	r1, [sp, #24]
 80035c8:	9805      	ldr	r0, [sp, #20]
 80035ca:	9d07      	ldr	r5, [sp, #28]
 80035cc:	47a8      	blx	r5
 80035ce:	1c43      	adds	r3, r0, #1
 80035d0:	d0aa      	beq.n	8003528 <_printf_i+0x13c>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	079b      	lsls	r3, r3, #30
 80035d6:	d415      	bmi.n	8003604 <_printf_i+0x218>
 80035d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035da:	68e0      	ldr	r0, [r4, #12]
 80035dc:	4298      	cmp	r0, r3
 80035de:	daa5      	bge.n	800352c <_printf_i+0x140>
 80035e0:	0018      	movs	r0, r3
 80035e2:	e7a3      	b.n	800352c <_printf_i+0x140>
 80035e4:	0022      	movs	r2, r4
 80035e6:	2301      	movs	r3, #1
 80035e8:	9906      	ldr	r1, [sp, #24]
 80035ea:	9805      	ldr	r0, [sp, #20]
 80035ec:	9e07      	ldr	r6, [sp, #28]
 80035ee:	3219      	adds	r2, #25
 80035f0:	47b0      	blx	r6
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	d098      	beq.n	8003528 <_printf_i+0x13c>
 80035f6:	3501      	adds	r5, #1
 80035f8:	68e3      	ldr	r3, [r4, #12]
 80035fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	42ab      	cmp	r3, r5
 8003600:	dcf0      	bgt.n	80035e4 <_printf_i+0x1f8>
 8003602:	e7e9      	b.n	80035d8 <_printf_i+0x1ec>
 8003604:	2500      	movs	r5, #0
 8003606:	e7f7      	b.n	80035f8 <_printf_i+0x20c>
 8003608:	08003a9d 	.word	0x08003a9d
 800360c:	08003aae 	.word	0x08003aae

08003610 <_sbrk_r>:
 8003610:	2300      	movs	r3, #0
 8003612:	b570      	push	{r4, r5, r6, lr}
 8003614:	4d06      	ldr	r5, [pc, #24]	; (8003630 <_sbrk_r+0x20>)
 8003616:	0004      	movs	r4, r0
 8003618:	0008      	movs	r0, r1
 800361a:	602b      	str	r3, [r5, #0]
 800361c:	f7fe fe72 	bl	8002304 <_sbrk>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d103      	bne.n	800362c <_sbrk_r+0x1c>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d000      	beq.n	800362c <_sbrk_r+0x1c>
 800362a:	6023      	str	r3, [r4, #0]
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	200000f0 	.word	0x200000f0

08003634 <__sread>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	000c      	movs	r4, r1
 8003638:	250e      	movs	r5, #14
 800363a:	5f49      	ldrsh	r1, [r1, r5]
 800363c:	f000 f8c0 	bl	80037c0 <_read_r>
 8003640:	2800      	cmp	r0, #0
 8003642:	db03      	blt.n	800364c <__sread+0x18>
 8003644:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003646:	181b      	adds	r3, r3, r0
 8003648:	6563      	str	r3, [r4, #84]	; 0x54
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	4a02      	ldr	r2, [pc, #8]	; (8003658 <__sread+0x24>)
 8003650:	4013      	ands	r3, r2
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	e7f9      	b.n	800364a <__sread+0x16>
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	ffffefff 	.word	0xffffefff

0800365c <__swrite>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	001f      	movs	r7, r3
 8003660:	898b      	ldrh	r3, [r1, #12]
 8003662:	0005      	movs	r5, r0
 8003664:	000c      	movs	r4, r1
 8003666:	0016      	movs	r6, r2
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	d505      	bpl.n	8003678 <__swrite+0x1c>
 800366c:	230e      	movs	r3, #14
 800366e:	5ec9      	ldrsh	r1, [r1, r3]
 8003670:	2200      	movs	r2, #0
 8003672:	2302      	movs	r3, #2
 8003674:	f000 f874 	bl	8003760 <_lseek_r>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <__swrite+0x34>)
 800367c:	0028      	movs	r0, r5
 800367e:	4013      	ands	r3, r2
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	0032      	movs	r2, r6
 8003684:	230e      	movs	r3, #14
 8003686:	5ee1      	ldrsh	r1, [r4, r3]
 8003688:	003b      	movs	r3, r7
 800368a:	f000 f81f 	bl	80036cc <_write_r>
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003690:	ffffefff 	.word	0xffffefff

08003694 <__sseek>:
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	000c      	movs	r4, r1
 8003698:	250e      	movs	r5, #14
 800369a:	5f49      	ldrsh	r1, [r1, r5]
 800369c:	f000 f860 	bl	8003760 <_lseek_r>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	1c42      	adds	r2, r0, #1
 80036a4:	d103      	bne.n	80036ae <__sseek+0x1a>
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <__sseek+0x28>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0152      	lsls	r2, r2, #5
 80036b2:	4313      	orrs	r3, r2
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	6560      	str	r0, [r4, #84]	; 0x54
 80036b8:	e7f8      	b.n	80036ac <__sseek+0x18>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	ffffefff 	.word	0xffffefff

080036c0 <__sclose>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	230e      	movs	r3, #14
 80036c4:	5ec9      	ldrsh	r1, [r1, r3]
 80036c6:	f000 f815 	bl	80036f4 <_close_r>
 80036ca:	bd10      	pop	{r4, pc}

080036cc <_write_r>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0004      	movs	r4, r0
 80036d0:	0008      	movs	r0, r1
 80036d2:	0011      	movs	r1, r2
 80036d4:	001a      	movs	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	4d05      	ldr	r5, [pc, #20]	; (80036f0 <_write_r+0x24>)
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fe fd06 	bl	80020ec <_write>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d103      	bne.n	80036ec <_write_r+0x20>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d000      	beq.n	80036ec <_write_r+0x20>
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	200000f0 	.word	0x200000f0

080036f4 <_close_r>:
 80036f4:	2300      	movs	r3, #0
 80036f6:	b570      	push	{r4, r5, r6, lr}
 80036f8:	4d06      	ldr	r5, [pc, #24]	; (8003714 <_close_r+0x20>)
 80036fa:	0004      	movs	r4, r0
 80036fc:	0008      	movs	r0, r1
 80036fe:	602b      	str	r3, [r5, #0]
 8003700:	f7fe fdd3 	bl	80022aa <_close>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d103      	bne.n	8003710 <_close_r+0x1c>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d000      	beq.n	8003710 <_close_r+0x1c>
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	200000f0 	.word	0x200000f0

08003718 <_fstat_r>:
 8003718:	2300      	movs	r3, #0
 800371a:	b570      	push	{r4, r5, r6, lr}
 800371c:	4d06      	ldr	r5, [pc, #24]	; (8003738 <_fstat_r+0x20>)
 800371e:	0004      	movs	r4, r0
 8003720:	0008      	movs	r0, r1
 8003722:	0011      	movs	r1, r2
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	f7fe fdca 	bl	80022be <_fstat>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	d103      	bne.n	8003736 <_fstat_r+0x1e>
 800372e:	682b      	ldr	r3, [r5, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d000      	beq.n	8003736 <_fstat_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	200000f0 	.word	0x200000f0

0800373c <_isatty_r>:
 800373c:	2300      	movs	r3, #0
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	4d06      	ldr	r5, [pc, #24]	; (800375c <_isatty_r+0x20>)
 8003742:	0004      	movs	r4, r0
 8003744:	0008      	movs	r0, r1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f7fe fdc7 	bl	80022da <_isatty>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d103      	bne.n	8003758 <_isatty_r+0x1c>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d000      	beq.n	8003758 <_isatty_r+0x1c>
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	200000f0 	.word	0x200000f0

08003760 <_lseek_r>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	0004      	movs	r4, r0
 8003764:	0008      	movs	r0, r1
 8003766:	0011      	movs	r1, r2
 8003768:	001a      	movs	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	4d05      	ldr	r5, [pc, #20]	; (8003784 <_lseek_r+0x24>)
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fe fdbc 	bl	80022ec <_lseek>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d103      	bne.n	8003780 <_lseek_r+0x20>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d000      	beq.n	8003780 <_lseek_r+0x20>
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	200000f0 	.word	0x200000f0

08003788 <memchr>:
 8003788:	b2c9      	uxtb	r1, r1
 800378a:	1882      	adds	r2, r0, r2
 800378c:	4290      	cmp	r0, r2
 800378e:	d101      	bne.n	8003794 <memchr+0xc>
 8003790:	2000      	movs	r0, #0
 8003792:	4770      	bx	lr
 8003794:	7803      	ldrb	r3, [r0, #0]
 8003796:	428b      	cmp	r3, r1
 8003798:	d0fb      	beq.n	8003792 <memchr+0xa>
 800379a:	3001      	adds	r0, #1
 800379c:	e7f6      	b.n	800378c <memchr+0x4>
	...

080037a0 <__malloc_lock>:
 80037a0:	b510      	push	{r4, lr}
 80037a2:	4802      	ldr	r0, [pc, #8]	; (80037ac <__malloc_lock+0xc>)
 80037a4:	f7ff faff 	bl	8002da6 <__retarget_lock_acquire_recursive>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	200000e4 	.word	0x200000e4

080037b0 <__malloc_unlock>:
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4802      	ldr	r0, [pc, #8]	; (80037bc <__malloc_unlock+0xc>)
 80037b4:	f7ff faf8 	bl	8002da8 <__retarget_lock_release_recursive>
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	200000e4 	.word	0x200000e4

080037c0 <_read_r>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	0004      	movs	r4, r0
 80037c4:	0008      	movs	r0, r1
 80037c6:	0011      	movs	r1, r2
 80037c8:	001a      	movs	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	4d05      	ldr	r5, [pc, #20]	; (80037e4 <_read_r+0x24>)
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fe fd4e 	bl	8002270 <_read>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d103      	bne.n	80037e0 <_read_r+0x20>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d000      	beq.n	80037e0 <_read_r+0x20>
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	200000f0 	.word	0x200000f0

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
