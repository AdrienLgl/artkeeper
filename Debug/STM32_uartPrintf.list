
STM32_uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f84  08002f84  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f84  08002f84  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f84  08002f84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08002ff4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002ff4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000595c  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  000259ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00027220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  00027a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101e8  00000000  00000000  00028128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000696c  00000000  00000000  00038310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000525aa  00000000  00000000  0003ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c0  00000000  00000000  00091278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e8c 	.word	0x08002e8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002e8c 	.word	0x08002e8c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	2201      	movs	r2, #1
 8000242:	4013      	ands	r3, r2
 8000244:	3b01      	subs	r3, #1
 8000246:	425a      	negs	r2, r3
 8000248:	4153      	adcs	r3, r2
 800024a:	b2db      	uxtb	r3, r3
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800025e:	230f      	movs	r3, #15
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0018      	movs	r0, r3
 800026a:	f7ff ffe3 	bl	8000234 <LL_ADC_IsEnabled>
 800026e:	1e03      	subs	r3, r0, #0
 8000270:	d118      	bne.n	80002a4 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a11      	ldr	r2, [pc, #68]	; (80002bc <LL_ADC_Init+0x68>)
 8000278:	401a      	ands	r2, r3
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	6859      	ldr	r1, [r3, #4]
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4319      	orrs	r1, r3
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	430b      	orrs	r3, r1
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	089a      	lsrs	r2, r3, #2
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	e003      	b.n	80002ac <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002a4:	230f      	movs	r3, #15
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80002ac:	230f      	movs	r3, #15
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	781b      	ldrb	r3, [r3, #0]
}
 80002b2:	0018      	movs	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b004      	add	sp, #16
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	ffff3fc7 	.word	0xffff3fc7

080002c0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ca:	230f      	movs	r3, #15
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ffad 	bl	8000234 <LL_ADC_IsEnabled>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d115      	bne.n	800030a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <LL_ADC_REG_Init+0x60>)
 80002e4:	401a      	ands	r2, r3
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	6819      	ldr	r1, [r3, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4319      	orrs	r1, r3
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4319      	orrs	r1, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4319      	orrs	r1, r3
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	430b      	orrs	r3, r1
 8000302:	431a      	orrs	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	e003      	b.n	8000312 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800030a:	230f      	movs	r3, #15
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000312:	230f      	movs	r3, #15
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}
 8000320:	fffec23c 	.word	0xfffec23c

08000324 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <LL_EXTI_EnableIT_0_31+0x1c>)
 800032e:	6819      	ldr	r1, [r3, #0]
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	430a      	orrs	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010400 	.word	0x40010400

08000344 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <LL_EXTI_DisableIT_0_31+0x20>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	43d9      	mvns	r1, r3
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <LL_EXTI_DisableIT_0_31+0x20>)
 8000356:	400a      	ands	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	40010400 	.word	0x40010400

08000368 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000372:	6859      	ldr	r1, [r3, #4]
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	605a      	str	r2, [r3, #4]

}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010400 	.word	0x40010400

08000388 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000392:	685a      	ldr	r2, [r3, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	43d9      	mvns	r1, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <LL_EXTI_DisableEvent_0_31+0x20>)
 800039a:	400a      	ands	r2, r1
 800039c:	605a      	str	r2, [r3, #4]
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	40010400 	.word	0x40010400

080003ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80003b6:	6899      	ldr	r1, [r3, #8]
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	609a      	str	r2, [r3, #8]

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40010400 	.word	0x40010400

080003cc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	43d9      	mvns	r1, r3
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80003de:	400a      	ands	r2, r1
 80003e0:	609a      	str	r2, [r3, #8]

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40010400 	.word	0x40010400

080003f0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80003fa:	68d9      	ldr	r1, [r3, #12]
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	430a      	orrs	r2, r1
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010400 	.word	0x40010400

08000410 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	43d9      	mvns	r1, r3
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000422:	400a      	ands	r2, r1
 8000424:	60da      	str	r2, [r3, #12]
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40010400 	.word	0x40010400

08000434 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800043c:	230f      	movs	r3, #15
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d100      	bne.n	800044e <LL_EXTI_Init+0x1a>
 800044c:	e068      	b.n	8000520 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d100      	bne.n	8000458 <LL_EXTI_Init+0x24>
 8000456:	e06e      	b.n	8000536 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b02      	cmp	r3, #2
 800045e:	d01b      	beq.n	8000498 <LL_EXTI_Init+0x64>
 8000460:	dc25      	bgt.n	80004ae <LL_EXTI_Init+0x7a>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <LL_EXTI_Init+0x38>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d00b      	beq.n	8000482 <LL_EXTI_Init+0x4e>
 800046a:	e020      	b.n	80004ae <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ff89 	bl	8000388 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	0018      	movs	r0, r3
 800047c:	f7ff ff52 	bl	8000324 <LL_EXTI_EnableIT_0_31>
          break;
 8000480:	e01a      	b.n	80004b8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff ff5c 	bl	8000344 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ff69 	bl	8000368 <LL_EXTI_EnableEvent_0_31>
          break;
 8000496:	e00f      	b.n	80004b8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ff41 	bl	8000324 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff ff5e 	bl	8000368 <LL_EXTI_EnableEvent_0_31>
          break;
 80004ac:	e004      	b.n	80004b8 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 80004ae:	230f      	movs	r3, #15
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
          break;
 80004b6:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	799b      	ldrb	r3, [r3, #6]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d03a      	beq.n	8000536 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d01b      	beq.n	8000500 <LL_EXTI_Init+0xcc>
 80004c8:	dc25      	bgt.n	8000516 <LL_EXTI_Init+0xe2>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d002      	beq.n	80004d4 <LL_EXTI_Init+0xa0>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d00b      	beq.n	80004ea <LL_EXTI_Init+0xb6>
 80004d2:	e020      	b.n	8000516 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ff99 	bl	8000410 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff62 	bl	80003ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80004e8:	e026      	b.n	8000538 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ff6c 	bl	80003cc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff ff79 	bl	80003f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004fe:	e01b      	b.n	8000538 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff51 	bl	80003ac <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff6e 	bl	80003f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000514:	e010      	b.n	8000538 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8000516:	230f      	movs	r3, #15
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
            break;
 800051e:	e00b      	b.n	8000538 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff ff0d 	bl	8000344 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff2a 	bl	8000388 <LL_EXTI_DisableEvent_0_31>
 8000534:	e000      	b.n	8000538 <LL_EXTI_Init+0x104>
      }
 8000536:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8000538:	230f      	movs	r3, #15
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	781b      	ldrb	r3, [r3, #0]
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}

08000546 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b084      	sub	sp, #16
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	435b      	muls	r3, r3
 800055a:	001a      	movs	r2, r3
 800055c:	0013      	movs	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	189b      	adds	r3, r3, r2
 8000562:	43db      	mvns	r3, r3
 8000564:	400b      	ands	r3, r1
 8000566:	001a      	movs	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	435b      	muls	r3, r3
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	434b      	muls	r3, r1
 8000570:	431a      	orrs	r2, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bd80      	pop	{r7, pc}

0800057e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	43d2      	mvns	r2, r2
 8000592:	401a      	ands	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	434b      	muls	r3, r1
 800059a:	431a      	orrs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b004      	add	sp, #16
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6899      	ldr	r1, [r3, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	435b      	muls	r3, r3
 80005bc:	001a      	movs	r2, r3
 80005be:	0013      	movs	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	189b      	adds	r3, r3, r2
 80005c4:	43db      	mvns	r3, r3
 80005c6:	400b      	ands	r3, r1
 80005c8:	001a      	movs	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	435b      	muls	r3, r3
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	434b      	muls	r3, r1
 80005d2:	431a      	orrs	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b004      	add	sp, #16
 80005de:	bd80      	pop	{r7, pc}

080005e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68d9      	ldr	r1, [r3, #12]
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	435b      	muls	r3, r3
 80005f4:	001a      	movs	r2, r3
 80005f6:	0013      	movs	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	43db      	mvns	r3, r3
 80005fe:	400b      	ands	r3, r1
 8000600:	001a      	movs	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	435b      	muls	r3, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	434b      	muls	r3, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	60da      	str	r2, [r3, #12]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}

08000618 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a19      	ldr	r1, [r3, #32]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	435b      	muls	r3, r3
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	4353      	muls	r3, r2
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	435a      	muls	r2, r3
 8000634:	0013      	movs	r3, r2
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	43db      	mvns	r3, r3
 800063c:	400b      	ands	r3, r1
 800063e:	001a      	movs	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	435b      	muls	r3, r3
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	434b      	muls	r3, r1
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	434b      	muls	r3, r1
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	434b      	muls	r3, r1
 8000650:	431a      	orrs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}

0800065e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	0a12      	lsrs	r2, r2, #8
 8000676:	4353      	muls	r3, r2
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	0a12      	lsrs	r2, r2, #8
 800067c:	4353      	muls	r3, r2
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	0a12      	lsrs	r2, r2, #8
 8000682:	435a      	muls	r2, r3
 8000684:	0013      	movs	r3, r2
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	43db      	mvns	r3, r3
 800068c:	400b      	ands	r3, r1
 800068e:	001a      	movs	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	0a09      	lsrs	r1, r1, #8
 8000698:	434b      	muls	r3, r1
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	0a09      	lsrs	r1, r1, #8
 800069e:	434b      	muls	r3, r1
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	0a09      	lsrs	r1, r1, #8
 80006a4:	434b      	muls	r3, r1
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	434b      	muls	r3, r1
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80006ca:	e048      	b.n	800075e <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2101      	movs	r1, #1
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d03a      	beq.n	8000758 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d003      	beq.n	80006f2 <LL_GPIO_Init+0x3a>
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d10e      	bne.n	8000710 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff54 	bl	80005a8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ff37 	bl	800057e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	691a      	ldr	r2, [r3, #16]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff61 	bl	80005e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d111      	bne.n	800074a <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d807      	bhi.n	800073c <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff6f 	bl	8000618 <LL_GPIO_SetAFPin_0_7>
 800073a:	e006      	b.n	800074a <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff8a 	bl	800065e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	68b9      	ldr	r1, [r7, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fef7 	bl	8000546 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	40da      	lsrs	r2, r3
 8000766:	1e13      	subs	r3, r2, #0
 8000768:	d1b0      	bne.n	80006cc <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800076a:	2300      	movs	r3, #0
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}

08000774 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_RCC_HSI_IsReady+0x1c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2204      	movs	r2, #4
 800077e:	4013      	ands	r3, r2
 8000780:	2b04      	cmp	r3, #4
 8000782:	d101      	bne.n	8000788 <LL_RCC_HSI_IsReady+0x14>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <LL_RCC_HSI_IsReady+0x16>
 8000788:	2300      	movs	r3, #0
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <LL_RCC_LSE_IsReady+0x24>)
 800079a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	401a      	ands	r2, r3
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d101      	bne.n	80007ae <LL_RCC_LSE_IsReady+0x1a>
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <LL_RCC_LSE_IsReady+0x1c>
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <LL_RCC_MSI_GetRange+0x14>)
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	23e0      	movs	r3, #224	; 0xe0
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	4013      	ands	r3, r2
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <LL_RCC_GetSysClkSource+0x14>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	220c      	movs	r2, #12
 80007de:	4013      	ands	r3, r2
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <LL_RCC_GetAHBPrescaler+0x14>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	22f0      	movs	r2, #240	; 0xf0
 80007f6:	4013      	ands	r3, r2
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <LL_RCC_GetAPB1Prescaler+0x14>)
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	23e0      	movs	r3, #224	; 0xe0
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4013      	ands	r3, r2
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000

0800081c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	23e0      	movs	r3, #224	; 0xe0
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	4013      	ands	r3, r2
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_RCC_GetUSARTClockSource+0x20>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	401a      	ands	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	041b      	lsls	r3, r3, #16
 8000848:	4313      	orrs	r3, r2
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <LL_RCC_PLL_GetMainSource+0x14>)
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	4013      	ands	r3, r2
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	23f0      	movs	r3, #240	; 0xf0
 800087a:	039b      	lsls	r3, r3, #14
 800087c:	4013      	ands	r3, r2
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <LL_RCC_PLL_GetDivider+0x14>)
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	4013      	ands	r3, r2
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2210      	movs	r2, #16
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d101      	bne.n	80008b4 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000

080008c0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d139      	bne.n	8000946 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffad 	bl	8000834 <LL_RCC_GetUSARTClockSource>
 80008da:	0003      	movs	r3, r0
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <LL_RCC_GetUSARTClockFreq+0x120>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d01c      	beq.n	800091c <LL_RCC_GetUSARTClockFreq+0x5c>
 80008e2:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <LL_RCC_GetUSARTClockFreq+0x120>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d821      	bhi.n	800092c <LL_RCC_GetUSARTClockFreq+0x6c>
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <LL_RCC_GetUSARTClockFreq+0x124>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d003      	beq.n	80008f6 <LL_RCC_GetUSARTClockFreq+0x36>
 80008ee:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <LL_RCC_GetUSARTClockFreq+0x128>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d005      	beq.n	8000900 <LL_RCC_GetUSARTClockFreq+0x40>
 80008f4:	e01a      	b.n	800092c <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80008f6:	f000 f883 	bl	8000a00 <RCC_GetSystemClockFreq>
 80008fa:	0003      	movs	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]
        break;
 80008fe:	e027      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000900:	f7ff ff38 	bl	8000774 <LL_RCC_HSI_IsReady>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d020      	beq.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000908:	f7ff ffca 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d002      	beq.n	8000916 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000912:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000914:	e019      	b.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <LL_RCC_GetUSARTClockFreq+0x130>)
 8000918:	60fb      	str	r3, [r7, #12]
        break;
 800091a:	e016      	b.n	800094a <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800091c:	f7ff ff3a 	bl	8000794 <LL_RCC_LSE_IsReady>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d014      	beq.n	800094e <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
        }
        break;
 800092a:	e010      	b.n	800094e <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800092c:	f000 f868 	bl	8000a00 <RCC_GetSystemClockFreq>
 8000930:	0003      	movs	r3, r0
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f8a8 	bl	8000a88 <RCC_GetHCLKClockFreq>
 8000938:	0003      	movs	r3, r0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8ce 	bl	8000adc <RCC_GetPCLK2ClockFreq>
 8000940:	0003      	movs	r3, r0
 8000942:	60fb      	str	r3, [r7, #12]
        break;
 8000944:	e004      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e002      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	e000      	b.n	8000950 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800094e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b0c      	cmp	r3, #12
 8000954:	d139      	bne.n	80009ca <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff6b 	bl	8000834 <LL_RCC_GetUSARTClockSource>
 800095e:	0003      	movs	r3, r0
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01c      	beq.n	80009a0 <LL_RCC_GetUSARTClockFreq+0xe0>
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d821      	bhi.n	80009b0 <LL_RCC_GetUSARTClockFreq+0xf0>
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <LL_RCC_GetUSARTClockFreq+0x138>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d003      	beq.n	800097a <LL_RCC_GetUSARTClockFreq+0xba>
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <LL_RCC_GetUSARTClockFreq+0x13c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d005      	beq.n	8000984 <LL_RCC_GetUSARTClockFreq+0xc4>
 8000978:	e01a      	b.n	80009b0 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800097a:	f000 f841 	bl	8000a00 <RCC_GetSystemClockFreq>
 800097e:	0003      	movs	r3, r0
 8000980:	60fb      	str	r3, [r7, #12]
        break;
 8000982:	e027      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000984:	f7ff fef6 	bl	8000774 <LL_RCC_HSI_IsReady>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d020      	beq.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800098c:	f7ff ff88 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d002      	beq.n	800099a <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000996:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000998:	e019      	b.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <LL_RCC_GetUSARTClockFreq+0x130>)
 800099c:	60fb      	str	r3, [r7, #12]
        break;
 800099e:	e016      	b.n	80009ce <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80009a0:	f7ff fef8 	bl	8000794 <LL_RCC_LSE_IsReady>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d014      	beq.n	80009d2 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009ae:	e010      	b.n	80009d2 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80009b0:	f000 f826 	bl	8000a00 <RCC_GetSystemClockFreq>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f866 	bl	8000a88 <RCC_GetHCLKClockFreq>
 80009bc:	0003      	movs	r3, r0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f878 	bl	8000ab4 <RCC_GetPCLK1ClockFreq>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60fb      	str	r3, [r7, #12]
        break;
 80009c8:	e004      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	e002      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	e000      	b.n	80009d4 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80009d2:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80009d4:	68fb      	ldr	r3, [r7, #12]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	00030003 	.word	0x00030003
 80009e4:	00030001 	.word	0x00030001
 80009e8:	00030002 	.word	0x00030002
 80009ec:	003d0900 	.word	0x003d0900
 80009f0:	00f42400 	.word	0x00f42400
 80009f4:	000c000c 	.word	0x000c000c
 80009f8:	000c0004 	.word	0x000c0004
 80009fc:	000c0008 	.word	0x000c0008

08000a00 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000a06:	f7ff fee5 	bl	80007d4 <LL_RCC_GetSysClkSource>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	2b0c      	cmp	r3, #12
 8000a0e:	d020      	beq.n	8000a52 <RCC_GetSystemClockFreq+0x52>
 8000a10:	d824      	bhi.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
 8000a12:	2b08      	cmp	r3, #8
 8000a14:	d01a      	beq.n	8000a4c <RCC_GetSystemClockFreq+0x4c>
 8000a16:	d821      	bhi.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <RCC_GetSystemClockFreq+0x22>
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d00b      	beq.n	8000a38 <RCC_GetSystemClockFreq+0x38>
 8000a20:	e01c      	b.n	8000a5c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000a22:	f7ff fecb 	bl	80007bc <LL_RCC_MSI_GetRange>
 8000a26:	0003      	movs	r3, r0
 8000a28:	0b5b      	lsrs	r3, r3, #13
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0212      	lsls	r2, r2, #8
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	607b      	str	r3, [r7, #4]
      break;
 8000a36:	e01c      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000a38:	f7ff ff32 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d002      	beq.n	8000a46 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <RCC_GetSystemClockFreq+0x7c>)
 8000a42:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000a44:	e015      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <RCC_GetSystemClockFreq+0x80>)
 8000a48:	607b      	str	r3, [r7, #4]
      break;
 8000a4a:	e012      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <RCC_GetSystemClockFreq+0x84>)
 8000a4e:	607b      	str	r3, [r7, #4]
      break;
 8000a50:	e00f      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000a52:	f000 f857 	bl	8000b04 <RCC_PLL_GetFreqDomain_SYS>
 8000a56:	0003      	movs	r3, r0
 8000a58:	607b      	str	r3, [r7, #4]
      break;
 8000a5a:	e00a      	b.n	8000a72 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000a5c:	f7ff feae 	bl	80007bc <LL_RCC_MSI_GetRange>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0b5b      	lsrs	r3, r3, #13
 8000a64:	3301      	adds	r3, #1
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0212      	lsls	r2, r2, #8
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	607b      	str	r3, [r7, #4]
      break;
 8000a70:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000a72:	687b      	ldr	r3, [r7, #4]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	003d0900 	.word	0x003d0900
 8000a80:	00f42400 	.word	0x00f42400
 8000a84:	007a1200 	.word	0x007a1200

08000a88 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000a90:	f7ff feac 	bl	80007ec <LL_RCC_GetAHBPrescaler>
 8000a94:	0003      	movs	r3, r0
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	220f      	movs	r2, #15
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <RCC_GetHCLKClockFreq+0x28>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	40d3      	lsrs	r3, r2
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	08002ec8 	.word	0x08002ec8

08000ab4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000abc:	f7ff fea2 	bl	8000804 <LL_RCC_GetAPB1Prescaler>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <RCC_GetPCLK1ClockFreq+0x24>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	40d3      	lsrs	r3, r2
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	08002ed8 	.word	0x08002ed8

08000adc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000ae4:	f7ff fe9a 	bl	800081c <LL_RCC_GetAPB2Prescaler>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0adb      	lsrs	r3, r3, #11
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <RCC_GetPCLK2ClockFreq+0x24>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	001a      	movs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	40d3      	lsrs	r3, r2
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	08002ed8 	.word	0x08002ed8

08000b04 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000b0a:	f7ff fea5 	bl	8000858 <LL_RCC_PLL_GetMainSource>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000b18:	f7ff fec2 	bl	80008a0 <LL_RCC_IsActiveFlag_HSIDIV>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d002      	beq.n	8000b26 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000b22:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000b24:	e005      	b.n	8000b32 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000b28:	607b      	str	r3, [r7, #4]
      break;
 8000b2a:	e002      	b.n	8000b32 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000b2e:	607b      	str	r3, [r7, #4]
      break;
 8000b30:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000b32:	f7ff fe9d 	bl	8000870 <LL_RCC_PLL_GetMultiplicator>
 8000b36:	0003      	movs	r3, r0
 8000b38:	0c9b      	lsrs	r3, r3, #18
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	001a      	movs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4353      	muls	r3, r2
 8000b44:	001c      	movs	r4, r3
 8000b46:	f7ff fe9f 	bl	8000888 <LL_RCC_PLL_GetDivider>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	0d9b      	lsrs	r3, r3, #22
 8000b4e:	3301      	adds	r3, #1
 8000b50:	0019      	movs	r1, r3
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff fae2 	bl	800011c <__udivsi3>
 8000b58:	0003      	movs	r3, r0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b003      	add	sp, #12
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	003d0900 	.word	0x003d0900
 8000b68:	00f42400 	.word	0x00f42400
 8000b6c:	007a1200 	.word	0x007a1200
 8000b70:	08002ee0 	.word	0x08002ee0

08000b74 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d101      	bne.n	8000b8c <LL_USART_IsEnabled+0x18>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <LL_USART_IsEnabled+0x1a>
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <LL_USART_SetStopBitsLength+0x24>)
 8000ba8:	401a      	ands	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	ffffcfff 	.word	0xffffcfff

08000bc0 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <LL_USART_SetHWFlowCtrl+0x24>)
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	fffffcff 	.word	0xfffffcff

08000be8 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d11c      	bne.n	8000c3a <LL_USART_SetBaudRate+0x52>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	005a      	lsls	r2, r3, #1
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fa85 	bl	800011c <__udivsi3>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <LL_USART_SetBaudRate+0x74>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	001a      	movs	r2, r3
 8000c28:	2307      	movs	r3, #7
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000c38:	e00c      	b.n	8000c54 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	085a      	lsrs	r2, r3, #1
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fa69 	bl	800011c <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0000fff0 	.word	0x0000fff0

08000c60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff7b 	bl	8000b74 <LL_USART_IsEnabled>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d145      	bne.n	8000d0e <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <LL_USART_Init+0xbc>)
 8000c88:	401a      	ands	r2, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	6859      	ldr	r1, [r3, #4]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	4319      	orrs	r1, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff72 	bl	8000b98 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff7f 	bl	8000bc0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <LL_USART_Init+0xc0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f7ff fdf8 	bl	80008c0 <LL_RCC_GetUSARTClockFreq>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e008      	b.n	8000ce8 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <LL_USART_Init+0xc4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d104      	bne.n	8000ce8 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000cde:	200c      	movs	r0, #12
 8000ce0:	f7ff fdee 	bl	80008c0 <LL_RCC_GetUSARTClockFreq>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00f      	beq.n	8000d0e <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00b      	beq.n	8000d0e <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff6d 	bl	8000be8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	efff69f3 	.word	0xefff69f3
 8000d20:	40013800 	.word	0x40013800
 8000d24:	40004400 	.word	0x40004400

08000d28 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff f9f1 	bl	800011c <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_InitTick+0x30>)
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <LL_InitTick+0x30>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <LL_InitTick+0x30>)
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d64:	23fa      	movs	r3, #250	; 0xfa
 8000d66:	009a      	lsls	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffdb 	bl	8000d28 <LL_InitTick>
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <LL_SetSystemCoreClock+0x18>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000000 	.word	0x20000000

08000d98 <LL_ADC_SetCommonClock>:
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <LL_ADC_SetCommonClock+0x24>)
 8000da8:	401a      	ands	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	ffc3ffff 	.word	0xffc3ffff

08000dc0 <LL_ADC_SetCommonFrequencyMode>:
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	fdffffff 	.word	0xfdffffff

08000de8 <LL_ADC_SetCommonPathInternalCh>:
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000df8:	401a      	ands	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	fe3fffff 	.word	0xfe3fffff

08000e10 <LL_ADC_SetClock>:
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	089a      	lsrs	r2, r3, #2
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	611a      	str	r2, [r3, #16]
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	2207      	movs	r2, #7
 8000e42:	4393      	bics	r3, r2
 8000e44:	001a      	movs	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	615a      	str	r2, [r3, #20]
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <LL_ADC_REG_SetSequencerScanDirection>:
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	2204      	movs	r2, #4
 8000e66:	4393      	bics	r3, r2
 8000e68:	001a      	movs	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60da      	str	r2, [r3, #12]
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LL_ADC_REG_SetSequencerChAdd>:
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	035b      	lsls	r3, r3, #13
 8000e8c:	0b5b      	lsrs	r3, r3, #13
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LL_ADC_SetOverSamplingScope>:
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4393      	bics	r3, r2
 8000eae:	001a      	movs	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	611a      	str	r2, [r3, #16]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <LL_ADC_EnableInternalRegulator>:
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0552      	lsls	r2, r2, #21
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	6fffffe8 	.word	0x6fffffe8

08000ee8 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	001a      	movs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2208      	movs	r2, #8
 8000f14:	4393      	bics	r3, r2
 8000f16:	001a      	movs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	605a      	str	r2, [r3, #4]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8000f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b004      	add	sp, #16
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b090      	sub	sp, #64	; 0x40
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000f82:	2428      	movs	r4, #40	; 0x28
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	0018      	movs	r0, r3
 8000f88:	2314      	movs	r3, #20
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f000 ff21 	bl	8001dd4 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000f92:	2518      	movs	r5, #24
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	0018      	movs	r0, r3
 8000f98:	2310      	movs	r3, #16
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f000 ff19 	bl	8001dd4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f000 ff12 	bl	8001dd4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ffb5 	bl	8000f24 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f7ff ffc8 	bl	8000f50 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PC1   ------> ADC_IN11
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2203      	movs	r2, #3
 8000fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <MX_ADC_Init+0x184>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f7ff fb6d 	bl	80006b8 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_11);
 8000fde:	4a49      	ldr	r2, [pc, #292]	; (8001104 <MX_ADC_Init+0x188>)
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <MX_ADC_Init+0x18c>)
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ff48 	bl	8000e7a <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_TEMPSENSOR);
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <MX_ADC_Init+0x190>)
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <MX_ADC_Init+0x18c>)
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff42 	bl	8000e7a <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	4a45      	ldr	r2, [pc, #276]	; (8001110 <MX_ADC_Init+0x194>)
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	0010      	movs	r0, r2
 8001000:	f7ff fef2 	bl	8000de8 <LL_ADC_SetCommonPathInternalCh>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8001004:	4a43      	ldr	r2, [pc, #268]	; (8001114 <MX_ADC_Init+0x198>)
 8001006:	4b40      	ldr	r3, [pc, #256]	; (8001108 <MX_ADC_Init+0x18c>)
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff35 	bl	8000e7a <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	03db      	lsls	r3, r3, #15
 8001014:	4a3e      	ldr	r2, [pc, #248]	; (8001110 <MX_ADC_Init+0x194>)
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f7ff fee5 	bl	8000de8 <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800101e:	0021      	movs	r1, r4
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800103e:	187b      	adds	r3, r7, r1
 8001040:	4a31      	ldr	r2, [pc, #196]	; (8001108 <MX_ADC_Init+0x18c>)
 8001042:	0019      	movs	r1, r3
 8001044:	0010      	movs	r0, r2
 8001046:	f7ff f93b 	bl	80002c0 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <MX_ADC_Init+0x18c>)
 800104c:	2105      	movs	r1, #5
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff feef 	bl	8000e32 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <MX_ADC_Init+0x18c>)
 8001056:	2100      	movs	r1, #0
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff1f 	bl	8000e9c <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_ADC_Init+0x18c>)
 8001060:	2100      	movs	r1, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fef7 	bl	8000e56 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	049b      	lsls	r3, r3, #18
 800106c:	4a28      	ldr	r2, [pc, #160]	; (8001110 <MX_ADC_Init+0x194>)
 800106e:	0019      	movs	r1, r3
 8001070:	0010      	movs	r0, r2
 8001072:	f7ff fea5 	bl	8000dc0 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_ADC_Init+0x18c>)
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ff35 	bl	8000ee8 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_ADC_Init+0x18c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff40 	bl	8000f06 <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001086:	197b      	adds	r3, r7, r5
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800108c:	197b      	adds	r3, r7, r5
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001092:	197b      	adds	r3, r7, r5
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001098:	197b      	adds	r3, r7, r5
 800109a:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_ADC_Init+0x18c>)
 800109c:	0019      	movs	r1, r3
 800109e:	0010      	movs	r0, r2
 80010a0:	f7ff f8d8 	bl	8000254 <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_ADC_Init+0x18c>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff feb1 	bl	8000e10 <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 80010ae:	23e0      	movs	r3, #224	; 0xe0
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC_Init+0x194>)
 80010b4:	0019      	movs	r1, r3
 80010b6:	0010      	movs	r0, r2
 80010b8:	f7ff fe6e 	bl	8000d98 <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC_Init+0x18c>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff fefe 	bl	8000ec0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_ADC_Init+0x19c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4914      	ldr	r1, [pc, #80]	; (800111c <MX_ADC_Init+0x1a0>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff f826 	bl	800011c <__udivsi3>
 80010d0:	0003      	movs	r3, r0
 80010d2:	001a      	movs	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	189b      	adds	r3, r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	210a      	movs	r1, #10
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff f81c 	bl	800011c <__udivsi3>
 80010e4:	0003      	movs	r3, r0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80010e8:	e002      	b.n	80010f0 <MX_ADC_Init+0x174>
  {
    wait_loop_index--;
 80010ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ec:	3b01      	subs	r3, #1
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80010f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <MX_ADC_Init+0x16e>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b010      	add	sp, #64	; 0x40
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	50000800 	.word	0x50000800
 8001104:	2c000800 	.word	0x2c000800
 8001108:	40012400 	.word	0x40012400
 800110c:	c8040000 	.word	0xc8040000
 8001110:	40012708 	.word	0x40012708
 8001114:	c4020000 	.word	0xc4020000
 8001118:	20000000 	.word	0x20000000
 800111c:	00030d40 	.word	0x00030d40

08001120 <LL_IOP_GRP1_EnableClock>:
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <LL_IOP_GRP1_EnableClock+0x28>)
 800112a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LL_IOP_GRP1_EnableClock+0x28>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <LL_IOP_GRP1_EnableClock+0x28>)
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b004      	add	sp, #16
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000

0800114c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <LL_SYSCFG_SetEXTISource+0x48>)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	21ff      	movs	r1, #255	; 0xff
 800115c:	400b      	ands	r3, r1
 800115e:	3302      	adds	r3, #2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	589b      	ldr	r3, [r3, r2]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	0c12      	lsrs	r2, r2, #16
 8001168:	210f      	movs	r1, #15
 800116a:	4091      	lsls	r1, r2
 800116c:	000a      	movs	r2, r1
 800116e:	43d2      	mvns	r2, r2
 8001170:	401a      	ands	r2, r3
 8001172:	0011      	movs	r1, r2
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	409a      	lsls	r2, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <LL_SYSCFG_SetEXTISource+0x48>)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	24ff      	movs	r4, #255	; 0xff
 8001182:	4023      	ands	r3, r4
 8001184:	430a      	orrs	r2, r1
 8001186:	3302      	adds	r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	501a      	str	r2, [r3, r0]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	40010000 	.word	0x40010000

08001198 <LL_GPIO_SetPinMode>:
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	435b      	muls	r3, r3
 80011ac:	001a      	movs	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	189b      	adds	r3, r3, r2
 80011b4:	43db      	mvns	r3, r3
 80011b6:	400b      	ands	r3, r1
 80011b8:	001a      	movs	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	435b      	muls	r3, r3
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	434b      	muls	r3, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LL_GPIO_SetPinPull>:
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	68d9      	ldr	r1, [r3, #12]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	435b      	muls	r3, r3
 80011e4:	001a      	movs	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	189b      	adds	r3, r3, r2
 80011ec:	43db      	mvns	r3, r3
 80011ee:	400b      	ands	r3, r1
 80011f0:	001a      	movs	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	435b      	muls	r3, r3
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	434b      	muls	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	60da      	str	r2, [r3, #12]
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001226:	2418      	movs	r4, #24
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	2308      	movs	r3, #8
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f000 fdcf 	bl	8001dd4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	003b      	movs	r3, r7
 8001238:	0018      	movs	r0, r3
 800123a:	2318      	movs	r3, #24
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f000 fdc8 	bl	8001dd4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff ff6b 	bl	8001120 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800124a:	2080      	movs	r0, #128	; 0x80
 800124c:	f7ff ff68 	bl	8001120 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ff65 	bl	8001120 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <MX_GPIO_Init+0xf4>)
 8001258:	2101      	movs	r1, #1
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ffd4 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2120      	movs	r1, #32
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff ffce 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_GPIO_Init+0xf8>)
 800126e:	0019      	movs	r1, r3
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff ff6b 	bl	800114c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	4826      	ldr	r0, [pc, #152]	; (8001314 <MX_GPIO_Init+0xf4>)
 800127c:	2200      	movs	r2, #0
 800127e:	0019      	movs	r1, r3
 8001280:	f7ff ffa6 	bl	80011d0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	019b      	lsls	r3, r3, #6
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <MX_GPIO_Init+0xf4>)
 800128a:	2200      	movs	r2, #0
 800128c:	0019      	movs	r1, r3
 800128e:	f7ff ff83 	bl	8001198 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001292:	0021      	movs	r1, r4
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	0192      	lsls	r2, r2, #6
 800129a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2201      	movs	r2, #1
 80012a0:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2202      	movs	r2, #2
 80012ac:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff f8bf 	bl	8000434 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80012b6:	003b      	movs	r3, r7
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012bc:	003b      	movs	r3, r7
 80012be:	2201      	movs	r2, #1
 80012c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012c2:	003b      	movs	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c8:	003b      	movs	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ce:	003b      	movs	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	003b      	movs	r3, r7
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_GPIO_Init+0xf4>)
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f7ff f9ec 	bl	80006b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e0:	003b      	movs	r3, r7
 80012e2:	2220      	movs	r2, #32
 80012e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e6:	003b      	movs	r3, r7
 80012e8:	2201      	movs	r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ec:	003b      	movs	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f2:	003b      	movs	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fe:	003a      	movs	r2, r7
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff f9d6 	bl	80006b8 <LL_GPIO_Init>

}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b009      	add	sp, #36	; 0x24
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	50000800 	.word	0x50000800
 8001318:	00040003 	.word	0x00040003

0800131c <LL_ADC_SetCommonPathInternalCh>:
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800132c:	401a      	ands	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	fe3fffff 	.word	0xfe3fffff

08001344 <LL_ADC_REG_SetSequencerChannels>:
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	0b5a      	lsrs	r2, r3, #13
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <LL_ADC_Enable>:
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <LL_ADC_Enable+0x20>)
 800136e:	4013      	ands	r3, r2
 8001370:	2201      	movs	r2, #1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	7fffffe8 	.word	0x7fffffe8

08001384 <LL_ADC_REG_StartConversion>:
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <LL_ADC_REG_StartConversion+0x20>)
 8001392:	4013      	ands	r3, r2
 8001394:	2204      	movs	r2, #4
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	7fffffe8 	.word	0x7fffffe8

080013a8 <LL_ADC_REG_ReadConversionData12>:
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	b29b      	uxth	r3, r3
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <LL_ADC_IsActiveFlag_EOC>:
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2204      	movs	r2, #4
 80013cc:	4013      	ands	r3, r2
 80013ce:	3b04      	subs	r3, #4
 80013d0:	425a      	negs	r2, r3
 80013d2:	4153      	adcs	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <LL_RCC_HSI_Enable>:
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <LL_RCC_HSI_Enable+0x18>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <LL_RCC_HSI_Enable+0x18>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40021000 	.word	0x40021000

080013fc <LL_RCC_HSI_IsReady>:
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_RCC_HSI_IsReady+0x1c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2204      	movs	r2, #4
 8001406:	4013      	ands	r3, r2
 8001408:	2b04      	cmp	r3, #4
 800140a:	d101      	bne.n	8001410 <LL_RCC_HSI_IsReady+0x14>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <LL_RCC_HSI_IsReady+0x16>
 8001410:	2300      	movs	r3, #0
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <LL_RCC_HSI_SetCalibTrimming>:
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800142a:	4013      	ands	r3, r2
 800142c:	0019      	movs	r1, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	021a      	lsls	r2, r3, #8
 8001432:	4b03      	ldr	r3, [pc, #12]	; (8001440 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	ffffe0ff 	.word	0xffffe0ff

08001448 <LL_RCC_SetSysClkSource>:
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <LL_RCC_SetSysClkSource+0x24>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2203      	movs	r2, #3
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <LL_RCC_SetSysClkSource+0x24>)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40021000 	.word	0x40021000

08001470 <LL_RCC_GetSysClkSource>:
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <LL_RCC_GetSysClkSource+0x14>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000

08001488 <LL_RCC_SetAHBPrescaler>:
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <LL_RCC_SetAHBPrescaler+0x24>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	22f0      	movs	r2, #240	; 0xf0
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_RCC_SetAHBPrescaler+0x24>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_RCC_SetAPB1Prescaler>:
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40021000 	.word	0x40021000
 80014d8:	fffff8ff 	.word	0xfffff8ff

080014dc <LL_RCC_SetAPB2Prescaler>:
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <LL_RCC_SetAPB2Prescaler+0x28>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40021000 	.word	0x40021000
 8001504:	ffffc7ff 	.word	0xffffc7ff

08001508 <LL_RCC_SetUSARTClockSource>:
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	0c12      	lsrs	r2, r2, #16
 8001518:	43d2      	mvns	r2, r2
 800151a:	401a      	ands	r2, r3
 800151c:	0011      	movs	r1, r2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	0c1a      	lsrs	r2, r3, #16
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001526:	430a      	orrs	r2, r1
 8001528:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40021000 	.word	0x40021000

08001538 <LL_APB1_GRP1_EnableClock>:
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <LL_APB1_GRP1_EnableClock+0x28>)
 8001542:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <LL_APB1_GRP1_EnableClock+0x28>)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	430a      	orrs	r2, r1
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <LL_APB1_GRP1_EnableClock+0x28>)
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <LL_APB2_GRP1_EnableClock>:
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <LL_APB2_GRP1_EnableClock+0x28>)
 800156e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <LL_APB2_GRP1_EnableClock+0x28>)
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	430a      	orrs	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <LL_APB2_GRP1_EnableClock+0x28>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000

08001590 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <LL_FLASH_SetLatency+0x24>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	4393      	bics	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LL_FLASH_SetLatency+0x24>)
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40022000 	.word	0x40022000

080015b8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <LL_FLASH_GetLatency+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40022000 	.word	0x40022000

080015d0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40007000 	.word	0x40007000
 80015f8:	ffffe7ff 	.word	0xffffe7ff

080015fc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	4013      	ands	r3, r2
 800160c:	2b80      	cmp	r3, #128	; 0x80
 800160e:	d101      	bne.n	8001614 <LL_USART_IsActiveFlag_TXE+0x18>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}

0800161e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001626:	f3ef 8310 	mrs	r3, PRIMASK
 800162a:	60bb      	str	r3, [r7, #8]
  return(result);
 800162c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	2301      	movs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f383 8810 	msr	PRIMASK, r3
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2220      	movs	r2, #32
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f383 8810 	msr	PRIMASK, r3
}
 8001652:	46c0      	nop			; (mov r8, r8)
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b006      	add	sp, #24
 800165a:	bd80      	pop	{r7, pc}

0800165c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	000a      	movs	r2, r1
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff ff6e 	bl	8001564 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	055b      	lsls	r3, r3, #21
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff ff53 	bl	8001538 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f855 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f7ff fdc3 	bl	8001220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800169a:	f000 fac9 	bl	8001c30 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800169e:	f7ff fc6d 	bl	8000f7c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  getchInit();
 80016a2:	f000 f8ff 	bl	80018a4 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <main+0xa8>)
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff ffb8 	bl	800161e <LL_USART_EnableIT_RXNE>
  printf("Ready !!!!\r\n"); //print it
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <main+0xac>)
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 fc23 	bl	8001efc <puts>

  LL_ADC_Enable(ADC1);
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <main+0xb0>)
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff fe51 	bl	8001360 <LL_ADC_Enable>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <main+0xb4>)
 80016c4:	0019      	movs	r1, r3
 80016c6:	0010      	movs	r0, r2
 80016c8:	f7ff fe28 	bl	800131c <LL_ADC_SetCommonPathInternalCh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (kbhit()) //if one char received on USART2
 80016cc:	f000 f914 	bl	80018f8 <kbhit>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d0fb      	beq.n	80016cc <main+0x50>
	{
	  printf("Recu:%c\r\n", getch()); //print it
 80016d4:	f000 f8f0 	bl	80018b8 <getch>
 80016d8:	0003      	movs	r3, r0
 80016da:	001a      	movs	r2, r3
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <main+0xb8>)
 80016de:	0011      	movs	r1, r2
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 fb7f 	bl	8001de4 <iprintf>

	  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_11);
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <main+0xbc>)
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <main+0xb0>)
 80016ea:	0011      	movs	r1, r2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff fe29 	bl	8001344 <LL_ADC_REG_SetSequencerChannels>
	  LL_ADC_REG_StartConversion(ADC1);
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <main+0xb0>)
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fe45 	bl	8001384 <LL_ADC_REG_StartConversion>
	  if (LL_ADC_IsActiveFlag_EOC(ADC1)) {
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <main+0xb0>)
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fe5e 	bl	80013be <LL_ADC_IsActiveFlag_EOC>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d0e2      	beq.n	80016cc <main+0x50>
		  uint16_t t = LL_ADC_REG_ReadConversionData12(ADC1);
 8001706:	1dbc      	adds	r4, r7, #6
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <main+0xb0>)
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fe4c 	bl	80013a8 <LL_ADC_REG_ReadConversionData12>
 8001710:	0003      	movs	r3, r0
 8001712:	8023      	strh	r3, [r4, #0]
		  printf("Valeur:%i\r\n", t);
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <main+0xc0>)
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f000 fb61 	bl	8001de4 <iprintf>
	if (kbhit()) //if one char received on USART2
 8001722:	e7d3      	b.n	80016cc <main+0x50>
 8001724:	40004400 	.word	0x40004400
 8001728:	08002ea4 	.word	0x08002ea4
 800172c:	40012400 	.word	0x40012400
 8001730:	40012708 	.word	0x40012708
 8001734:	08002eb0 	.word	0x08002eb0
 8001738:	2c000800 	.word	0x2c000800
 800173c:	08002ebc 	.word	0x08002ebc

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ff23 	bl	8001590 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	f7ff ff34 	bl	80015b8 <LL_FLASH_GetLatency>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d1fb      	bne.n	800174c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff39 	bl	80015d0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800175e:	f7ff fe3f 	bl	80013e0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	f7ff fe4a 	bl	80013fc <LL_RCC_HSI_IsReady>
 8001768:	0003      	movs	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d1fa      	bne.n	8001764 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff fe54 	bl	800141c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fe87 	bl	8001488 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fe98 	bl	80014b0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff feab 	bl	80014dc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff fe5e 	bl	8001448 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	f7ff fe6f 	bl	8001470 <LL_RCC_GetSysClkSource>
 8001792:	0003      	movs	r3, r0
 8001794:	2b04      	cmp	r3, #4
 8001796:	d1fa      	bne.n	800178e <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <SystemClock_Config+0x78>)
 800179a:	0018      	movs	r0, r3
 800179c:	f7ff fade 	bl	8000d5c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SystemClock_Config+0x78>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff faea 	bl	8000d7c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80017a8:	23c0      	movs	r3, #192	; 0xc0
 80017aa:	031b      	lsls	r3, r3, #12
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff feab 	bl	8001508 <LL_RCC_SetUSARTClockSource>
}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	00f42400 	.word	0x00f42400

080017bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char * ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len;i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e013      	b.n	80017f6 <_write+0x3a>
  {
    while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <_write+0x4c>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff ff12 	bl	80015fc <LL_USART_IsActiveFlag_TXE>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d0f9      	beq.n	80017d0 <_write+0x14>
    LL_USART_TransmitData8(USART2,*ptr);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <_write+0x4c>)
 80017e2:	0019      	movs	r1, r3
 80017e4:	0010      	movs	r0, r2
 80017e6:	f7ff ff39 	bl	800165c <LL_USART_TransmitData8>
    ptr++;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
  for (int i=0; i<len;i++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbe7      	blt.n	80017ce <_write+0x12>
  }
return len;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b006      	add	sp, #24
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004400 	.word	0x40004400

0800180c <LL_USART_IsActiveFlag_RXNE>:
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2220      	movs	r2, #32
 800181a:	4013      	ands	r3, r2
 800181c:	2b20      	cmp	r3, #32
 800181e:	d101      	bne.n	8001824 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}

0800182e <LL_USART_ReceiveData8>:
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b2db      	uxtb	r3, r3
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <USART2_IRQHandler+0x28>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff ffc6 	bl	800180c <LL_USART_IsActiveFlag_RXNE>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d007      	beq.n	8001894 <USART2_IRQHandler+0x20>
  {
    g_rxCarUSART2=LL_USART_ReceiveData8(USART2);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <USART2_IRQHandler+0x28>)
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ffd1 	bl	800182e <LL_USART_ReceiveData8>
 800188c:	0003      	movs	r3, r0
 800188e:	001a      	movs	r2, r3
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <USART2_IRQHandler+0x2c>)
 8001892:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40004400 	.word	0x40004400
 80018a0:	20000084 	.word	0x20000084

080018a4 <getchInit>:

/* USER CODE BEGIN 1 */
void getchInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	g_rxCarUSART2=255; //no char received
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <getchInit+0x10>)
 80018aa:	22ff      	movs	r2, #255	; 0xff
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000084 	.word	0x20000084

080018b8 <getch>:

//Return  a char received on UART2
// Wait if none received yet
uint8_t getch(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  volatile uint8_t l_car=1;
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
  do
  {
	if (g_rxCarUSART2==255)
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <getch+0x3c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2bff      	cmp	r3, #255	; 0xff
 80018ca:	d100      	bne.n	80018ce <getch+0x16>
	{
	  __WFI(); //wait for interrupt (for a key ==> data RX)
 80018cc:	bf30      	wfi
	}
  }
  while(g_rxCarUSART2==255); //while no char received
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <getch+0x3c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d0f6      	beq.n	80018c4 <getch+0xc>

  l_car=g_rxCarUSART2; //save received data
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <getch+0x3c>)
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	701a      	strb	r2, [r3, #0]
  g_rxCarUSART2=255; //clear char received
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <getch+0x3c>)
 80018e0:	22ff      	movs	r2, #255	; 0xff
 80018e2:	701a      	strb	r2, [r3, #0]
  return l_car; //return received data
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000084 	.word	0x20000084

080018f8 <kbhit>:
//Return 1 if a char received on UART2
// else 0
int kbhit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
 if(g_rxCarUSART2==255)
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <kbhit+0x18>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2bff      	cmp	r3, #255	; 0xff
 8001902:	d101      	bne.n	8001908 <kbhit+0x10>
   return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <kbhit+0x12>
 else
   return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000084 	.word	0x20000084

08001914 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e00a      	b.n	800193c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001926:	e000      	b.n	800192a <_read+0x16>
 8001928:	bf00      	nop
 800192a:	0001      	movs	r1, r0
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	b2ca      	uxtb	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf0      	blt.n	8001926 <_read+0x12>
	}

return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b006      	add	sp, #24
 800194c:	bd80      	pop	{r7, pc}

0800194e <_close>:
	}
	return len;
}

int _close(int file)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return -1;
 8001956:	2301      	movs	r3, #1
 8001958:	425b      	negs	r3, r3
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0192      	lsls	r2, r2, #6
 8001972:	605a      	str	r2, [r3, #4]
	return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <_sbrk+0x50>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x16>
		heap_end = &end;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <_sbrk+0x50>)
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <_sbrk+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <_sbrk+0x50>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <_sbrk+0x50>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	18d2      	adds	r2, r2, r3
 80019cc:	466b      	mov	r3, sp
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d907      	bls.n	80019e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019d2:	f000 f9d5 	bl	8001d80 <__errno>
 80019d6:	0003      	movs	r3, r0
 80019d8:	220c      	movs	r2, #12
 80019da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80019dc:	2301      	movs	r3, #1
 80019de:	425b      	negs	r3, r3
 80019e0:	e006      	b.n	80019f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <_sbrk+0x50>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	18d2      	adds	r2, r2, r3
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <_sbrk+0x50>)
 80019ec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b004      	add	sp, #16
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000088 	.word	0x20000088
 80019fc:	200000a0 	.word	0x200000a0

08001a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <SystemInit+0x64>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <SystemInit+0x64>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0049      	lsls	r1, r1, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <SystemInit+0x64>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <SystemInit+0x64>)
 8001a18:	4913      	ldr	r1, [pc, #76]	; (8001a68 <SystemInit+0x68>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <SystemInit+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <SystemInit+0x64>)
 8001a24:	4911      	ldr	r1, [pc, #68]	; (8001a6c <SystemInit+0x6c>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <SystemInit+0x64>)
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <SystemInit+0x64>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <SystemInit+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <SystemInit+0x64>)
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <SystemInit+0x70>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <SystemInit+0x64>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <SystemInit+0x64>)
 8001a48:	490a      	ldr	r1, [pc, #40]	; (8001a74 <SystemInit+0x74>)
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SystemInit+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <SystemInit+0x78>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	0512      	lsls	r2, r2, #20
 8001a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40021000 	.word	0x40021000
 8001a68:	88ff400c 	.word	0x88ff400c
 8001a6c:	fef6fff6 	.word	0xfef6fff6
 8001a70:	fffbffff 	.word	0xfffbffff
 8001a74:	ff02ffff 	.word	0xff02ffff
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8e:	d809      	bhi.n	8001aa4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	001a      	movs	r2, r3
 8001a96:	231f      	movs	r3, #31
 8001a98:	401a      	ands	r2, r3
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_EnableIRQ+0x30>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4091      	lsls	r1, r2
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
  }
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac4:	d828      	bhi.n	8001b18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <__NVIC_SetPriority+0xd4>)
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	33c0      	adds	r3, #192	; 0xc0
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	589b      	ldr	r3, [r3, r2]
 8001ad6:	1dfa      	adds	r2, r7, #7
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	0011      	movs	r1, r2
 8001adc:	2203      	movs	r2, #3
 8001ade:	400a      	ands	r2, r1
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	21ff      	movs	r1, #255	; 0xff
 8001ae4:	4091      	lsls	r1, r2
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	43d2      	mvns	r2, r2
 8001aea:	401a      	ands	r2, r3
 8001aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	401a      	ands	r2, r3
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	2303      	movs	r3, #3
 8001afe:	4003      	ands	r3, r0
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b04:	481f      	ldr	r0, [pc, #124]	; (8001b84 <__NVIC_SetPriority+0xd4>)
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	33c0      	adds	r3, #192	; 0xc0
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b16:	e031      	b.n	8001b7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <__NVIC_SetPriority+0xd8>)
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	0019      	movs	r1, r3
 8001b20:	230f      	movs	r3, #15
 8001b22:	400b      	ands	r3, r1
 8001b24:	3b08      	subs	r3, #8
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3306      	adds	r3, #6
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1dfa      	adds	r2, r7, #7
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	0011      	movs	r1, r2
 8001b38:	2203      	movs	r2, #3
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	00d2      	lsls	r2, r2, #3
 8001b3e:	21ff      	movs	r1, #255	; 0xff
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	43d2      	mvns	r2, r2
 8001b46:	401a      	ands	r2, r3
 8001b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	401a      	ands	r2, r3
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0018      	movs	r0, r3
 8001b58:	2303      	movs	r3, #3
 8001b5a:	4003      	ands	r3, r0
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <__NVIC_SetPriority+0xd8>)
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	001c      	movs	r4, r3
 8001b68:	230f      	movs	r3, #15
 8001b6a:	4023      	ands	r3, r4
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	430a      	orrs	r2, r1
 8001b72:	3306      	adds	r3, #6
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	18c3      	adds	r3, r0, r3
 8001b78:	3304      	adds	r3, #4
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b003      	add	sp, #12
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <LL_APB1_GRP1_EnableClock>:
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8001b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_IOP_GRP1_EnableClock>:
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b004      	add	sp, #16
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_USART_Enable>:
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LL_USART_ConfigAsyncMode>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <LL_USART_ConfigAsyncMode+0x2c>)
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	222a      	movs	r2, #42	; 0x2a
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	ffffb7ff 	.word	0xffffb7ff

08001c30 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08f      	sub	sp, #60	; 0x3c
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c36:	241c      	movs	r4, #28
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	231c      	movs	r3, #28
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f000 f8c7 	bl	8001dd4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2318      	movs	r3, #24
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f000 f8c0 	bl	8001dd4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff97 	bl	8001b8c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff ffaa 	bl	8001bb8 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2204      	movs	r2, #4
 8001c68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2203      	movs	r2, #3
 8001c74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2204      	movs	r2, #4
 8001c86:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c88:	1d3a      	adds	r2, r7, #4
 8001c8a:	23a0      	movs	r3, #160	; 0xa0
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	0011      	movs	r1, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7fe fd11 	bl	80006b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2208      	movs	r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001cba:	1d3a      	adds	r2, r7, #4
 8001cbc:	23a0      	movs	r3, #160	; 0xa0
 8001cbe:	05db      	lsls	r3, r3, #23
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fcf8 	bl	80006b8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	201c      	movs	r0, #28
 8001ccc:	f7ff fef0 	bl	8001ab0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001cd0:	201c      	movs	r0, #28
 8001cd2:	f7ff fed3 	bl	8001a7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001cd6:	193b      	adds	r3, r7, r4
 8001cd8:	22e1      	movs	r2, #225	; 0xe1
 8001cda:	0252      	lsls	r2, r2, #9
 8001cdc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001cde:	0021      	movs	r1, r4
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0xf8>)
 8001d08:	0019      	movs	r1, r3
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	f7fe ffa8 	bl	8000c60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0xf8>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff ff74 	bl	8001c00 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <MX_USART2_UART_Init+0xf8>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff ff62 	bl	8001be4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b00f      	add	sp, #60	; 0x3c
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	40004400 	.word	0x40004400

08001d2c <Reset_Handler>:
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopForever+0x2>)
 8001d2e:	4685      	mov	sp, r0
 8001d30:	2100      	movs	r1, #0
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopForever+0x6>)
 8001d36:	585b      	ldr	r3, [r3, r1]
 8001d38:	5043      	str	r3, [r0, r1]
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <LoopForever+0xa>)
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopForever+0xe>)
 8001d40:	1842      	adds	r2, r0, r1
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopForever+0x12>)
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	3204      	adds	r2, #4

08001d50 <LoopFillZerobss>:
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LoopForever+0x16>)
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>
 8001d56:	f7ff fe53 	bl	8001a00 <SystemInit>
 8001d5a:	f000 f817 	bl	8001d8c <__libc_init_array>
 8001d5e:	f7ff fc8d 	bl	800167c <main>

08001d62 <LoopForever>:
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
 8001d64:	20001fff 	.word	0x20001fff
 8001d68:	08002f8c 	.word	0x08002f8c
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000068 	.word	0x20000068
 8001d74:	20000068 	.word	0x20000068
 8001d78:	2000009c 	.word	0x2000009c

08001d7c <ADC1_COMP_IRQHandler>:
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_COMP_IRQHandler>
	...

08001d80 <__errno>:
 8001d80:	4b01      	ldr	r3, [pc, #4]	; (8001d88 <__errno+0x8>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	4770      	bx	lr
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	20000004 	.word	0x20000004

08001d8c <__libc_init_array>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	2600      	movs	r6, #0
 8001d90:	4d0c      	ldr	r5, [pc, #48]	; (8001dc4 <__libc_init_array+0x38>)
 8001d92:	4c0d      	ldr	r4, [pc, #52]	; (8001dc8 <__libc_init_array+0x3c>)
 8001d94:	1b64      	subs	r4, r4, r5
 8001d96:	10a4      	asrs	r4, r4, #2
 8001d98:	42a6      	cmp	r6, r4
 8001d9a:	d109      	bne.n	8001db0 <__libc_init_array+0x24>
 8001d9c:	2600      	movs	r6, #0
 8001d9e:	f001 f875 	bl	8002e8c <_init>
 8001da2:	4d0a      	ldr	r5, [pc, #40]	; (8001dcc <__libc_init_array+0x40>)
 8001da4:	4c0a      	ldr	r4, [pc, #40]	; (8001dd0 <__libc_init_array+0x44>)
 8001da6:	1b64      	subs	r4, r4, r5
 8001da8:	10a4      	asrs	r4, r4, #2
 8001daa:	42a6      	cmp	r6, r4
 8001dac:	d105      	bne.n	8001dba <__libc_init_array+0x2e>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	00b3      	lsls	r3, r6, #2
 8001db2:	58eb      	ldr	r3, [r5, r3]
 8001db4:	4798      	blx	r3
 8001db6:	3601      	adds	r6, #1
 8001db8:	e7ee      	b.n	8001d98 <__libc_init_array+0xc>
 8001dba:	00b3      	lsls	r3, r6, #2
 8001dbc:	58eb      	ldr	r3, [r5, r3]
 8001dbe:	4798      	blx	r3
 8001dc0:	3601      	adds	r6, #1
 8001dc2:	e7f2      	b.n	8001daa <__libc_init_array+0x1e>
 8001dc4:	08002f84 	.word	0x08002f84
 8001dc8:	08002f84 	.word	0x08002f84
 8001dcc:	08002f84 	.word	0x08002f84
 8001dd0:	08002f88 	.word	0x08002f88

08001dd4 <memset>:
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	1882      	adds	r2, r0, r2
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d100      	bne.n	8001dde <memset+0xa>
 8001ddc:	4770      	bx	lr
 8001dde:	7019      	strb	r1, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	e7f9      	b.n	8001dd8 <memset+0x4>

08001de4 <iprintf>:
 8001de4:	b40f      	push	{r0, r1, r2, r3}
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <iprintf+0x30>)
 8001de8:	b513      	push	{r0, r1, r4, lr}
 8001dea:	681c      	ldr	r4, [r3, #0]
 8001dec:	2c00      	cmp	r4, #0
 8001dee:	d005      	beq.n	8001dfc <iprintf+0x18>
 8001df0:	69a3      	ldr	r3, [r4, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <iprintf+0x18>
 8001df6:	0020      	movs	r0, r4
 8001df8:	f000 fa86 	bl	8002308 <__sinit>
 8001dfc:	ab05      	add	r3, sp, #20
 8001dfe:	0020      	movs	r0, r4
 8001e00:	9a04      	ldr	r2, [sp, #16]
 8001e02:	68a1      	ldr	r1, [r4, #8]
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	f000 fc99 	bl	800273c <_vfiprintf_r>
 8001e0a:	bc16      	pop	{r1, r2, r4}
 8001e0c:	bc08      	pop	{r3}
 8001e0e:	b004      	add	sp, #16
 8001e10:	4718      	bx	r3
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20000004 	.word	0x20000004

08001e18 <_puts_r>:
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	0005      	movs	r5, r0
 8001e1c:	000e      	movs	r6, r1
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d004      	beq.n	8001e2c <_puts_r+0x14>
 8001e22:	6983      	ldr	r3, [r0, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <_puts_r+0x14>
 8001e28:	f000 fa6e 	bl	8002308 <__sinit>
 8001e2c:	69ab      	ldr	r3, [r5, #24]
 8001e2e:	68ac      	ldr	r4, [r5, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_puts_r+0x22>
 8001e34:	0028      	movs	r0, r5
 8001e36:	f000 fa67 	bl	8002308 <__sinit>
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <_puts_r+0xd8>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	d122      	bne.n	8001e86 <_puts_r+0x6e>
 8001e40:	686c      	ldr	r4, [r5, #4]
 8001e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e44:	07db      	lsls	r3, r3, #31
 8001e46:	d405      	bmi.n	8001e54 <_puts_r+0x3c>
 8001e48:	89a3      	ldrh	r3, [r4, #12]
 8001e4a:	059b      	lsls	r3, r3, #22
 8001e4c:	d402      	bmi.n	8001e54 <_puts_r+0x3c>
 8001e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e50:	f000 fafb 	bl	800244a <__retarget_lock_acquire_recursive>
 8001e54:	89a3      	ldrh	r3, [r4, #12]
 8001e56:	071b      	lsls	r3, r3, #28
 8001e58:	d502      	bpl.n	8001e60 <_puts_r+0x48>
 8001e5a:	6923      	ldr	r3, [r4, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d129      	bne.n	8001eb4 <_puts_r+0x9c>
 8001e60:	0021      	movs	r1, r4
 8001e62:	0028      	movs	r0, r5
 8001e64:	f000 f8aa 	bl	8001fbc <__swsetup_r>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d023      	beq.n	8001eb4 <_puts_r+0x9c>
 8001e6c:	2501      	movs	r5, #1
 8001e6e:	426d      	negs	r5, r5
 8001e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e72:	07db      	lsls	r3, r3, #31
 8001e74:	d405      	bmi.n	8001e82 <_puts_r+0x6a>
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	059b      	lsls	r3, r3, #22
 8001e7a:	d402      	bmi.n	8001e82 <_puts_r+0x6a>
 8001e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e7e:	f000 fae5 	bl	800244c <__retarget_lock_release_recursive>
 8001e82:	0028      	movs	r0, r5
 8001e84:	bd70      	pop	{r4, r5, r6, pc}
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <_puts_r+0xdc>)
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	d101      	bne.n	8001e90 <_puts_r+0x78>
 8001e8c:	68ac      	ldr	r4, [r5, #8]
 8001e8e:	e7d8      	b.n	8001e42 <_puts_r+0x2a>
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <_puts_r+0xe0>)
 8001e92:	429c      	cmp	r4, r3
 8001e94:	d1d5      	bne.n	8001e42 <_puts_r+0x2a>
 8001e96:	68ec      	ldr	r4, [r5, #12]
 8001e98:	e7d3      	b.n	8001e42 <_puts_r+0x2a>
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	60a3      	str	r3, [r4, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da04      	bge.n	8001eac <_puts_r+0x94>
 8001ea2:	69a2      	ldr	r2, [r4, #24]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dc16      	bgt.n	8001ed6 <_puts_r+0xbe>
 8001ea8:	290a      	cmp	r1, #10
 8001eaa:	d014      	beq.n	8001ed6 <_puts_r+0xbe>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	6022      	str	r2, [r4, #0]
 8001eb2:	7019      	strb	r1, [r3, #0]
 8001eb4:	68a3      	ldr	r3, [r4, #8]
 8001eb6:	7831      	ldrb	r1, [r6, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	2900      	cmp	r1, #0
 8001ebc:	d1ed      	bne.n	8001e9a <_puts_r+0x82>
 8001ebe:	60a3      	str	r3, [r4, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da0f      	bge.n	8001ee4 <_puts_r+0xcc>
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	0022      	movs	r2, r4
 8001ec8:	310a      	adds	r1, #10
 8001eca:	f000 f821 	bl	8001f10 <__swbuf_r>
 8001ece:	250a      	movs	r5, #10
 8001ed0:	1c43      	adds	r3, r0, #1
 8001ed2:	d1cd      	bne.n	8001e70 <_puts_r+0x58>
 8001ed4:	e7ca      	b.n	8001e6c <_puts_r+0x54>
 8001ed6:	0022      	movs	r2, r4
 8001ed8:	0028      	movs	r0, r5
 8001eda:	f000 f819 	bl	8001f10 <__swbuf_r>
 8001ede:	1c43      	adds	r3, r0, #1
 8001ee0:	d1e8      	bne.n	8001eb4 <_puts_r+0x9c>
 8001ee2:	e7c3      	b.n	8001e6c <_puts_r+0x54>
 8001ee4:	250a      	movs	r5, #10
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	6022      	str	r2, [r4, #0]
 8001eec:	701d      	strb	r5, [r3, #0]
 8001eee:	e7bf      	b.n	8001e70 <_puts_r+0x58>
 8001ef0:	08002f10 	.word	0x08002f10
 8001ef4:	08002f30 	.word	0x08002f30
 8001ef8:	08002ef0 	.word	0x08002ef0

08001efc <puts>:
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <puts+0x10>)
 8001f00:	0001      	movs	r1, r0
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f7ff ff88 	bl	8001e18 <_puts_r>
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000004 	.word	0x20000004

08001f10 <__swbuf_r>:
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	0005      	movs	r5, r0
 8001f14:	000e      	movs	r6, r1
 8001f16:	0014      	movs	r4, r2
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d004      	beq.n	8001f26 <__swbuf_r+0x16>
 8001f1c:	6983      	ldr	r3, [r0, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <__swbuf_r+0x16>
 8001f22:	f000 f9f1 	bl	8002308 <__sinit>
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <__swbuf_r+0xa0>)
 8001f28:	429c      	cmp	r4, r3
 8001f2a:	d12e      	bne.n	8001f8a <__swbuf_r+0x7a>
 8001f2c:	686c      	ldr	r4, [r5, #4]
 8001f2e:	69a3      	ldr	r3, [r4, #24]
 8001f30:	60a3      	str	r3, [r4, #8]
 8001f32:	89a3      	ldrh	r3, [r4, #12]
 8001f34:	071b      	lsls	r3, r3, #28
 8001f36:	d532      	bpl.n	8001f9e <__swbuf_r+0x8e>
 8001f38:	6923      	ldr	r3, [r4, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02f      	beq.n	8001f9e <__swbuf_r+0x8e>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	6922      	ldr	r2, [r4, #16]
 8001f42:	b2f7      	uxtb	r7, r6
 8001f44:	1a98      	subs	r0, r3, r2
 8001f46:	6963      	ldr	r3, [r4, #20]
 8001f48:	b2f6      	uxtb	r6, r6
 8001f4a:	4283      	cmp	r3, r0
 8001f4c:	dc05      	bgt.n	8001f5a <__swbuf_r+0x4a>
 8001f4e:	0021      	movs	r1, r4
 8001f50:	0028      	movs	r0, r5
 8001f52:	f000 f937 	bl	80021c4 <_fflush_r>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d127      	bne.n	8001faa <__swbuf_r+0x9a>
 8001f5a:	68a3      	ldr	r3, [r4, #8]
 8001f5c:	3001      	adds	r0, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60a3      	str	r3, [r4, #8]
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	6022      	str	r2, [r4, #0]
 8001f68:	701f      	strb	r7, [r3, #0]
 8001f6a:	6963      	ldr	r3, [r4, #20]
 8001f6c:	4283      	cmp	r3, r0
 8001f6e:	d004      	beq.n	8001f7a <__swbuf_r+0x6a>
 8001f70:	89a3      	ldrh	r3, [r4, #12]
 8001f72:	07db      	lsls	r3, r3, #31
 8001f74:	d507      	bpl.n	8001f86 <__swbuf_r+0x76>
 8001f76:	2e0a      	cmp	r6, #10
 8001f78:	d105      	bne.n	8001f86 <__swbuf_r+0x76>
 8001f7a:	0021      	movs	r1, r4
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f000 f921 	bl	80021c4 <_fflush_r>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d111      	bne.n	8001faa <__swbuf_r+0x9a>
 8001f86:	0030      	movs	r0, r6
 8001f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <__swbuf_r+0xa4>)
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	d101      	bne.n	8001f94 <__swbuf_r+0x84>
 8001f90:	68ac      	ldr	r4, [r5, #8]
 8001f92:	e7cc      	b.n	8001f2e <__swbuf_r+0x1e>
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <__swbuf_r+0xa8>)
 8001f96:	429c      	cmp	r4, r3
 8001f98:	d1c9      	bne.n	8001f2e <__swbuf_r+0x1e>
 8001f9a:	68ec      	ldr	r4, [r5, #12]
 8001f9c:	e7c7      	b.n	8001f2e <__swbuf_r+0x1e>
 8001f9e:	0021      	movs	r1, r4
 8001fa0:	0028      	movs	r0, r5
 8001fa2:	f000 f80b 	bl	8001fbc <__swsetup_r>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d0c9      	beq.n	8001f3e <__swbuf_r+0x2e>
 8001faa:	2601      	movs	r6, #1
 8001fac:	4276      	negs	r6, r6
 8001fae:	e7ea      	b.n	8001f86 <__swbuf_r+0x76>
 8001fb0:	08002f10 	.word	0x08002f10
 8001fb4:	08002f30 	.word	0x08002f30
 8001fb8:	08002ef0 	.word	0x08002ef0

08001fbc <__swsetup_r>:
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <__swsetup_r+0xe0>)
 8001fbe:	b570      	push	{r4, r5, r6, lr}
 8001fc0:	681d      	ldr	r5, [r3, #0]
 8001fc2:	0006      	movs	r6, r0
 8001fc4:	000c      	movs	r4, r1
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d005      	beq.n	8001fd6 <__swsetup_r+0x1a>
 8001fca:	69ab      	ldr	r3, [r5, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <__swsetup_r+0x1a>
 8001fd0:	0028      	movs	r0, r5
 8001fd2:	f000 f999 	bl	8002308 <__sinit>
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <__swsetup_r+0xe4>)
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d10f      	bne.n	8001ffc <__swsetup_r+0x40>
 8001fdc:	686c      	ldr	r4, [r5, #4]
 8001fde:	230c      	movs	r3, #12
 8001fe0:	5ee2      	ldrsh	r2, [r4, r3]
 8001fe2:	b293      	uxth	r3, r2
 8001fe4:	0711      	lsls	r1, r2, #28
 8001fe6:	d42d      	bmi.n	8002044 <__swsetup_r+0x88>
 8001fe8:	06d9      	lsls	r1, r3, #27
 8001fea:	d411      	bmi.n	8002010 <__swsetup_r+0x54>
 8001fec:	2309      	movs	r3, #9
 8001fee:	2001      	movs	r0, #1
 8001ff0:	6033      	str	r3, [r6, #0]
 8001ff2:	3337      	adds	r3, #55	; 0x37
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	81a3      	strh	r3, [r4, #12]
 8001ff8:	4240      	negs	r0, r0
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <__swsetup_r+0xe8>)
 8001ffe:	429c      	cmp	r4, r3
 8002000:	d101      	bne.n	8002006 <__swsetup_r+0x4a>
 8002002:	68ac      	ldr	r4, [r5, #8]
 8002004:	e7eb      	b.n	8001fde <__swsetup_r+0x22>
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <__swsetup_r+0xec>)
 8002008:	429c      	cmp	r4, r3
 800200a:	d1e8      	bne.n	8001fde <__swsetup_r+0x22>
 800200c:	68ec      	ldr	r4, [r5, #12]
 800200e:	e7e6      	b.n	8001fde <__swsetup_r+0x22>
 8002010:	075b      	lsls	r3, r3, #29
 8002012:	d513      	bpl.n	800203c <__swsetup_r+0x80>
 8002014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002016:	2900      	cmp	r1, #0
 8002018:	d008      	beq.n	800202c <__swsetup_r+0x70>
 800201a:	0023      	movs	r3, r4
 800201c:	3344      	adds	r3, #68	; 0x44
 800201e:	4299      	cmp	r1, r3
 8002020:	d002      	beq.n	8002028 <__swsetup_r+0x6c>
 8002022:	0030      	movs	r0, r6
 8002024:	f000 fa80 	bl	8002528 <_free_r>
 8002028:	2300      	movs	r3, #0
 800202a:	6363      	str	r3, [r4, #52]	; 0x34
 800202c:	2224      	movs	r2, #36	; 0x24
 800202e:	89a3      	ldrh	r3, [r4, #12]
 8002030:	4393      	bics	r3, r2
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	2300      	movs	r3, #0
 8002036:	6063      	str	r3, [r4, #4]
 8002038:	6923      	ldr	r3, [r4, #16]
 800203a:	6023      	str	r3, [r4, #0]
 800203c:	2308      	movs	r3, #8
 800203e:	89a2      	ldrh	r2, [r4, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	81a3      	strh	r3, [r4, #12]
 8002044:	6923      	ldr	r3, [r4, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <__swsetup_r+0xa6>
 800204a:	21a0      	movs	r1, #160	; 0xa0
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	89a3      	ldrh	r3, [r4, #12]
 8002050:	0089      	lsls	r1, r1, #2
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	400b      	ands	r3, r1
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <__swsetup_r+0xa6>
 800205a:	0021      	movs	r1, r4
 800205c:	0030      	movs	r0, r6
 800205e:	f000 fa1f 	bl	80024a0 <__smakebuf_r>
 8002062:	220c      	movs	r2, #12
 8002064:	5ea3      	ldrsh	r3, [r4, r2]
 8002066:	2001      	movs	r0, #1
 8002068:	001a      	movs	r2, r3
 800206a:	b299      	uxth	r1, r3
 800206c:	4002      	ands	r2, r0
 800206e:	4203      	tst	r3, r0
 8002070:	d00f      	beq.n	8002092 <__swsetup_r+0xd6>
 8002072:	2200      	movs	r2, #0
 8002074:	60a2      	str	r2, [r4, #8]
 8002076:	6962      	ldr	r2, [r4, #20]
 8002078:	4252      	negs	r2, r2
 800207a:	61a2      	str	r2, [r4, #24]
 800207c:	2000      	movs	r0, #0
 800207e:	6922      	ldr	r2, [r4, #16]
 8002080:	4282      	cmp	r2, r0
 8002082:	d1ba      	bne.n	8001ffa <__swsetup_r+0x3e>
 8002084:	060a      	lsls	r2, r1, #24
 8002086:	d5b8      	bpl.n	8001ffa <__swsetup_r+0x3e>
 8002088:	2240      	movs	r2, #64	; 0x40
 800208a:	4313      	orrs	r3, r2
 800208c:	81a3      	strh	r3, [r4, #12]
 800208e:	3801      	subs	r0, #1
 8002090:	e7b3      	b.n	8001ffa <__swsetup_r+0x3e>
 8002092:	0788      	lsls	r0, r1, #30
 8002094:	d400      	bmi.n	8002098 <__swsetup_r+0xdc>
 8002096:	6962      	ldr	r2, [r4, #20]
 8002098:	60a2      	str	r2, [r4, #8]
 800209a:	e7ef      	b.n	800207c <__swsetup_r+0xc0>
 800209c:	20000004 	.word	0x20000004
 80020a0:	08002f10 	.word	0x08002f10
 80020a4:	08002f30 	.word	0x08002f30
 80020a8:	08002ef0 	.word	0x08002ef0

080020ac <__sflush_r>:
 80020ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ae:	898b      	ldrh	r3, [r1, #12]
 80020b0:	0005      	movs	r5, r0
 80020b2:	000c      	movs	r4, r1
 80020b4:	071a      	lsls	r2, r3, #28
 80020b6:	d45f      	bmi.n	8002178 <__sflush_r+0xcc>
 80020b8:	684a      	ldr	r2, [r1, #4]
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	dc04      	bgt.n	80020c8 <__sflush_r+0x1c>
 80020be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	dc01      	bgt.n	80020c8 <__sflush_r+0x1c>
 80020c4:	2000      	movs	r0, #0
 80020c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80020ca:	2f00      	cmp	r7, #0
 80020cc:	d0fa      	beq.n	80020c4 <__sflush_r+0x18>
 80020ce:	2200      	movs	r2, #0
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	682e      	ldr	r6, [r5, #0]
 80020d4:	602a      	str	r2, [r5, #0]
 80020d6:	001a      	movs	r2, r3
 80020d8:	0149      	lsls	r1, r1, #5
 80020da:	400a      	ands	r2, r1
 80020dc:	420b      	tst	r3, r1
 80020de:	d034      	beq.n	800214a <__sflush_r+0x9e>
 80020e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	075b      	lsls	r3, r3, #29
 80020e6:	d506      	bpl.n	80020f6 <__sflush_r+0x4a>
 80020e8:	6863      	ldr	r3, [r4, #4]
 80020ea:	1ac0      	subs	r0, r0, r3
 80020ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <__sflush_r+0x4a>
 80020f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	0002      	movs	r2, r0
 80020f8:	6a21      	ldr	r1, [r4, #32]
 80020fa:	2300      	movs	r3, #0
 80020fc:	0028      	movs	r0, r5
 80020fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002100:	47b8      	blx	r7
 8002102:	89a1      	ldrh	r1, [r4, #12]
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d106      	bne.n	8002116 <__sflush_r+0x6a>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	2b1d      	cmp	r3, #29
 800210c:	d831      	bhi.n	8002172 <__sflush_r+0xc6>
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <__sflush_r+0x114>)
 8002110:	40da      	lsrs	r2, r3
 8002112:	07d3      	lsls	r3, r2, #31
 8002114:	d52d      	bpl.n	8002172 <__sflush_r+0xc6>
 8002116:	2300      	movs	r3, #0
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6923      	ldr	r3, [r4, #16]
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	04cb      	lsls	r3, r1, #19
 8002120:	d505      	bpl.n	800212e <__sflush_r+0x82>
 8002122:	1c43      	adds	r3, r0, #1
 8002124:	d102      	bne.n	800212c <__sflush_r+0x80>
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <__sflush_r+0x82>
 800212c:	6560      	str	r0, [r4, #84]	; 0x54
 800212e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002130:	602e      	str	r6, [r5, #0]
 8002132:	2900      	cmp	r1, #0
 8002134:	d0c6      	beq.n	80020c4 <__sflush_r+0x18>
 8002136:	0023      	movs	r3, r4
 8002138:	3344      	adds	r3, #68	; 0x44
 800213a:	4299      	cmp	r1, r3
 800213c:	d002      	beq.n	8002144 <__sflush_r+0x98>
 800213e:	0028      	movs	r0, r5
 8002140:	f000 f9f2 	bl	8002528 <_free_r>
 8002144:	2000      	movs	r0, #0
 8002146:	6360      	str	r0, [r4, #52]	; 0x34
 8002148:	e7bd      	b.n	80020c6 <__sflush_r+0x1a>
 800214a:	2301      	movs	r3, #1
 800214c:	0028      	movs	r0, r5
 800214e:	6a21      	ldr	r1, [r4, #32]
 8002150:	47b8      	blx	r7
 8002152:	1c43      	adds	r3, r0, #1
 8002154:	d1c5      	bne.n	80020e2 <__sflush_r+0x36>
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0c2      	beq.n	80020e2 <__sflush_r+0x36>
 800215c:	2b1d      	cmp	r3, #29
 800215e:	d001      	beq.n	8002164 <__sflush_r+0xb8>
 8002160:	2b16      	cmp	r3, #22
 8002162:	d101      	bne.n	8002168 <__sflush_r+0xbc>
 8002164:	602e      	str	r6, [r5, #0]
 8002166:	e7ad      	b.n	80020c4 <__sflush_r+0x18>
 8002168:	2340      	movs	r3, #64	; 0x40
 800216a:	89a2      	ldrh	r2, [r4, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	81a3      	strh	r3, [r4, #12]
 8002170:	e7a9      	b.n	80020c6 <__sflush_r+0x1a>
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	430b      	orrs	r3, r1
 8002176:	e7fa      	b.n	800216e <__sflush_r+0xc2>
 8002178:	690f      	ldr	r7, [r1, #16]
 800217a:	2f00      	cmp	r7, #0
 800217c:	d0a2      	beq.n	80020c4 <__sflush_r+0x18>
 800217e:	680a      	ldr	r2, [r1, #0]
 8002180:	600f      	str	r7, [r1, #0]
 8002182:	1bd2      	subs	r2, r2, r7
 8002184:	9201      	str	r2, [sp, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	079b      	lsls	r3, r3, #30
 800218a:	d100      	bne.n	800218e <__sflush_r+0xe2>
 800218c:	694a      	ldr	r2, [r1, #20]
 800218e:	60a2      	str	r2, [r4, #8]
 8002190:	9b01      	ldr	r3, [sp, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dc00      	bgt.n	8002198 <__sflush_r+0xec>
 8002196:	e795      	b.n	80020c4 <__sflush_r+0x18>
 8002198:	003a      	movs	r2, r7
 800219a:	0028      	movs	r0, r5
 800219c:	9b01      	ldr	r3, [sp, #4]
 800219e:	6a21      	ldr	r1, [r4, #32]
 80021a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021a2:	47b0      	blx	r6
 80021a4:	2800      	cmp	r0, #0
 80021a6:	dc06      	bgt.n	80021b6 <__sflush_r+0x10a>
 80021a8:	2340      	movs	r3, #64	; 0x40
 80021aa:	2001      	movs	r0, #1
 80021ac:	89a2      	ldrh	r2, [r4, #12]
 80021ae:	4240      	negs	r0, r0
 80021b0:	4313      	orrs	r3, r2
 80021b2:	81a3      	strh	r3, [r4, #12]
 80021b4:	e787      	b.n	80020c6 <__sflush_r+0x1a>
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	183f      	adds	r7, r7, r0
 80021ba:	1a1b      	subs	r3, r3, r0
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	e7e7      	b.n	8002190 <__sflush_r+0xe4>
 80021c0:	20400001 	.word	0x20400001

080021c4 <_fflush_r>:
 80021c4:	690b      	ldr	r3, [r1, #16]
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	0005      	movs	r5, r0
 80021ca:	000c      	movs	r4, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_fflush_r+0x12>
 80021d0:	2500      	movs	r5, #0
 80021d2:	0028      	movs	r0, r5
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d004      	beq.n	80021e4 <_fflush_r+0x20>
 80021da:	6983      	ldr	r3, [r0, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <_fflush_r+0x20>
 80021e0:	f000 f892 	bl	8002308 <__sinit>
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <_fflush_r+0x74>)
 80021e6:	429c      	cmp	r4, r3
 80021e8:	d11b      	bne.n	8002222 <_fflush_r+0x5e>
 80021ea:	686c      	ldr	r4, [r5, #4]
 80021ec:	220c      	movs	r2, #12
 80021ee:	5ea3      	ldrsh	r3, [r4, r2]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ed      	beq.n	80021d0 <_fflush_r+0xc>
 80021f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021f6:	07d2      	lsls	r2, r2, #31
 80021f8:	d404      	bmi.n	8002204 <_fflush_r+0x40>
 80021fa:	059b      	lsls	r3, r3, #22
 80021fc:	d402      	bmi.n	8002204 <_fflush_r+0x40>
 80021fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002200:	f000 f923 	bl	800244a <__retarget_lock_acquire_recursive>
 8002204:	0028      	movs	r0, r5
 8002206:	0021      	movs	r1, r4
 8002208:	f7ff ff50 	bl	80020ac <__sflush_r>
 800220c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800220e:	0005      	movs	r5, r0
 8002210:	07db      	lsls	r3, r3, #31
 8002212:	d4de      	bmi.n	80021d2 <_fflush_r+0xe>
 8002214:	89a3      	ldrh	r3, [r4, #12]
 8002216:	059b      	lsls	r3, r3, #22
 8002218:	d4db      	bmi.n	80021d2 <_fflush_r+0xe>
 800221a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800221c:	f000 f916 	bl	800244c <__retarget_lock_release_recursive>
 8002220:	e7d7      	b.n	80021d2 <_fflush_r+0xe>
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <_fflush_r+0x78>)
 8002224:	429c      	cmp	r4, r3
 8002226:	d101      	bne.n	800222c <_fflush_r+0x68>
 8002228:	68ac      	ldr	r4, [r5, #8]
 800222a:	e7df      	b.n	80021ec <_fflush_r+0x28>
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <_fflush_r+0x7c>)
 800222e:	429c      	cmp	r4, r3
 8002230:	d1dc      	bne.n	80021ec <_fflush_r+0x28>
 8002232:	68ec      	ldr	r4, [r5, #12]
 8002234:	e7da      	b.n	80021ec <_fflush_r+0x28>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	08002f10 	.word	0x08002f10
 800223c:	08002f30 	.word	0x08002f30
 8002240:	08002ef0 	.word	0x08002ef0

08002244 <std>:
 8002244:	2300      	movs	r3, #0
 8002246:	b510      	push	{r4, lr}
 8002248:	0004      	movs	r4, r0
 800224a:	6003      	str	r3, [r0, #0]
 800224c:	6043      	str	r3, [r0, #4]
 800224e:	6083      	str	r3, [r0, #8]
 8002250:	8181      	strh	r1, [r0, #12]
 8002252:	6643      	str	r3, [r0, #100]	; 0x64
 8002254:	0019      	movs	r1, r3
 8002256:	81c2      	strh	r2, [r0, #14]
 8002258:	6103      	str	r3, [r0, #16]
 800225a:	6143      	str	r3, [r0, #20]
 800225c:	6183      	str	r3, [r0, #24]
 800225e:	2208      	movs	r2, #8
 8002260:	305c      	adds	r0, #92	; 0x5c
 8002262:	f7ff fdb7 	bl	8001dd4 <memset>
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <std+0x38>)
 8002268:	6224      	str	r4, [r4, #32]
 800226a:	6263      	str	r3, [r4, #36]	; 0x24
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <std+0x3c>)
 800226e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <std+0x40>)
 8002272:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <std+0x44>)
 8002276:	6323      	str	r3, [r4, #48]	; 0x30
 8002278:	bd10      	pop	{r4, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	08002cd9 	.word	0x08002cd9
 8002280:	08002d01 	.word	0x08002d01
 8002284:	08002d39 	.word	0x08002d39
 8002288:	08002d65 	.word	0x08002d65

0800228c <_cleanup_r>:
 800228c:	b510      	push	{r4, lr}
 800228e:	4902      	ldr	r1, [pc, #8]	; (8002298 <_cleanup_r+0xc>)
 8002290:	f000 f8ba 	bl	8002408 <_fwalk_reent>
 8002294:	bd10      	pop	{r4, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	080021c5 	.word	0x080021c5

0800229c <__sfmoreglue>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	2568      	movs	r5, #104	; 0x68
 80022a0:	1e4a      	subs	r2, r1, #1
 80022a2:	4355      	muls	r5, r2
 80022a4:	000e      	movs	r6, r1
 80022a6:	0029      	movs	r1, r5
 80022a8:	3174      	adds	r1, #116	; 0x74
 80022aa:	f000 f9a9 	bl	8002600 <_malloc_r>
 80022ae:	1e04      	subs	r4, r0, #0
 80022b0:	d008      	beq.n	80022c4 <__sfmoreglue+0x28>
 80022b2:	2100      	movs	r1, #0
 80022b4:	002a      	movs	r2, r5
 80022b6:	6001      	str	r1, [r0, #0]
 80022b8:	6046      	str	r6, [r0, #4]
 80022ba:	300c      	adds	r0, #12
 80022bc:	60a0      	str	r0, [r4, #8]
 80022be:	3268      	adds	r2, #104	; 0x68
 80022c0:	f7ff fd88 	bl	8001dd4 <memset>
 80022c4:	0020      	movs	r0, r4
 80022c6:	bd70      	pop	{r4, r5, r6, pc}

080022c8 <__sfp_lock_acquire>:
 80022c8:	b510      	push	{r4, lr}
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <__sfp_lock_acquire+0xc>)
 80022cc:	f000 f8bd 	bl	800244a <__retarget_lock_acquire_recursive>
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	2000008d 	.word	0x2000008d

080022d8 <__sfp_lock_release>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	4802      	ldr	r0, [pc, #8]	; (80022e4 <__sfp_lock_release+0xc>)
 80022dc:	f000 f8b6 	bl	800244c <__retarget_lock_release_recursive>
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	2000008d 	.word	0x2000008d

080022e8 <__sinit_lock_acquire>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4802      	ldr	r0, [pc, #8]	; (80022f4 <__sinit_lock_acquire+0xc>)
 80022ec:	f000 f8ad 	bl	800244a <__retarget_lock_acquire_recursive>
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	2000008e 	.word	0x2000008e

080022f8 <__sinit_lock_release>:
 80022f8:	b510      	push	{r4, lr}
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <__sinit_lock_release+0xc>)
 80022fc:	f000 f8a6 	bl	800244c <__retarget_lock_release_recursive>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	2000008e 	.word	0x2000008e

08002308 <__sinit>:
 8002308:	b513      	push	{r0, r1, r4, lr}
 800230a:	0004      	movs	r4, r0
 800230c:	f7ff ffec 	bl	80022e8 <__sinit_lock_acquire>
 8002310:	69a3      	ldr	r3, [r4, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <__sinit+0x14>
 8002316:	f7ff ffef 	bl	80022f8 <__sinit_lock_release>
 800231a:	bd13      	pop	{r0, r1, r4, pc}
 800231c:	64a3      	str	r3, [r4, #72]	; 0x48
 800231e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002320:	6523      	str	r3, [r4, #80]	; 0x50
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <__sinit+0x68>)
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <__sinit+0x6c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	62a2      	str	r2, [r4, #40]	; 0x28
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	42a3      	cmp	r3, r4
 800232e:	d101      	bne.n	8002334 <__sinit+0x2c>
 8002330:	2301      	movs	r3, #1
 8002332:	61a3      	str	r3, [r4, #24]
 8002334:	0020      	movs	r0, r4
 8002336:	f000 f81f 	bl	8002378 <__sfp>
 800233a:	6060      	str	r0, [r4, #4]
 800233c:	0020      	movs	r0, r4
 800233e:	f000 f81b 	bl	8002378 <__sfp>
 8002342:	60a0      	str	r0, [r4, #8]
 8002344:	0020      	movs	r0, r4
 8002346:	f000 f817 	bl	8002378 <__sfp>
 800234a:	2200      	movs	r2, #0
 800234c:	2104      	movs	r1, #4
 800234e:	60e0      	str	r0, [r4, #12]
 8002350:	6860      	ldr	r0, [r4, #4]
 8002352:	f7ff ff77 	bl	8002244 <std>
 8002356:	2201      	movs	r2, #1
 8002358:	2109      	movs	r1, #9
 800235a:	68a0      	ldr	r0, [r4, #8]
 800235c:	f7ff ff72 	bl	8002244 <std>
 8002360:	2202      	movs	r2, #2
 8002362:	2112      	movs	r1, #18
 8002364:	68e0      	ldr	r0, [r4, #12]
 8002366:	f7ff ff6d 	bl	8002244 <std>
 800236a:	2301      	movs	r3, #1
 800236c:	61a3      	str	r3, [r4, #24]
 800236e:	e7d2      	b.n	8002316 <__sinit+0xe>
 8002370:	08002eec 	.word	0x08002eec
 8002374:	0800228d 	.word	0x0800228d

08002378 <__sfp>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	0007      	movs	r7, r0
 800237c:	f7ff ffa4 	bl	80022c8 <__sfp_lock_acquire>
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <__sfp+0x88>)
 8002382:	681e      	ldr	r6, [r3, #0]
 8002384:	69b3      	ldr	r3, [r6, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <__sfp+0x18>
 800238a:	0030      	movs	r0, r6
 800238c:	f7ff ffbc 	bl	8002308 <__sinit>
 8002390:	3648      	adds	r6, #72	; 0x48
 8002392:	68b4      	ldr	r4, [r6, #8]
 8002394:	6873      	ldr	r3, [r6, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	d504      	bpl.n	80023a4 <__sfp+0x2c>
 800239a:	6833      	ldr	r3, [r6, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d022      	beq.n	80023e6 <__sfp+0x6e>
 80023a0:	6836      	ldr	r6, [r6, #0]
 80023a2:	e7f6      	b.n	8002392 <__sfp+0x1a>
 80023a4:	220c      	movs	r2, #12
 80023a6:	5ea5      	ldrsh	r5, [r4, r2]
 80023a8:	2d00      	cmp	r5, #0
 80023aa:	d11a      	bne.n	80023e2 <__sfp+0x6a>
 80023ac:	0020      	movs	r0, r4
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <__sfp+0x8c>)
 80023b0:	3058      	adds	r0, #88	; 0x58
 80023b2:	60e3      	str	r3, [r4, #12]
 80023b4:	6665      	str	r5, [r4, #100]	; 0x64
 80023b6:	f000 f847 	bl	8002448 <__retarget_lock_init_recursive>
 80023ba:	f7ff ff8d 	bl	80022d8 <__sfp_lock_release>
 80023be:	0020      	movs	r0, r4
 80023c0:	2208      	movs	r2, #8
 80023c2:	0029      	movs	r1, r5
 80023c4:	6025      	str	r5, [r4, #0]
 80023c6:	60a5      	str	r5, [r4, #8]
 80023c8:	6065      	str	r5, [r4, #4]
 80023ca:	6125      	str	r5, [r4, #16]
 80023cc:	6165      	str	r5, [r4, #20]
 80023ce:	61a5      	str	r5, [r4, #24]
 80023d0:	305c      	adds	r0, #92	; 0x5c
 80023d2:	f7ff fcff 	bl	8001dd4 <memset>
 80023d6:	6365      	str	r5, [r4, #52]	; 0x34
 80023d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80023da:	64a5      	str	r5, [r4, #72]	; 0x48
 80023dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80023de:	0020      	movs	r0, r4
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e2:	3468      	adds	r4, #104	; 0x68
 80023e4:	e7d7      	b.n	8002396 <__sfp+0x1e>
 80023e6:	2104      	movs	r1, #4
 80023e8:	0038      	movs	r0, r7
 80023ea:	f7ff ff57 	bl	800229c <__sfmoreglue>
 80023ee:	1e04      	subs	r4, r0, #0
 80023f0:	6030      	str	r0, [r6, #0]
 80023f2:	d1d5      	bne.n	80023a0 <__sfp+0x28>
 80023f4:	f7ff ff70 	bl	80022d8 <__sfp_lock_release>
 80023f8:	230c      	movs	r3, #12
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	e7ef      	b.n	80023de <__sfp+0x66>
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	08002eec 	.word	0x08002eec
 8002404:	ffff0001 	.word	0xffff0001

08002408 <_fwalk_reent>:
 8002408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800240a:	0004      	movs	r4, r0
 800240c:	0006      	movs	r6, r0
 800240e:	2700      	movs	r7, #0
 8002410:	9101      	str	r1, [sp, #4]
 8002412:	3448      	adds	r4, #72	; 0x48
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	68a5      	ldr	r5, [r4, #8]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	d504      	bpl.n	800242c <_fwalk_reent+0x24>
 8002422:	6824      	ldr	r4, [r4, #0]
 8002424:	2c00      	cmp	r4, #0
 8002426:	d1f5      	bne.n	8002414 <_fwalk_reent+0xc>
 8002428:	0038      	movs	r0, r7
 800242a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800242c:	89ab      	ldrh	r3, [r5, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d908      	bls.n	8002444 <_fwalk_reent+0x3c>
 8002432:	220e      	movs	r2, #14
 8002434:	5eab      	ldrsh	r3, [r5, r2]
 8002436:	3301      	adds	r3, #1
 8002438:	d004      	beq.n	8002444 <_fwalk_reent+0x3c>
 800243a:	0029      	movs	r1, r5
 800243c:	0030      	movs	r0, r6
 800243e:	9b01      	ldr	r3, [sp, #4]
 8002440:	4798      	blx	r3
 8002442:	4307      	orrs	r7, r0
 8002444:	3568      	adds	r5, #104	; 0x68
 8002446:	e7e8      	b.n	800241a <_fwalk_reent+0x12>

08002448 <__retarget_lock_init_recursive>:
 8002448:	4770      	bx	lr

0800244a <__retarget_lock_acquire_recursive>:
 800244a:	4770      	bx	lr

0800244c <__retarget_lock_release_recursive>:
 800244c:	4770      	bx	lr
	...

08002450 <__swhatbuf_r>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	000e      	movs	r6, r1
 8002454:	001d      	movs	r5, r3
 8002456:	230e      	movs	r3, #14
 8002458:	5ec9      	ldrsh	r1, [r1, r3]
 800245a:	0014      	movs	r4, r2
 800245c:	b096      	sub	sp, #88	; 0x58
 800245e:	2900      	cmp	r1, #0
 8002460:	da08      	bge.n	8002474 <__swhatbuf_r+0x24>
 8002462:	220c      	movs	r2, #12
 8002464:	5eb3      	ldrsh	r3, [r6, r2]
 8002466:	2200      	movs	r2, #0
 8002468:	602a      	str	r2, [r5, #0]
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	d411      	bmi.n	8002492 <__swhatbuf_r+0x42>
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	e00f      	b.n	8002494 <__swhatbuf_r+0x44>
 8002474:	466a      	mov	r2, sp
 8002476:	f000 fca1 	bl	8002dbc <_fstat_r>
 800247a:	2800      	cmp	r0, #0
 800247c:	dbf1      	blt.n	8002462 <__swhatbuf_r+0x12>
 800247e:	23f0      	movs	r3, #240	; 0xf0
 8002480:	9901      	ldr	r1, [sp, #4]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4019      	ands	r1, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <__swhatbuf_r+0x4c>)
 8002488:	18c9      	adds	r1, r1, r3
 800248a:	424b      	negs	r3, r1
 800248c:	4159      	adcs	r1, r3
 800248e:	6029      	str	r1, [r5, #0]
 8002490:	e7ed      	b.n	800246e <__swhatbuf_r+0x1e>
 8002492:	2340      	movs	r3, #64	; 0x40
 8002494:	2000      	movs	r0, #0
 8002496:	6023      	str	r3, [r4, #0]
 8002498:	b016      	add	sp, #88	; 0x58
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	ffffe000 	.word	0xffffe000

080024a0 <__smakebuf_r>:
 80024a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024a2:	2602      	movs	r6, #2
 80024a4:	898b      	ldrh	r3, [r1, #12]
 80024a6:	0005      	movs	r5, r0
 80024a8:	000c      	movs	r4, r1
 80024aa:	4233      	tst	r3, r6
 80024ac:	d006      	beq.n	80024bc <__smakebuf_r+0x1c>
 80024ae:	0023      	movs	r3, r4
 80024b0:	3347      	adds	r3, #71	; 0x47
 80024b2:	6023      	str	r3, [r4, #0]
 80024b4:	6123      	str	r3, [r4, #16]
 80024b6:	2301      	movs	r3, #1
 80024b8:	6163      	str	r3, [r4, #20]
 80024ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80024bc:	466a      	mov	r2, sp
 80024be:	ab01      	add	r3, sp, #4
 80024c0:	f7ff ffc6 	bl	8002450 <__swhatbuf_r>
 80024c4:	9900      	ldr	r1, [sp, #0]
 80024c6:	0007      	movs	r7, r0
 80024c8:	0028      	movs	r0, r5
 80024ca:	f000 f899 	bl	8002600 <_malloc_r>
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d108      	bne.n	80024e4 <__smakebuf_r+0x44>
 80024d2:	220c      	movs	r2, #12
 80024d4:	5ea3      	ldrsh	r3, [r4, r2]
 80024d6:	059a      	lsls	r2, r3, #22
 80024d8:	d4ef      	bmi.n	80024ba <__smakebuf_r+0x1a>
 80024da:	2203      	movs	r2, #3
 80024dc:	4393      	bics	r3, r2
 80024de:	431e      	orrs	r6, r3
 80024e0:	81a6      	strh	r6, [r4, #12]
 80024e2:	e7e4      	b.n	80024ae <__smakebuf_r+0xe>
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__smakebuf_r+0x84>)
 80024e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	89a2      	ldrh	r2, [r4, #12]
 80024ec:	6020      	str	r0, [r4, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	81a3      	strh	r3, [r4, #12]
 80024f2:	9b00      	ldr	r3, [sp, #0]
 80024f4:	6120      	str	r0, [r4, #16]
 80024f6:	6163      	str	r3, [r4, #20]
 80024f8:	9b01      	ldr	r3, [sp, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <__smakebuf_r+0x7a>
 80024fe:	0028      	movs	r0, r5
 8002500:	230e      	movs	r3, #14
 8002502:	5ee1      	ldrsh	r1, [r4, r3]
 8002504:	f000 fc6c 	bl	8002de0 <_isatty_r>
 8002508:	2800      	cmp	r0, #0
 800250a:	d006      	beq.n	800251a <__smakebuf_r+0x7a>
 800250c:	2203      	movs	r2, #3
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	4393      	bics	r3, r2
 8002512:	001a      	movs	r2, r3
 8002514:	2301      	movs	r3, #1
 8002516:	4313      	orrs	r3, r2
 8002518:	81a3      	strh	r3, [r4, #12]
 800251a:	89a0      	ldrh	r0, [r4, #12]
 800251c:	4307      	orrs	r7, r0
 800251e:	81a7      	strh	r7, [r4, #12]
 8002520:	e7cb      	b.n	80024ba <__smakebuf_r+0x1a>
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	0800228d 	.word	0x0800228d

08002528 <_free_r>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	0005      	movs	r5, r0
 800252c:	2900      	cmp	r1, #0
 800252e:	d010      	beq.n	8002552 <_free_r+0x2a>
 8002530:	1f0c      	subs	r4, r1, #4
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	da00      	bge.n	800253a <_free_r+0x12>
 8002538:	18e4      	adds	r4, r4, r3
 800253a:	0028      	movs	r0, r5
 800253c:	f000 fc82 	bl	8002e44 <__malloc_lock>
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <_free_r+0x90>)
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <_free_r+0x2c>
 8002548:	6063      	str	r3, [r4, #4]
 800254a:	6014      	str	r4, [r2, #0]
 800254c:	0028      	movs	r0, r5
 800254e:	f000 fc81 	bl	8002e54 <__malloc_unlock>
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	42a3      	cmp	r3, r4
 8002556:	d908      	bls.n	800256a <_free_r+0x42>
 8002558:	6821      	ldr	r1, [r4, #0]
 800255a:	1860      	adds	r0, r4, r1
 800255c:	4283      	cmp	r3, r0
 800255e:	d1f3      	bne.n	8002548 <_free_r+0x20>
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	1841      	adds	r1, r0, r1
 8002566:	6021      	str	r1, [r4, #0]
 8002568:	e7ee      	b.n	8002548 <_free_r+0x20>
 800256a:	001a      	movs	r2, r3
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_free_r+0x4e>
 8002572:	42a3      	cmp	r3, r4
 8002574:	d9f9      	bls.n	800256a <_free_r+0x42>
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	1850      	adds	r0, r2, r1
 800257a:	42a0      	cmp	r0, r4
 800257c:	d10b      	bne.n	8002596 <_free_r+0x6e>
 800257e:	6820      	ldr	r0, [r4, #0]
 8002580:	1809      	adds	r1, r1, r0
 8002582:	1850      	adds	r0, r2, r1
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	4283      	cmp	r3, r0
 8002588:	d1e0      	bne.n	800254c <_free_r+0x24>
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	1841      	adds	r1, r0, r1
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	6053      	str	r3, [r2, #4]
 8002594:	e7da      	b.n	800254c <_free_r+0x24>
 8002596:	42a0      	cmp	r0, r4
 8002598:	d902      	bls.n	80025a0 <_free_r+0x78>
 800259a:	230c      	movs	r3, #12
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	e7d5      	b.n	800254c <_free_r+0x24>
 80025a0:	6821      	ldr	r1, [r4, #0]
 80025a2:	1860      	adds	r0, r4, r1
 80025a4:	4283      	cmp	r3, r0
 80025a6:	d103      	bne.n	80025b0 <_free_r+0x88>
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	1841      	adds	r1, r0, r1
 80025ae:	6021      	str	r1, [r4, #0]
 80025b0:	6063      	str	r3, [r4, #4]
 80025b2:	6054      	str	r4, [r2, #4]
 80025b4:	e7ca      	b.n	800254c <_free_r+0x24>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	20000090 	.word	0x20000090

080025bc <sbrk_aligned>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4e0f      	ldr	r6, [pc, #60]	; (80025fc <sbrk_aligned+0x40>)
 80025c0:	000d      	movs	r5, r1
 80025c2:	6831      	ldr	r1, [r6, #0]
 80025c4:	0004      	movs	r4, r0
 80025c6:	2900      	cmp	r1, #0
 80025c8:	d102      	bne.n	80025d0 <sbrk_aligned+0x14>
 80025ca:	f000 fb73 	bl	8002cb4 <_sbrk_r>
 80025ce:	6030      	str	r0, [r6, #0]
 80025d0:	0029      	movs	r1, r5
 80025d2:	0020      	movs	r0, r4
 80025d4:	f000 fb6e 	bl	8002cb4 <_sbrk_r>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d00a      	beq.n	80025f2 <sbrk_aligned+0x36>
 80025dc:	2303      	movs	r3, #3
 80025de:	1cc5      	adds	r5, r0, #3
 80025e0:	439d      	bics	r5, r3
 80025e2:	42a8      	cmp	r0, r5
 80025e4:	d007      	beq.n	80025f6 <sbrk_aligned+0x3a>
 80025e6:	1a29      	subs	r1, r5, r0
 80025e8:	0020      	movs	r0, r4
 80025ea:	f000 fb63 	bl	8002cb4 <_sbrk_r>
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	d101      	bne.n	80025f6 <sbrk_aligned+0x3a>
 80025f2:	2501      	movs	r5, #1
 80025f4:	426d      	negs	r5, r5
 80025f6:	0028      	movs	r0, r5
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000094 	.word	0x20000094

08002600 <_malloc_r>:
 8002600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002602:	2203      	movs	r2, #3
 8002604:	1ccb      	adds	r3, r1, #3
 8002606:	4393      	bics	r3, r2
 8002608:	3308      	adds	r3, #8
 800260a:	0006      	movs	r6, r0
 800260c:	001f      	movs	r7, r3
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d232      	bcs.n	8002678 <_malloc_r+0x78>
 8002612:	270c      	movs	r7, #12
 8002614:	42b9      	cmp	r1, r7
 8002616:	d831      	bhi.n	800267c <_malloc_r+0x7c>
 8002618:	0030      	movs	r0, r6
 800261a:	f000 fc13 	bl	8002e44 <__malloc_lock>
 800261e:	4d32      	ldr	r5, [pc, #200]	; (80026e8 <_malloc_r+0xe8>)
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	001c      	movs	r4, r3
 8002624:	2c00      	cmp	r4, #0
 8002626:	d12e      	bne.n	8002686 <_malloc_r+0x86>
 8002628:	0039      	movs	r1, r7
 800262a:	0030      	movs	r0, r6
 800262c:	f7ff ffc6 	bl	80025bc <sbrk_aligned>
 8002630:	0004      	movs	r4, r0
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	d11e      	bne.n	8002674 <_malloc_r+0x74>
 8002636:	682c      	ldr	r4, [r5, #0]
 8002638:	0025      	movs	r5, r4
 800263a:	2d00      	cmp	r5, #0
 800263c:	d14a      	bne.n	80026d4 <_malloc_r+0xd4>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	0029      	movs	r1, r5
 8002642:	18e3      	adds	r3, r4, r3
 8002644:	0030      	movs	r0, r6
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	f000 fb34 	bl	8002cb4 <_sbrk_r>
 800264c:	9b01      	ldr	r3, [sp, #4]
 800264e:	4283      	cmp	r3, r0
 8002650:	d143      	bne.n	80026da <_malloc_r+0xda>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	3703      	adds	r7, #3
 8002656:	1aff      	subs	r7, r7, r3
 8002658:	2303      	movs	r3, #3
 800265a:	439f      	bics	r7, r3
 800265c:	3708      	adds	r7, #8
 800265e:	2f0c      	cmp	r7, #12
 8002660:	d200      	bcs.n	8002664 <_malloc_r+0x64>
 8002662:	270c      	movs	r7, #12
 8002664:	0039      	movs	r1, r7
 8002666:	0030      	movs	r0, r6
 8002668:	f7ff ffa8 	bl	80025bc <sbrk_aligned>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d034      	beq.n	80026da <_malloc_r+0xda>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	19df      	adds	r7, r3, r7
 8002674:	6027      	str	r7, [r4, #0]
 8002676:	e013      	b.n	80026a0 <_malloc_r+0xa0>
 8002678:	2b00      	cmp	r3, #0
 800267a:	dacb      	bge.n	8002614 <_malloc_r+0x14>
 800267c:	230c      	movs	r3, #12
 800267e:	2500      	movs	r5, #0
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	0028      	movs	r0, r5
 8002684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	1bd1      	subs	r1, r2, r7
 800268a:	d420      	bmi.n	80026ce <_malloc_r+0xce>
 800268c:	290b      	cmp	r1, #11
 800268e:	d917      	bls.n	80026c0 <_malloc_r+0xc0>
 8002690:	19e2      	adds	r2, r4, r7
 8002692:	6027      	str	r7, [r4, #0]
 8002694:	42a3      	cmp	r3, r4
 8002696:	d111      	bne.n	80026bc <_malloc_r+0xbc>
 8002698:	602a      	str	r2, [r5, #0]
 800269a:	6863      	ldr	r3, [r4, #4]
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	0030      	movs	r0, r6
 80026a2:	0025      	movs	r5, r4
 80026a4:	f000 fbd6 	bl	8002e54 <__malloc_unlock>
 80026a8:	2207      	movs	r2, #7
 80026aa:	350b      	adds	r5, #11
 80026ac:	1d23      	adds	r3, r4, #4
 80026ae:	4395      	bics	r5, r2
 80026b0:	1aea      	subs	r2, r5, r3
 80026b2:	429d      	cmp	r5, r3
 80026b4:	d0e5      	beq.n	8002682 <_malloc_r+0x82>
 80026b6:	1b5b      	subs	r3, r3, r5
 80026b8:	50a3      	str	r3, [r4, r2]
 80026ba:	e7e2      	b.n	8002682 <_malloc_r+0x82>
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e7ec      	b.n	800269a <_malloc_r+0x9a>
 80026c0:	6862      	ldr	r2, [r4, #4]
 80026c2:	42a3      	cmp	r3, r4
 80026c4:	d101      	bne.n	80026ca <_malloc_r+0xca>
 80026c6:	602a      	str	r2, [r5, #0]
 80026c8:	e7ea      	b.n	80026a0 <_malloc_r+0xa0>
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e7e8      	b.n	80026a0 <_malloc_r+0xa0>
 80026ce:	0023      	movs	r3, r4
 80026d0:	6864      	ldr	r4, [r4, #4]
 80026d2:	e7a7      	b.n	8002624 <_malloc_r+0x24>
 80026d4:	002c      	movs	r4, r5
 80026d6:	686d      	ldr	r5, [r5, #4]
 80026d8:	e7af      	b.n	800263a <_malloc_r+0x3a>
 80026da:	230c      	movs	r3, #12
 80026dc:	0030      	movs	r0, r6
 80026de:	6033      	str	r3, [r6, #0]
 80026e0:	f000 fbb8 	bl	8002e54 <__malloc_unlock>
 80026e4:	e7cd      	b.n	8002682 <_malloc_r+0x82>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000090 	.word	0x20000090

080026ec <__sfputc_r>:
 80026ec:	6893      	ldr	r3, [r2, #8]
 80026ee:	b510      	push	{r4, lr}
 80026f0:	3b01      	subs	r3, #1
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da04      	bge.n	8002702 <__sfputc_r+0x16>
 80026f8:	6994      	ldr	r4, [r2, #24]
 80026fa:	42a3      	cmp	r3, r4
 80026fc:	db07      	blt.n	800270e <__sfputc_r+0x22>
 80026fe:	290a      	cmp	r1, #10
 8002700:	d005      	beq.n	800270e <__sfputc_r+0x22>
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	1c58      	adds	r0, r3, #1
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	7019      	strb	r1, [r3, #0]
 800270a:	0008      	movs	r0, r1
 800270c:	bd10      	pop	{r4, pc}
 800270e:	f7ff fbff 	bl	8001f10 <__swbuf_r>
 8002712:	0001      	movs	r1, r0
 8002714:	e7f9      	b.n	800270a <__sfputc_r+0x1e>

08002716 <__sfputs_r>:
 8002716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002718:	0006      	movs	r6, r0
 800271a:	000f      	movs	r7, r1
 800271c:	0014      	movs	r4, r2
 800271e:	18d5      	adds	r5, r2, r3
 8002720:	42ac      	cmp	r4, r5
 8002722:	d101      	bne.n	8002728 <__sfputs_r+0x12>
 8002724:	2000      	movs	r0, #0
 8002726:	e007      	b.n	8002738 <__sfputs_r+0x22>
 8002728:	7821      	ldrb	r1, [r4, #0]
 800272a:	003a      	movs	r2, r7
 800272c:	0030      	movs	r0, r6
 800272e:	f7ff ffdd 	bl	80026ec <__sfputc_r>
 8002732:	3401      	adds	r4, #1
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d1f3      	bne.n	8002720 <__sfputs_r+0xa>
 8002738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800273c <_vfiprintf_r>:
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b0a1      	sub	sp, #132	; 0x84
 8002740:	0006      	movs	r6, r0
 8002742:	000c      	movs	r4, r1
 8002744:	001f      	movs	r7, r3
 8002746:	9203      	str	r2, [sp, #12]
 8002748:	2800      	cmp	r0, #0
 800274a:	d004      	beq.n	8002756 <_vfiprintf_r+0x1a>
 800274c:	6983      	ldr	r3, [r0, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <_vfiprintf_r+0x1a>
 8002752:	f7ff fdd9 	bl	8002308 <__sinit>
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <_vfiprintf_r+0x254>)
 8002758:	429c      	cmp	r4, r3
 800275a:	d11c      	bne.n	8002796 <_vfiprintf_r+0x5a>
 800275c:	6874      	ldr	r4, [r6, #4]
 800275e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002760:	07db      	lsls	r3, r3, #31
 8002762:	d405      	bmi.n	8002770 <_vfiprintf_r+0x34>
 8002764:	89a3      	ldrh	r3, [r4, #12]
 8002766:	059b      	lsls	r3, r3, #22
 8002768:	d402      	bmi.n	8002770 <_vfiprintf_r+0x34>
 800276a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800276c:	f7ff fe6d 	bl	800244a <__retarget_lock_acquire_recursive>
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	071b      	lsls	r3, r3, #28
 8002774:	d502      	bpl.n	800277c <_vfiprintf_r+0x40>
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11d      	bne.n	80027b8 <_vfiprintf_r+0x7c>
 800277c:	0021      	movs	r1, r4
 800277e:	0030      	movs	r0, r6
 8002780:	f7ff fc1c 	bl	8001fbc <__swsetup_r>
 8002784:	2800      	cmp	r0, #0
 8002786:	d017      	beq.n	80027b8 <_vfiprintf_r+0x7c>
 8002788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800278a:	07db      	lsls	r3, r3, #31
 800278c:	d50d      	bpl.n	80027aa <_vfiprintf_r+0x6e>
 800278e:	2001      	movs	r0, #1
 8002790:	4240      	negs	r0, r0
 8002792:	b021      	add	sp, #132	; 0x84
 8002794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002796:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <_vfiprintf_r+0x258>)
 8002798:	429c      	cmp	r4, r3
 800279a:	d101      	bne.n	80027a0 <_vfiprintf_r+0x64>
 800279c:	68b4      	ldr	r4, [r6, #8]
 800279e:	e7de      	b.n	800275e <_vfiprintf_r+0x22>
 80027a0:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <_vfiprintf_r+0x25c>)
 80027a2:	429c      	cmp	r4, r3
 80027a4:	d1db      	bne.n	800275e <_vfiprintf_r+0x22>
 80027a6:	68f4      	ldr	r4, [r6, #12]
 80027a8:	e7d9      	b.n	800275e <_vfiprintf_r+0x22>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	059b      	lsls	r3, r3, #22
 80027ae:	d4ee      	bmi.n	800278e <_vfiprintf_r+0x52>
 80027b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b2:	f7ff fe4b 	bl	800244c <__retarget_lock_release_recursive>
 80027b6:	e7ea      	b.n	800278e <_vfiprintf_r+0x52>
 80027b8:	2300      	movs	r3, #0
 80027ba:	ad08      	add	r5, sp, #32
 80027bc:	616b      	str	r3, [r5, #20]
 80027be:	3320      	adds	r3, #32
 80027c0:	766b      	strb	r3, [r5, #25]
 80027c2:	3310      	adds	r3, #16
 80027c4:	76ab      	strb	r3, [r5, #26]
 80027c6:	9707      	str	r7, [sp, #28]
 80027c8:	9f03      	ldr	r7, [sp, #12]
 80027ca:	783b      	ldrb	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <_vfiprintf_r+0x98>
 80027d0:	2b25      	cmp	r3, #37	; 0x25
 80027d2:	d14e      	bne.n	8002872 <_vfiprintf_r+0x136>
 80027d4:	9b03      	ldr	r3, [sp, #12]
 80027d6:	1afb      	subs	r3, r7, r3
 80027d8:	9305      	str	r3, [sp, #20]
 80027da:	9b03      	ldr	r3, [sp, #12]
 80027dc:	429f      	cmp	r7, r3
 80027de:	d00d      	beq.n	80027fc <_vfiprintf_r+0xc0>
 80027e0:	9b05      	ldr	r3, [sp, #20]
 80027e2:	0021      	movs	r1, r4
 80027e4:	0030      	movs	r0, r6
 80027e6:	9a03      	ldr	r2, [sp, #12]
 80027e8:	f7ff ff95 	bl	8002716 <__sfputs_r>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d100      	bne.n	80027f2 <_vfiprintf_r+0xb6>
 80027f0:	e0b5      	b.n	800295e <_vfiprintf_r+0x222>
 80027f2:	696a      	ldr	r2, [r5, #20]
 80027f4:	9b05      	ldr	r3, [sp, #20]
 80027f6:	4694      	mov	ip, r2
 80027f8:	4463      	add	r3, ip
 80027fa:	616b      	str	r3, [r5, #20]
 80027fc:	783b      	ldrb	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d100      	bne.n	8002804 <_vfiprintf_r+0xc8>
 8002802:	e0ac      	b.n	800295e <_vfiprintf_r+0x222>
 8002804:	2201      	movs	r2, #1
 8002806:	1c7b      	adds	r3, r7, #1
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	4252      	negs	r2, r2
 800280e:	606a      	str	r2, [r5, #4]
 8002810:	a904      	add	r1, sp, #16
 8002812:	3254      	adds	r2, #84	; 0x54
 8002814:	1852      	adds	r2, r2, r1
 8002816:	602b      	str	r3, [r5, #0]
 8002818:	60eb      	str	r3, [r5, #12]
 800281a:	60ab      	str	r3, [r5, #8]
 800281c:	7013      	strb	r3, [r2, #0]
 800281e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002820:	9b03      	ldr	r3, [sp, #12]
 8002822:	2205      	movs	r2, #5
 8002824:	7819      	ldrb	r1, [r3, #0]
 8002826:	485d      	ldr	r0, [pc, #372]	; (800299c <_vfiprintf_r+0x260>)
 8002828:	f000 fb00 	bl	8002e2c <memchr>
 800282c:	9b03      	ldr	r3, [sp, #12]
 800282e:	1c5f      	adds	r7, r3, #1
 8002830:	2800      	cmp	r0, #0
 8002832:	d120      	bne.n	8002876 <_vfiprintf_r+0x13a>
 8002834:	682a      	ldr	r2, [r5, #0]
 8002836:	06d3      	lsls	r3, r2, #27
 8002838:	d504      	bpl.n	8002844 <_vfiprintf_r+0x108>
 800283a:	2353      	movs	r3, #83	; 0x53
 800283c:	a904      	add	r1, sp, #16
 800283e:	185b      	adds	r3, r3, r1
 8002840:	2120      	movs	r1, #32
 8002842:	7019      	strb	r1, [r3, #0]
 8002844:	0713      	lsls	r3, r2, #28
 8002846:	d504      	bpl.n	8002852 <_vfiprintf_r+0x116>
 8002848:	2353      	movs	r3, #83	; 0x53
 800284a:	a904      	add	r1, sp, #16
 800284c:	185b      	adds	r3, r3, r1
 800284e:	212b      	movs	r1, #43	; 0x2b
 8002850:	7019      	strb	r1, [r3, #0]
 8002852:	9b03      	ldr	r3, [sp, #12]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b2a      	cmp	r3, #42	; 0x2a
 8002858:	d016      	beq.n	8002888 <_vfiprintf_r+0x14c>
 800285a:	2100      	movs	r1, #0
 800285c:	68eb      	ldr	r3, [r5, #12]
 800285e:	9f03      	ldr	r7, [sp, #12]
 8002860:	783a      	ldrb	r2, [r7, #0]
 8002862:	1c78      	adds	r0, r7, #1
 8002864:	3a30      	subs	r2, #48	; 0x30
 8002866:	4684      	mov	ip, r0
 8002868:	2a09      	cmp	r2, #9
 800286a:	d94f      	bls.n	800290c <_vfiprintf_r+0x1d0>
 800286c:	2900      	cmp	r1, #0
 800286e:	d111      	bne.n	8002894 <_vfiprintf_r+0x158>
 8002870:	e017      	b.n	80028a2 <_vfiprintf_r+0x166>
 8002872:	3701      	adds	r7, #1
 8002874:	e7a9      	b.n	80027ca <_vfiprintf_r+0x8e>
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <_vfiprintf_r+0x260>)
 8002878:	682a      	ldr	r2, [r5, #0]
 800287a:	1ac0      	subs	r0, r0, r3
 800287c:	2301      	movs	r3, #1
 800287e:	4083      	lsls	r3, r0
 8002880:	4313      	orrs	r3, r2
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	9703      	str	r7, [sp, #12]
 8002886:	e7cb      	b.n	8002820 <_vfiprintf_r+0xe4>
 8002888:	9b07      	ldr	r3, [sp, #28]
 800288a:	1d19      	adds	r1, r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	9107      	str	r1, [sp, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db01      	blt.n	8002898 <_vfiprintf_r+0x15c>
 8002894:	930b      	str	r3, [sp, #44]	; 0x2c
 8002896:	e004      	b.n	80028a2 <_vfiprintf_r+0x166>
 8002898:	425b      	negs	r3, r3
 800289a:	60eb      	str	r3, [r5, #12]
 800289c:	2302      	movs	r3, #2
 800289e:	4313      	orrs	r3, r2
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	783b      	ldrb	r3, [r7, #0]
 80028a4:	2b2e      	cmp	r3, #46	; 0x2e
 80028a6:	d10a      	bne.n	80028be <_vfiprintf_r+0x182>
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b2a      	cmp	r3, #42	; 0x2a
 80028ac:	d137      	bne.n	800291e <_vfiprintf_r+0x1e2>
 80028ae:	9b07      	ldr	r3, [sp, #28]
 80028b0:	3702      	adds	r7, #2
 80028b2:	1d1a      	adds	r2, r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	9207      	str	r2, [sp, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db2d      	blt.n	8002918 <_vfiprintf_r+0x1dc>
 80028bc:	9309      	str	r3, [sp, #36]	; 0x24
 80028be:	2203      	movs	r2, #3
 80028c0:	7839      	ldrb	r1, [r7, #0]
 80028c2:	4837      	ldr	r0, [pc, #220]	; (80029a0 <_vfiprintf_r+0x264>)
 80028c4:	f000 fab2 	bl	8002e2c <memchr>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d007      	beq.n	80028dc <_vfiprintf_r+0x1a0>
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <_vfiprintf_r+0x264>)
 80028ce:	682a      	ldr	r2, [r5, #0]
 80028d0:	1ac0      	subs	r0, r0, r3
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	4083      	lsls	r3, r0
 80028d6:	4313      	orrs	r3, r2
 80028d8:	3701      	adds	r7, #1
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	7839      	ldrb	r1, [r7, #0]
 80028de:	1c7b      	adds	r3, r7, #1
 80028e0:	2206      	movs	r2, #6
 80028e2:	4830      	ldr	r0, [pc, #192]	; (80029a4 <_vfiprintf_r+0x268>)
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	7629      	strb	r1, [r5, #24]
 80028e8:	f000 faa0 	bl	8002e2c <memchr>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d045      	beq.n	800297c <_vfiprintf_r+0x240>
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <_vfiprintf_r+0x26c>)
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d127      	bne.n	8002946 <_vfiprintf_r+0x20a>
 80028f6:	2207      	movs	r2, #7
 80028f8:	9b07      	ldr	r3, [sp, #28]
 80028fa:	3307      	adds	r3, #7
 80028fc:	4393      	bics	r3, r2
 80028fe:	3308      	adds	r3, #8
 8002900:	9307      	str	r3, [sp, #28]
 8002902:	696b      	ldr	r3, [r5, #20]
 8002904:	9a04      	ldr	r2, [sp, #16]
 8002906:	189b      	adds	r3, r3, r2
 8002908:	616b      	str	r3, [r5, #20]
 800290a:	e75d      	b.n	80027c8 <_vfiprintf_r+0x8c>
 800290c:	210a      	movs	r1, #10
 800290e:	434b      	muls	r3, r1
 8002910:	4667      	mov	r7, ip
 8002912:	189b      	adds	r3, r3, r2
 8002914:	3909      	subs	r1, #9
 8002916:	e7a3      	b.n	8002860 <_vfiprintf_r+0x124>
 8002918:	2301      	movs	r3, #1
 800291a:	425b      	negs	r3, r3
 800291c:	e7ce      	b.n	80028bc <_vfiprintf_r+0x180>
 800291e:	2300      	movs	r3, #0
 8002920:	001a      	movs	r2, r3
 8002922:	3701      	adds	r7, #1
 8002924:	606b      	str	r3, [r5, #4]
 8002926:	7839      	ldrb	r1, [r7, #0]
 8002928:	1c78      	adds	r0, r7, #1
 800292a:	3930      	subs	r1, #48	; 0x30
 800292c:	4684      	mov	ip, r0
 800292e:	2909      	cmp	r1, #9
 8002930:	d903      	bls.n	800293a <_vfiprintf_r+0x1fe>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0c3      	beq.n	80028be <_vfiprintf_r+0x182>
 8002936:	9209      	str	r2, [sp, #36]	; 0x24
 8002938:	e7c1      	b.n	80028be <_vfiprintf_r+0x182>
 800293a:	230a      	movs	r3, #10
 800293c:	435a      	muls	r2, r3
 800293e:	4667      	mov	r7, ip
 8002940:	1852      	adds	r2, r2, r1
 8002942:	3b09      	subs	r3, #9
 8002944:	e7ef      	b.n	8002926 <_vfiprintf_r+0x1ea>
 8002946:	ab07      	add	r3, sp, #28
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	0022      	movs	r2, r4
 800294c:	0029      	movs	r1, r5
 800294e:	0030      	movs	r0, r6
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <_vfiprintf_r+0x270>)
 8002952:	e000      	b.n	8002956 <_vfiprintf_r+0x21a>
 8002954:	bf00      	nop
 8002956:	9004      	str	r0, [sp, #16]
 8002958:	9b04      	ldr	r3, [sp, #16]
 800295a:	3301      	adds	r3, #1
 800295c:	d1d1      	bne.n	8002902 <_vfiprintf_r+0x1c6>
 800295e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002960:	07db      	lsls	r3, r3, #31
 8002962:	d405      	bmi.n	8002970 <_vfiprintf_r+0x234>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	059b      	lsls	r3, r3, #22
 8002968:	d402      	bmi.n	8002970 <_vfiprintf_r+0x234>
 800296a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800296c:	f7ff fd6e 	bl	800244c <__retarget_lock_release_recursive>
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	065b      	lsls	r3, r3, #25
 8002974:	d500      	bpl.n	8002978 <_vfiprintf_r+0x23c>
 8002976:	e70a      	b.n	800278e <_vfiprintf_r+0x52>
 8002978:	980d      	ldr	r0, [sp, #52]	; 0x34
 800297a:	e70a      	b.n	8002792 <_vfiprintf_r+0x56>
 800297c:	ab07      	add	r3, sp, #28
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	0022      	movs	r2, r4
 8002982:	0029      	movs	r1, r5
 8002984:	0030      	movs	r0, r6
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <_vfiprintf_r+0x270>)
 8002988:	f000 f882 	bl	8002a90 <_printf_i>
 800298c:	e7e3      	b.n	8002956 <_vfiprintf_r+0x21a>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	08002f10 	.word	0x08002f10
 8002994:	08002f30 	.word	0x08002f30
 8002998:	08002ef0 	.word	0x08002ef0
 800299c:	08002f50 	.word	0x08002f50
 80029a0:	08002f56 	.word	0x08002f56
 80029a4:	08002f5a 	.word	0x08002f5a
 80029a8:	00000000 	.word	0x00000000
 80029ac:	08002717 	.word	0x08002717

080029b0 <_printf_common>:
 80029b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029b2:	0015      	movs	r5, r2
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	688a      	ldr	r2, [r1, #8]
 80029b8:	690b      	ldr	r3, [r1, #16]
 80029ba:	000c      	movs	r4, r1
 80029bc:	9000      	str	r0, [sp, #0]
 80029be:	4293      	cmp	r3, r2
 80029c0:	da00      	bge.n	80029c4 <_printf_common+0x14>
 80029c2:	0013      	movs	r3, r2
 80029c4:	0022      	movs	r2, r4
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	3243      	adds	r2, #67	; 0x43
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d001      	beq.n	80029d4 <_printf_common+0x24>
 80029d0:	3301      	adds	r3, #1
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	069b      	lsls	r3, r3, #26
 80029d8:	d502      	bpl.n	80029e0 <_printf_common+0x30>
 80029da:	682b      	ldr	r3, [r5, #0]
 80029dc:	3302      	adds	r3, #2
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	2306      	movs	r3, #6
 80029e4:	0017      	movs	r7, r2
 80029e6:	401f      	ands	r7, r3
 80029e8:	421a      	tst	r2, r3
 80029ea:	d027      	beq.n	8002a3c <_printf_common+0x8c>
 80029ec:	0023      	movs	r3, r4
 80029ee:	3343      	adds	r3, #67	; 0x43
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	1e5a      	subs	r2, r3, #1
 80029f4:	4193      	sbcs	r3, r2
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	0692      	lsls	r2, r2, #26
 80029fa:	d430      	bmi.n	8002a5e <_printf_common+0xae>
 80029fc:	0022      	movs	r2, r4
 80029fe:	9901      	ldr	r1, [sp, #4]
 8002a00:	9800      	ldr	r0, [sp, #0]
 8002a02:	9e08      	ldr	r6, [sp, #32]
 8002a04:	3243      	adds	r2, #67	; 0x43
 8002a06:	47b0      	blx	r6
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d025      	beq.n	8002a58 <_printf_common+0xa8>
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	6820      	ldr	r0, [r4, #0]
 8002a10:	682a      	ldr	r2, [r5, #0]
 8002a12:	68e1      	ldr	r1, [r4, #12]
 8002a14:	2500      	movs	r5, #0
 8002a16:	4003      	ands	r3, r0
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d103      	bne.n	8002a24 <_printf_common+0x74>
 8002a1c:	1a8d      	subs	r5, r1, r2
 8002a1e:	43eb      	mvns	r3, r5
 8002a20:	17db      	asrs	r3, r3, #31
 8002a22:	401d      	ands	r5, r3
 8002a24:	68a3      	ldr	r3, [r4, #8]
 8002a26:	6922      	ldr	r2, [r4, #16]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	dd01      	ble.n	8002a30 <_printf_common+0x80>
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	18ed      	adds	r5, r5, r3
 8002a30:	2700      	movs	r7, #0
 8002a32:	42bd      	cmp	r5, r7
 8002a34:	d120      	bne.n	8002a78 <_printf_common+0xc8>
 8002a36:	2000      	movs	r0, #0
 8002a38:	e010      	b.n	8002a5c <_printf_common+0xac>
 8002a3a:	3701      	adds	r7, #1
 8002a3c:	68e3      	ldr	r3, [r4, #12]
 8002a3e:	682a      	ldr	r2, [r5, #0]
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	42bb      	cmp	r3, r7
 8002a44:	ddd2      	ble.n	80029ec <_printf_common+0x3c>
 8002a46:	0022      	movs	r2, r4
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9901      	ldr	r1, [sp, #4]
 8002a4c:	9800      	ldr	r0, [sp, #0]
 8002a4e:	9e08      	ldr	r6, [sp, #32]
 8002a50:	3219      	adds	r2, #25
 8002a52:	47b0      	blx	r6
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d1f0      	bne.n	8002a3a <_printf_common+0x8a>
 8002a58:	2001      	movs	r0, #1
 8002a5a:	4240      	negs	r0, r0
 8002a5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a5e:	2030      	movs	r0, #48	; 0x30
 8002a60:	18e1      	adds	r1, r4, r3
 8002a62:	3143      	adds	r1, #67	; 0x43
 8002a64:	7008      	strb	r0, [r1, #0]
 8002a66:	0021      	movs	r1, r4
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	3145      	adds	r1, #69	; 0x45
 8002a6c:	7809      	ldrb	r1, [r1, #0]
 8002a6e:	18a2      	adds	r2, r4, r2
 8002a70:	3243      	adds	r2, #67	; 0x43
 8002a72:	3302      	adds	r3, #2
 8002a74:	7011      	strb	r1, [r2, #0]
 8002a76:	e7c1      	b.n	80029fc <_printf_common+0x4c>
 8002a78:	0022      	movs	r2, r4
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9901      	ldr	r1, [sp, #4]
 8002a7e:	9800      	ldr	r0, [sp, #0]
 8002a80:	9e08      	ldr	r6, [sp, #32]
 8002a82:	321a      	adds	r2, #26
 8002a84:	47b0      	blx	r6
 8002a86:	1c43      	adds	r3, r0, #1
 8002a88:	d0e6      	beq.n	8002a58 <_printf_common+0xa8>
 8002a8a:	3701      	adds	r7, #1
 8002a8c:	e7d1      	b.n	8002a32 <_printf_common+0x82>
	...

08002a90 <_printf_i>:
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	b08b      	sub	sp, #44	; 0x2c
 8002a94:	9206      	str	r2, [sp, #24]
 8002a96:	000a      	movs	r2, r1
 8002a98:	3243      	adds	r2, #67	; 0x43
 8002a9a:	9307      	str	r3, [sp, #28]
 8002a9c:	9005      	str	r0, [sp, #20]
 8002a9e:	9204      	str	r2, [sp, #16]
 8002aa0:	7e0a      	ldrb	r2, [r1, #24]
 8002aa2:	000c      	movs	r4, r1
 8002aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002aa6:	2a78      	cmp	r2, #120	; 0x78
 8002aa8:	d807      	bhi.n	8002aba <_printf_i+0x2a>
 8002aaa:	2a62      	cmp	r2, #98	; 0x62
 8002aac:	d809      	bhi.n	8002ac2 <_printf_i+0x32>
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	d100      	bne.n	8002ab4 <_printf_i+0x24>
 8002ab2:	e0c1      	b.n	8002c38 <_printf_i+0x1a8>
 8002ab4:	2a58      	cmp	r2, #88	; 0x58
 8002ab6:	d100      	bne.n	8002aba <_printf_i+0x2a>
 8002ab8:	e08c      	b.n	8002bd4 <_printf_i+0x144>
 8002aba:	0026      	movs	r6, r4
 8002abc:	3642      	adds	r6, #66	; 0x42
 8002abe:	7032      	strb	r2, [r6, #0]
 8002ac0:	e022      	b.n	8002b08 <_printf_i+0x78>
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	3863      	subs	r0, #99	; 0x63
 8002ac6:	2815      	cmp	r0, #21
 8002ac8:	d8f7      	bhi.n	8002aba <_printf_i+0x2a>
 8002aca:	f7fd fb1d 	bl	8000108 <__gnu_thumb1_case_shi>
 8002ace:	0016      	.short	0x0016
 8002ad0:	fff6001f 	.word	0xfff6001f
 8002ad4:	fff6fff6 	.word	0xfff6fff6
 8002ad8:	001ffff6 	.word	0x001ffff6
 8002adc:	fff6fff6 	.word	0xfff6fff6
 8002ae0:	fff6fff6 	.word	0xfff6fff6
 8002ae4:	003600a8 	.word	0x003600a8
 8002ae8:	fff6009a 	.word	0xfff6009a
 8002aec:	00b9fff6 	.word	0x00b9fff6
 8002af0:	0036fff6 	.word	0x0036fff6
 8002af4:	fff6fff6 	.word	0xfff6fff6
 8002af8:	009e      	.short	0x009e
 8002afa:	0026      	movs	r6, r4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	3642      	adds	r6, #66	; 0x42
 8002b00:	1d11      	adds	r1, r2, #4
 8002b02:	6019      	str	r1, [r3, #0]
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	7033      	strb	r3, [r6, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0a7      	b.n	8002c5c <_printf_i+0x1cc>
 8002b0c:	6808      	ldr	r0, [r1, #0]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	1d0a      	adds	r2, r1, #4
 8002b12:	0605      	lsls	r5, r0, #24
 8002b14:	d50b      	bpl.n	8002b2e <_printf_i+0x9e>
 8002b16:	680d      	ldr	r5, [r1, #0]
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	da03      	bge.n	8002b26 <_printf_i+0x96>
 8002b1e:	232d      	movs	r3, #45	; 0x2d
 8002b20:	9a04      	ldr	r2, [sp, #16]
 8002b22:	426d      	negs	r5, r5
 8002b24:	7013      	strb	r3, [r2, #0]
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <_printf_i+0x21c>)
 8002b28:	270a      	movs	r7, #10
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	e01b      	b.n	8002b66 <_printf_i+0xd6>
 8002b2e:	680d      	ldr	r5, [r1, #0]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	0641      	lsls	r1, r0, #25
 8002b34:	d5f1      	bpl.n	8002b1a <_printf_i+0x8a>
 8002b36:	b22d      	sxth	r5, r5
 8002b38:	e7ef      	b.n	8002b1a <_printf_i+0x8a>
 8002b3a:	680d      	ldr	r5, [r1, #0]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	1d08      	adds	r0, r1, #4
 8002b40:	6018      	str	r0, [r3, #0]
 8002b42:	062e      	lsls	r6, r5, #24
 8002b44:	d501      	bpl.n	8002b4a <_printf_i+0xba>
 8002b46:	680d      	ldr	r5, [r1, #0]
 8002b48:	e003      	b.n	8002b52 <_printf_i+0xc2>
 8002b4a:	066d      	lsls	r5, r5, #25
 8002b4c:	d5fb      	bpl.n	8002b46 <_printf_i+0xb6>
 8002b4e:	680d      	ldr	r5, [r1, #0]
 8002b50:	b2ad      	uxth	r5, r5
 8002b52:	4b56      	ldr	r3, [pc, #344]	; (8002cac <_printf_i+0x21c>)
 8002b54:	2708      	movs	r7, #8
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	2a6f      	cmp	r2, #111	; 0x6f
 8002b5a:	d000      	beq.n	8002b5e <_printf_i+0xce>
 8002b5c:	3702      	adds	r7, #2
 8002b5e:	0023      	movs	r3, r4
 8002b60:	2200      	movs	r2, #0
 8002b62:	3343      	adds	r3, #67	; 0x43
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	6863      	ldr	r3, [r4, #4]
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db03      	blt.n	8002b76 <_printf_i+0xe6>
 8002b6e:	2204      	movs	r2, #4
 8002b70:	6821      	ldr	r1, [r4, #0]
 8002b72:	4391      	bics	r1, r2
 8002b74:	6021      	str	r1, [r4, #0]
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	d102      	bne.n	8002b80 <_printf_i+0xf0>
 8002b7a:	9e04      	ldr	r6, [sp, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <_printf_i+0x10a>
 8002b80:	9e04      	ldr	r6, [sp, #16]
 8002b82:	0028      	movs	r0, r5
 8002b84:	0039      	movs	r1, r7
 8002b86:	f7fd fb4f 	bl	8000228 <__aeabi_uidivmod>
 8002b8a:	9b03      	ldr	r3, [sp, #12]
 8002b8c:	3e01      	subs	r6, #1
 8002b8e:	5c5b      	ldrb	r3, [r3, r1]
 8002b90:	7033      	strb	r3, [r6, #0]
 8002b92:	002b      	movs	r3, r5
 8002b94:	0005      	movs	r5, r0
 8002b96:	429f      	cmp	r7, r3
 8002b98:	d9f3      	bls.n	8002b82 <_printf_i+0xf2>
 8002b9a:	2f08      	cmp	r7, #8
 8002b9c:	d109      	bne.n	8002bb2 <_printf_i+0x122>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	07db      	lsls	r3, r3, #31
 8002ba2:	d506      	bpl.n	8002bb2 <_printf_i+0x122>
 8002ba4:	6863      	ldr	r3, [r4, #4]
 8002ba6:	6922      	ldr	r2, [r4, #16]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	dc02      	bgt.n	8002bb2 <_printf_i+0x122>
 8002bac:	2330      	movs	r3, #48	; 0x30
 8002bae:	3e01      	subs	r6, #1
 8002bb0:	7033      	strb	r3, [r6, #0]
 8002bb2:	9b04      	ldr	r3, [sp, #16]
 8002bb4:	1b9b      	subs	r3, r3, r6
 8002bb6:	6123      	str	r3, [r4, #16]
 8002bb8:	9b07      	ldr	r3, [sp, #28]
 8002bba:	0021      	movs	r1, r4
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	9805      	ldr	r0, [sp, #20]
 8002bc0:	9b06      	ldr	r3, [sp, #24]
 8002bc2:	aa09      	add	r2, sp, #36	; 0x24
 8002bc4:	f7ff fef4 	bl	80029b0 <_printf_common>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d14c      	bne.n	8002c66 <_printf_i+0x1d6>
 8002bcc:	2001      	movs	r0, #1
 8002bce:	4240      	negs	r0, r0
 8002bd0:	b00b      	add	sp, #44	; 0x2c
 8002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd4:	3145      	adds	r1, #69	; 0x45
 8002bd6:	700a      	strb	r2, [r1, #0]
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <_printf_i+0x21c>)
 8002bda:	9203      	str	r2, [sp, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	6821      	ldr	r1, [r4, #0]
 8002be0:	ca20      	ldmia	r2!, {r5}
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	0608      	lsls	r0, r1, #24
 8002be6:	d516      	bpl.n	8002c16 <_printf_i+0x186>
 8002be8:	07cb      	lsls	r3, r1, #31
 8002bea:	d502      	bpl.n	8002bf2 <_printf_i+0x162>
 8002bec:	2320      	movs	r3, #32
 8002bee:	4319      	orrs	r1, r3
 8002bf0:	6021      	str	r1, [r4, #0]
 8002bf2:	2710      	movs	r7, #16
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	d1b2      	bne.n	8002b5e <_printf_i+0xce>
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	6822      	ldr	r2, [r4, #0]
 8002bfc:	439a      	bics	r2, r3
 8002bfe:	6022      	str	r2, [r4, #0]
 8002c00:	e7ad      	b.n	8002b5e <_printf_i+0xce>
 8002c02:	2220      	movs	r2, #32
 8002c04:	6809      	ldr	r1, [r1, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	6022      	str	r2, [r4, #0]
 8002c0a:	0022      	movs	r2, r4
 8002c0c:	2178      	movs	r1, #120	; 0x78
 8002c0e:	3245      	adds	r2, #69	; 0x45
 8002c10:	7011      	strb	r1, [r2, #0]
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <_printf_i+0x220>)
 8002c14:	e7e1      	b.n	8002bda <_printf_i+0x14a>
 8002c16:	0648      	lsls	r0, r1, #25
 8002c18:	d5e6      	bpl.n	8002be8 <_printf_i+0x158>
 8002c1a:	b2ad      	uxth	r5, r5
 8002c1c:	e7e4      	b.n	8002be8 <_printf_i+0x158>
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	680d      	ldr	r5, [r1, #0]
 8002c22:	1d10      	adds	r0, r2, #4
 8002c24:	6949      	ldr	r1, [r1, #20]
 8002c26:	6018      	str	r0, [r3, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	062e      	lsls	r6, r5, #24
 8002c2c:	d501      	bpl.n	8002c32 <_printf_i+0x1a2>
 8002c2e:	6019      	str	r1, [r3, #0]
 8002c30:	e002      	b.n	8002c38 <_printf_i+0x1a8>
 8002c32:	066d      	lsls	r5, r5, #25
 8002c34:	d5fb      	bpl.n	8002c2e <_printf_i+0x19e>
 8002c36:	8019      	strh	r1, [r3, #0]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9e04      	ldr	r6, [sp, #16]
 8002c3c:	6123      	str	r3, [r4, #16]
 8002c3e:	e7bb      	b.n	8002bb8 <_printf_i+0x128>
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	1d11      	adds	r1, r2, #4
 8002c44:	6019      	str	r1, [r3, #0]
 8002c46:	6816      	ldr	r6, [r2, #0]
 8002c48:	2100      	movs	r1, #0
 8002c4a:	0030      	movs	r0, r6
 8002c4c:	6862      	ldr	r2, [r4, #4]
 8002c4e:	f000 f8ed 	bl	8002e2c <memchr>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d001      	beq.n	8002c5a <_printf_i+0x1ca>
 8002c56:	1b80      	subs	r0, r0, r6
 8002c58:	6060      	str	r0, [r4, #4]
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	6123      	str	r3, [r4, #16]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9a04      	ldr	r2, [sp, #16]
 8002c62:	7013      	strb	r3, [r2, #0]
 8002c64:	e7a8      	b.n	8002bb8 <_printf_i+0x128>
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	0032      	movs	r2, r6
 8002c6a:	9906      	ldr	r1, [sp, #24]
 8002c6c:	9805      	ldr	r0, [sp, #20]
 8002c6e:	9d07      	ldr	r5, [sp, #28]
 8002c70:	47a8      	blx	r5
 8002c72:	1c43      	adds	r3, r0, #1
 8002c74:	d0aa      	beq.n	8002bcc <_printf_i+0x13c>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	079b      	lsls	r3, r3, #30
 8002c7a:	d415      	bmi.n	8002ca8 <_printf_i+0x218>
 8002c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c7e:	68e0      	ldr	r0, [r4, #12]
 8002c80:	4298      	cmp	r0, r3
 8002c82:	daa5      	bge.n	8002bd0 <_printf_i+0x140>
 8002c84:	0018      	movs	r0, r3
 8002c86:	e7a3      	b.n	8002bd0 <_printf_i+0x140>
 8002c88:	0022      	movs	r2, r4
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9906      	ldr	r1, [sp, #24]
 8002c8e:	9805      	ldr	r0, [sp, #20]
 8002c90:	9e07      	ldr	r6, [sp, #28]
 8002c92:	3219      	adds	r2, #25
 8002c94:	47b0      	blx	r6
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d098      	beq.n	8002bcc <_printf_i+0x13c>
 8002c9a:	3501      	adds	r5, #1
 8002c9c:	68e3      	ldr	r3, [r4, #12]
 8002c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	42ab      	cmp	r3, r5
 8002ca4:	dcf0      	bgt.n	8002c88 <_printf_i+0x1f8>
 8002ca6:	e7e9      	b.n	8002c7c <_printf_i+0x1ec>
 8002ca8:	2500      	movs	r5, #0
 8002caa:	e7f7      	b.n	8002c9c <_printf_i+0x20c>
 8002cac:	08002f61 	.word	0x08002f61
 8002cb0:	08002f72 	.word	0x08002f72

08002cb4 <_sbrk_r>:
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	b570      	push	{r4, r5, r6, lr}
 8002cb8:	4d06      	ldr	r5, [pc, #24]	; (8002cd4 <_sbrk_r+0x20>)
 8002cba:	0004      	movs	r4, r0
 8002cbc:	0008      	movs	r0, r1
 8002cbe:	602b      	str	r3, [r5, #0]
 8002cc0:	f7fe fe72 	bl	80019a8 <_sbrk>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d103      	bne.n	8002cd0 <_sbrk_r+0x1c>
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d000      	beq.n	8002cd0 <_sbrk_r+0x1c>
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000098 	.word	0x20000098

08002cd8 <__sread>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	000c      	movs	r4, r1
 8002cdc:	250e      	movs	r5, #14
 8002cde:	5f49      	ldrsh	r1, [r1, r5]
 8002ce0:	f000 f8c0 	bl	8002e64 <_read_r>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	db03      	blt.n	8002cf0 <__sread+0x18>
 8002ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cea:	181b      	adds	r3, r3, r0
 8002cec:	6563      	str	r3, [r4, #84]	; 0x54
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	4a02      	ldr	r2, [pc, #8]	; (8002cfc <__sread+0x24>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	e7f9      	b.n	8002cee <__sread+0x16>
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	ffffefff 	.word	0xffffefff

08002d00 <__swrite>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	001f      	movs	r7, r3
 8002d04:	898b      	ldrh	r3, [r1, #12]
 8002d06:	0005      	movs	r5, r0
 8002d08:	000c      	movs	r4, r1
 8002d0a:	0016      	movs	r6, r2
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	d505      	bpl.n	8002d1c <__swrite+0x1c>
 8002d10:	230e      	movs	r3, #14
 8002d12:	5ec9      	ldrsh	r1, [r1, r3]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2302      	movs	r3, #2
 8002d18:	f000 f874 	bl	8002e04 <_lseek_r>
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <__swrite+0x34>)
 8002d20:	0028      	movs	r0, r5
 8002d22:	4013      	ands	r3, r2
 8002d24:	81a3      	strh	r3, [r4, #12]
 8002d26:	0032      	movs	r2, r6
 8002d28:	230e      	movs	r3, #14
 8002d2a:	5ee1      	ldrsh	r1, [r4, r3]
 8002d2c:	003b      	movs	r3, r7
 8002d2e:	f000 f81f 	bl	8002d70 <_write_r>
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d34:	ffffefff 	.word	0xffffefff

08002d38 <__sseek>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	000c      	movs	r4, r1
 8002d3c:	250e      	movs	r5, #14
 8002d3e:	5f49      	ldrsh	r1, [r1, r5]
 8002d40:	f000 f860 	bl	8002e04 <_lseek_r>
 8002d44:	89a3      	ldrh	r3, [r4, #12]
 8002d46:	1c42      	adds	r2, r0, #1
 8002d48:	d103      	bne.n	8002d52 <__sseek+0x1a>
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <__sseek+0x28>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0152      	lsls	r2, r2, #5
 8002d56:	4313      	orrs	r3, r2
 8002d58:	81a3      	strh	r3, [r4, #12]
 8002d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002d5c:	e7f8      	b.n	8002d50 <__sseek+0x18>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	ffffefff 	.word	0xffffefff

08002d64 <__sclose>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	230e      	movs	r3, #14
 8002d68:	5ec9      	ldrsh	r1, [r1, r3]
 8002d6a:	f000 f815 	bl	8002d98 <_close_r>
 8002d6e:	bd10      	pop	{r4, pc}

08002d70 <_write_r>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	0004      	movs	r4, r0
 8002d74:	0008      	movs	r0, r1
 8002d76:	0011      	movs	r1, r2
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	4d05      	ldr	r5, [pc, #20]	; (8002d94 <_write_r+0x24>)
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	f7fe fd1c 	bl	80017bc <_write>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d103      	bne.n	8002d90 <_write_r+0x20>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d000      	beq.n	8002d90 <_write_r+0x20>
 8002d8e:	6023      	str	r3, [r4, #0]
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000098 	.word	0x20000098

08002d98 <_close_r>:
 8002d98:	2300      	movs	r3, #0
 8002d9a:	b570      	push	{r4, r5, r6, lr}
 8002d9c:	4d06      	ldr	r5, [pc, #24]	; (8002db8 <_close_r+0x20>)
 8002d9e:	0004      	movs	r4, r0
 8002da0:	0008      	movs	r0, r1
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	f7fe fdd3 	bl	800194e <_close>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d103      	bne.n	8002db4 <_close_r+0x1c>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d000      	beq.n	8002db4 <_close_r+0x1c>
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	20000098 	.word	0x20000098

08002dbc <_fstat_r>:
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	b570      	push	{r4, r5, r6, lr}
 8002dc0:	4d06      	ldr	r5, [pc, #24]	; (8002ddc <_fstat_r+0x20>)
 8002dc2:	0004      	movs	r4, r0
 8002dc4:	0008      	movs	r0, r1
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	f7fe fdca 	bl	8001962 <_fstat>
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	d103      	bne.n	8002dda <_fstat_r+0x1e>
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d000      	beq.n	8002dda <_fstat_r+0x1e>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	20000098 	.word	0x20000098

08002de0 <_isatty_r>:
 8002de0:	2300      	movs	r3, #0
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	4d06      	ldr	r5, [pc, #24]	; (8002e00 <_isatty_r+0x20>)
 8002de6:	0004      	movs	r4, r0
 8002de8:	0008      	movs	r0, r1
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	f7fe fdc7 	bl	800197e <_isatty>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d103      	bne.n	8002dfc <_isatty_r+0x1c>
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d000      	beq.n	8002dfc <_isatty_r+0x1c>
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20000098 	.word	0x20000098

08002e04 <_lseek_r>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	0004      	movs	r4, r0
 8002e08:	0008      	movs	r0, r1
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2300      	movs	r3, #0
 8002e10:	4d05      	ldr	r5, [pc, #20]	; (8002e28 <_lseek_r+0x24>)
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fe fdbc 	bl	8001990 <_lseek>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d103      	bne.n	8002e24 <_lseek_r+0x20>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d000      	beq.n	8002e24 <_lseek_r+0x20>
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	20000098 	.word	0x20000098

08002e2c <memchr>:
 8002e2c:	b2c9      	uxtb	r1, r1
 8002e2e:	1882      	adds	r2, r0, r2
 8002e30:	4290      	cmp	r0, r2
 8002e32:	d101      	bne.n	8002e38 <memchr+0xc>
 8002e34:	2000      	movs	r0, #0
 8002e36:	4770      	bx	lr
 8002e38:	7803      	ldrb	r3, [r0, #0]
 8002e3a:	428b      	cmp	r3, r1
 8002e3c:	d0fb      	beq.n	8002e36 <memchr+0xa>
 8002e3e:	3001      	adds	r0, #1
 8002e40:	e7f6      	b.n	8002e30 <memchr+0x4>
	...

08002e44 <__malloc_lock>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4802      	ldr	r0, [pc, #8]	; (8002e50 <__malloc_lock+0xc>)
 8002e48:	f7ff faff 	bl	800244a <__retarget_lock_acquire_recursive>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	2000008c 	.word	0x2000008c

08002e54 <__malloc_unlock>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <__malloc_unlock+0xc>)
 8002e58:	f7ff faf8 	bl	800244c <__retarget_lock_release_recursive>
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	2000008c 	.word	0x2000008c

08002e64 <_read_r>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	0004      	movs	r4, r0
 8002e68:	0008      	movs	r0, r1
 8002e6a:	0011      	movs	r1, r2
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4d05      	ldr	r5, [pc, #20]	; (8002e88 <_read_r+0x24>)
 8002e72:	602b      	str	r3, [r5, #0]
 8002e74:	f7fe fd4e 	bl	8001914 <_read>
 8002e78:	1c43      	adds	r3, r0, #1
 8002e7a:	d103      	bne.n	8002e84 <_read_r+0x20>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d000      	beq.n	8002e84 <_read_r+0x20>
 8002e82:	6023      	str	r3, [r4, #0]
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000098 	.word	0x20000098

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
